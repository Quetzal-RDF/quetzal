dummy(store_name) ::= << select null from sysibm.sysdummy1 where 0=1 >>

describe(target, entry_constraint, sql_id, columns,s_target)  ::= << 
 QD<sql_id> AS (SELECT ENTRY AS DESCRIBED_RESOURCE, LT.PROP AS PROPERTY, LT.VAL AS OBJECT, LT.TYP AS PTYP
 FROM <target; separator=",">,TABLE( VALUES <columns:{c |(prop<c>,val<c>,typ<c>)} ; separator="," > ) AS LT(prop,val,typ) 
 WHERE LT.prop IS NOT NULL
 	   <if(entry_constraint)> AND <entry_constraint; separator=" AND "> <endif>),
QR<sql_id> AS ( SELECT DESCRIBED_RESOURCE, PROPERTY, COALESCE(ELEM, OBJECT) AS OBJECT, COALESCE(TYP,PTYP) AS TYP
FROM QD<sql_id> LEFT OUTER JOIN <s_target> ON OBJECT = list_id AND OBJECT LIKE 'lid:%' ORDER BY DESCRIBED_RESOURCE)	   
>>


sub_select(outerProject, project, project_alias_name, project_orderby_vars, target,sql_id,distinct,const_filter, endModifiers)  ::= <<  
<if(outerProject)>QS<sql_id> AS (SELECT <outerProject; separator=" , "> FROM 
<else> QS<sql_id> AS <endif> (SELECT <if(distinct)> DISTINCT <endif> <project; separator=","> FROM <target> 
<if(const_filter)> WHERE  <const_filter; separator=" AND "> <endif>
<if(endModifiers)> <endModifiers> <endif>)
<if(outerProject)>)<endif>
>>


top_select(outerProject, project, project_alias_name, project_orderby_vars, target,sql_id,distinct,const_filter, endModifiers, store_name)  ::= << 
<if(outerProject)> SELECT <outerProject; separator=" , "> FROM ( <endif>
<if(sql_id)> QS<sql_id> AS (<endif>SELECT <if(distinct)> DISTINCT <endif> <project; separator=","> FROM<if(target)> <target> <else> SYSIBM.SYSDUMMY1 <endif> <if(const_filter)> WHERE  <const_filter; separator=" AND "> <endif> 
<if(endModifiers)> <endModifiers> <endif>
<if(sql_id)>)<endif>
<if(outerProject)>)<endif>
>>

triple_all_predicates_both(project,target, entry_constraint, graph_constraint,predicate_constraint, sep, val_constraint,pfilter_constraint, sfilter_constraint, sql_id, columns, project_type,s_project, s_target, is_rph,  hasMultipleTargets)  ::= << 
 Q<sql_id> AS (SELECT <project; separator=",">
 FROM <target; separator=",">,TABLE( VALUES <columns:{c |(prop<c>,val<c><if(project_type)>,typ<c><endif>)} ; separator="," > ) AS LT(prop,val <if(project_type)>,typ<endif>) 
 WHERE LT.prop IS NOT NULL
 	   <if(entry_constraint)> AND <entry_constraint; separator=" AND "> <endif>
 	   <if(predicate_constraint)> AND (<predicate_constraint; separator=sep>)<endif>
 	   <if(graph_constraint)> AND <graph_constraint; separator=" AND "> <endif>
 	   <if(pfilter_constraint)> AND <pfilter_constraint; separator=" AND "> <endif>),
QS<sql_id> AS ( SELECT <s_project; separator=",">
FROM Q<sql_id> LEFT OUTER JOIN <s_target> ON ltval = list_id AND ltval LIKE 'lid:%'
	   <if(sfilter_constraint)> WHERE <sfilter_constraint; separator=" AND "> <endif>
	   <if(val_constraint)> <if(sfilter_constraint)> AND <else> WHERE <endif> <val_constraint; separator=" AND "> <endif> )	   
>>

ask(target)  ::= << 
 SELECT * FROM <target> FETCH FIRST 1 ROWS ONLY OPTIMIZE FOR 1 ROWS
>>

values(values_project, project, values, sql_id, target, join_constraint, store_name)  ::= << 
QS<sql_id> AS ( SELECT <project; separator=","> FROM (VALUES <values:{(<it; separator=",">)};separator=",">) AS TEMP(<values_project; separator=",">)
<if(target)>,<target> <if(join_constraint)>WHERE <join_constraint; separator=" AND "><endif> <endif>
)
>>

minus(left_project,left_target,right_project,right_target,sql_id)  ::= << 
QS<sql_id> AS ( SELECT <left_project; separator=","> FROM <left_target> MINUS
SELECT <right_project; separator=","> FROM <right_target>)
>>

xmlPostData(sql_id, target, paramNames, postedColumns, postTypes) ::= <<

QS<sql_id>_POST AS 
  (select xmlserialize( 
     xmlelement( name "data", 
        xmlagg(
           xmlelement( name "row", 
               <paramNames,postedColumns,postTypes:{p,c,t |xmlelement( name "<p>", xmlattributes( <t> AS "type" ), <target>.<c>)
}; separator=",">     ))) AS BLOB) AS doc from <target>),
>>

textPostData(sql_id, target, indexColumns, postedColumns, postTypes) ::= <<

QS<sql_id>_POST AS 
  (select CAST(<postedColumns,postTypes:{c,t |'--xYzZY'||X'0A'||'Content-Disposition: form-data; name="<c>"'||X'0A'||listagg(<c>, X'0A')
}; separator="||"> AS BLOB) AS doc from <target>),
>>

serviceHttpPost(ns, iris, xPathForRows, xPathForCols, xPathForColTypes, sql_id, firstProjectCols, queryText, service, outputColumns, dtCols, htmlHeader) ::= <<

QS<sql_id>_TMP AS (SELECT <firstProjectCols; separator=",">
   FROM XMLTABLE('<ns,iris:{n,iri|declare namespace <n>="<iri>";}; separator=" "> $results<xPathForRows>' 
      PASSING XMLPARSE(
         DOCUMENT 
           DB2XML.HTTPPOSTBLOB(<service>, CAST ('<htmlHeader>' AS CLOB(1K)), CAST('<queryText>' AS BLOB) || (select doc from QS<sql_id>_POST))) as "results"
           COLUMNS
             <outputColumns,xPathForCols:{c,x|<c> VARCHAR(1024) PATH '<ns,iris:{n,iri|declare namespace <n>="<iri>";}; separator=" "> <x>'
}; separator=","> <if(dtCols)>           ,<dtCols,xPathForColTypes:{c,x|<c>_TYP VARCHAR(128) WITH DEFAULT 'SIMPLE_LITERAL_ID' PATH '<ns,iris:{n,iri|declare namespace <n>="<iri>";}; separator=" "> <x>'
            }; separator=","><endif>) AS xml),
>>

serviceMerge(firstProjectCols, secondProjectCols, queryText, service, outputColumns, sql_id, join_constraint, target, dtCols, dtConstraints, dtTable, postedColumns, postTypes, htmlHeader, indexColumns) ::= <<

QS<sql_id> AS (SELECT <secondProjectCols; separator=","> FROM QS<sql_id>_TMP 
   <if(target)>,<target> <if(join_constraint)>WHERE <join_constraint; separator=" AND "><endif><endif>)
>>

service(ns, iris, xPathForRows, xPathForCols, xPathForColTypes, firstProjectCols, secondProjectCols, allColumns, functionBody, queryText, service, outputColumns, sql_id, join_constraint, target, dtCols, dtConstraints, dtTable, filter_constraint, htmlHeader) ::= <<
QS<sql_id>_TMP AS (SELECT <firstProjectCols; separator=",">
   FROM <if(target)><target>, <endif>XMLTABLE('<ns,iris:{n,iri|declare namespace <n>="<iri>";}; separator=" "> $results<xPathForRows>' 
      PASSING XMLPARSE(
         DOCUMENT 
           DB2XML.HTTPGETBLOB(<service>,CAST ('<htmlHeader>' AS CLOB(1K)))
      ) as "results"
         COLUMNS 
            <outputColumns,xPathForCols:{c,x|<c> VARCHAR(1024) PATH '<ns,iris:{n,iri|declare namespace <n>="<iri>";}; separator=" "> <x>'
}; separator=","> <if(dtCols)>           ,<dtCols,xPathForColTypes:{c,x|<c>_TYP VARCHAR(128) WITH DEFAULT 'SIMPLE_LITERAL_ID' PATH '<ns,iris:{n,iri|declare namespace <n>="<iri>";}; separator=" "> <x>'
            }; separator=","><endif>) AS xml <if(filter_constraint)> WHERE <filter_constraint; separator=" AND "> <endif>),
QS<sql_id> AS (SELECT <secondProjectCols; separator=","> FROM QS<sql_id>_TMP 
   <if(target)>,<target> <if(join_constraint)>WHERE <join_constraint; separator=" AND "><endif><endif>)
>>


group SQLTemplates;

RDF_DATATYPE(typeCol, dtTableName, iri, blankNode, plainLiteral, startOfLangLiterals, endOfLangLiterals)  ::= << 
 (SELECT CASE WHEN DATATYPE_ID \<= <endOfLangLiterals> AND DATATYPE_ID \>= <startOfLangLiterals> THEN 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString' 
  WHEN DATATYPE_ID = <plainLiteral> THEN 'http://www.w3.org/2001/XMLSchema#string' ELSE 
  DATATYPE_NAME END from <dtTableName> WHERE DATATYPE_ID=<typeCol> AND DATATYPE_ID \<\> <iri> AND DATATYPE_ID \<\> <blankNode> )
>>



RDF_EQ_CAST_LEFT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  (<cast_function_start>( <left> <cast_function_end> AS <cast>) = <right>) >>



RDF_SAMETERM(fterm, ftype, sterm, stype)  ::= << 
 (<fterm> = <sterm> AND <ftype> = <stype>)
>>



old_relational_expression(left, right, udf)  ::= << 
 (<udf>(<left>, <right>) = true)
>>



RDF_STRSTARTS(var, value)  ::= << 
 (LEFT(<var>, LENGTH('<value>')) = '<value>' )   
>>


NUMERICS_CASE(condition, types)  ::= <<  (CASE WHEN <types; separator=" AND "> THEN <condition> ELSE NULL END) >>



RDF_STR(args)  ::= <<  <args> >>






select_all_predicates(varentry, vargraph, varprop, primary_table, columns, graph)  ::= << 
	SELECT T.entry as <varentry>, T.gid as <vargraph>, LT.prop as <varprop>, LT.val as VAL0
	FROM <primary_table> as T, 
			TABLE( VALUES <columns:table_values(number=it); seperator=", "> )  AS LT(prop, val) 
	WHERE (T.gid = <graph>) AND (LT.val IS NOT NULL) 
>>



RDF_LANG_CONST(args)  ::= <<  (CASE WHEN LOCATE('@', <args>) = 0 THEN '' ELSE SUBSTR(<args>, (LOCATE('@', <args>) + 1)) END) >>


RDF_LE_CAST_RIGHT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  ( <left> \<= <cast_function_start>( <right> <cast_function_end> AS <cast>)) >>



RDF_LANG_VAR(dttable, langid, iri, blankNode, startOfLangLiterals, endOfLangLiterals)  ::= <<  (SELECT CASE WHEN 
DATATYPE_ID \<= <endOfLangLiterals> AND DATATYPE_ID \>= <startOfLangLiterals> THEN LOWER(DATATYPE_NAME) ELSE '' END FROM <dttable> 
WHERE DATATYPE_ID = <langid> AND DATATYPE_ID \<\> <iri> AND DATATYPE_ID \<\> <blankNode>)>>


RDF_NE_CAST_RIGHT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  ( <left> \<\>  <cast_function_start>( <right> <cast_function_end> AS <cast>)) >>



RDF_UCASE(args)  ::= <<  UPPER(<args>) >>





RDF_EQ(left, right)  ::= <<  (<left> = <right>) >>




whereclause_secondary_value_filter(triple_number, operator, value)  ::= << 
 (T.val<triple_number> = <value> OR S<triple_number>.elem = <value>)
>>



NOT_RDF_EBV(ebv, type, unknownTypesStart, unknownTypesEnd)  ::= <<  
 (NOT(<ebv>) AND (<type> \< <unknownTypesStart> OR <type> \> <unknownTypesEnd>))
>>




RDF_EQ_CAST_RIGHT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  ( <left> = <cast_function_start>( <right> <cast_function_end> AS <cast>)) >>



RDF_GE_CAST_LEFT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  (<cast_function_start>( <left> <cast_function_end> AS <cast>) \>= <right>) >>






select_all_predicates(varentry, vargraph, varprop, primary_table, columns, graph)  ::= << 
	SELECT T.entry as <varentry>, T.gid as <vargraph>, LT.prop as <varprop>, LT.val as VAL0
	FROM <primary_table> as T, 
			TABLE( VALUES <columns:table_values(number=it); seperator=", "> )  AS LT(prop, val) 
	WHERE (T.gid = <graph>) AND (LT.val IS NOT NULL) 
>>



RDF_XFN_DATETIME(value)  ::= <<  CAST(<value> AS TIMESTAMP) >>



RDF_ISLITERAL(type, iri, blankNode)  ::= << 
 (<type> \<\> <iri> AND <type> \<\> <blankNode>)
>>



relational_expression(left, right, operator)  ::= << 
 CASE WHEN LOCATE('^^', <left>) > 0 THEN SUBSTR(<left>, LOCATE('^^', <left>)) ELSE <left> END
 	<operator>
 CASE WHEN LOCATE('^^', <right>) > 0 THEN SUBSTR(<right>, LOCATE('^^', <right>)) ELSE <right> END
>>




aggregate_count(var)  ::= << 
 COUNT(<var>)
>>




predicate_columns(num, value)  ::= << 
	( <num:predicate_value(num=it, value=value); separator=" OR "> )
>>



logical_or_expressions(expressions)  ::= << 
 (<expressions; separator=" OR ">)
>>


RDF_LT_CAST_RIGHT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  ( <left> \< <cast_function_start>( <right> <cast_function_end> AS <cast>)) >>



RDF_STRSTARTS_LS_LIKE(var, value, long_strings_table)  ::= << 
 (<var> LIKE '<value>%'  
 OR <var> IN (SELECT short_string FROM <long_strings_table> WHERE long_string LIKE '<value>%')) 
>>


RDF_LE_CAST_LEFT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  (<cast_function_start>( <left> <cast_function_end> AS <cast>) \<= <right>) >>






RDF_STRSTARTS(var, value, len)  ::= << 
 (SUBSTR(<var>, 1, <len>) = '<value>' )   
>>



LONG_STRING_ORDER_BY_VARIABLE (var, tab_alias)  ::= << 
 COALESCE(<tab_alias>.long_string, <var>) AS <var> 
>>



boolean_function(udf, args)  ::= << 
 <udf>(<args; separator=", ">)
>>


RDF_GT_CAST_LEFT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  (<cast_function_start>( <left> <cast_function_end> AS <cast>) \> <right>) >>



function(function, args)  ::= << 
 <function>(<args; separator=", ">)
>>



RDF_STRSTARTS_LS(var, value, len, long_strings_table)  ::= << 
 (SUBSTR(<var>, 1, <len>) = '<value>'  
 OR <var> IN (SELECT short_string FROM <long_strings_table> WHERE SUBSTR(long_string, 1, <len>) = '<value>' )) 
>>


TYPE_TEST(typeCol, val)  ::= <<  <typeCol> = <val> >>



new_effective_boolean_value(expression)  ::= << 
 (RDF_EBV(<expression>) = true)
>>




RDF_GT(left, right)  ::= <<  (<left> \> <right>) >>






RDF_LT_CAST_LEFT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  (<cast_function_start>( <left> <cast_function_end> AS <cast>) \< <right>) >>





CAST_RIGHT(left, right, cast, cast_function_start, cast_function_end, operator)  ::= <<  (<left> <operator> <cast_function_start>( <right> <cast_function_end> AS <cast>)) >>



RDF_LANGMATCHES(ftype, rstart)  ::= << 
 (<ftype> IN (<rstart>))
>>






coalesce(args)  ::= <<  COALESCE(<args;separator=", ">) >>






RDF_EXISTS(right_target, exists_constraints, is_negated)  ::= << 
<if(is_negated)> NOT <endif> EXISTS
(SELECT 1 FROM <right_target> <if(exists_constraints)> WHERE <exists_constraints; separator=" AND "><endif>)
>>











new_logical_or_expressions(expressions)  ::= << 
 (<expressions:effective_boolean_value(it); separator="\n\t OR \n">)
>>




RDF_LANG()  ::= <<  >>



caseclause_when_value(hash, value)  ::= << 
		WHEN T.prop<hash> = '<value>' THEN T.val<hash>
>>



RDF_STRDT(lexform, typeiri)  ::= <<  CONCAT(CONCAT(<lexform>, '^^'), '<typeiri>') >>



CAST_LEFT(left, right, cast, cast_function_start, cast_function_end, operator)  ::= <<  (<cast_function_start>( <left> <cast_function_end> AS <cast>) <operator> <right>) >>






RDF_STRSTARTS_LIKE(var, value, long_strings_table)  ::= << 
 (<var> LIKE '<value>%')  
>>


RDF_IS_NOT_FALSE(value)  ::= <<  ( (<value> \<\> 'false') AND (<value> \<\> '0') ) >>





old_RDF_EQ(left, right)  ::= <<  
 ( (<left> = <right>) OR
   (CASE WHEN LOCATE('^^', <left>) > 0 THEN SUBSTR(<left>, 1, LOCATE('^^', <left>)-1) ELSE <left> END
 	  =
    CASE WHEN LOCATE('^^', <right>) > 0 THEN SUBSTR(<right>, 1, LOCATE('^^', <right>)) ELSE <right> END) )
>>



RDF_STRLEN(args)  ::= <<  LENGTH(<args>) >>



RDF_SUB_STRING_EXP(string_var, startPos, endPos)  ::= <<  SUBSTR(<string_var>, <startPos> <if(endPos)>, <endPos> <endif>) >>



RDF_STRENDS_LS(var, value)  ::= << 
 (<var> LIKE '%<value>' OR <var> LIKE '%<value>"' 
 OR <var> IN (SELECT short_string FROM <long_strings_table> WHERE long_string LIKE '%<value>' OR LIKE '%<value>"'))
>>





logical_and_expressions(expressions)  ::= << 
 (<expressions; separator=" AND ">)
>>


RDF_GE_CAST_RIGHT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  ( <left> \>= <cast_function_start>( <right> <cast_function_end> AS <cast>)) >>



RDF_IS_TRUE(value)  ::= <<  ( (<value> = 'true') OR (<value> = '1') ) >>


unary_expression(operator, expression)  ::= << 
 operator (RDF_EBV(expression) = true)
>>




RDF_STRENDS_LS(var, value)  ::= << 
 (<var> LIKE '%<value>' OR <var> LIKE '%<value>"' 
 OR <var> IN (SELECT short_string FROM <long_strings_table> WHERE long_string LIKE '%<value>' OR LIKE '%<value>"'))
>>



RDF_ISURI(type, iri_type)  ::= << 
 (<type> = <iri_type>)
>>



STRING_SIMPLE_LIT_MATCH(simple_lit_type, string_type, ltype, rtype)  ::= <<  ( (<ltype> = <simple_lit_type> AND <rtype> = <string_type>) OR 
(<rtype> = <simple_lit_type> AND <ltype> = <string_type>) OR (<rtype> = <ltype>) )  >>





RDF_BOUND(args)  ::= << 
 (<args> IS NOT NULL)
>>




LONG_STRING_ORDER_BY_VARIABLE (var, tab_alias)  ::= << 
 COALESCE(<tab_alias>.long_string, <var>) AS <var> 
>>

 



RDF_COALESCE(expr1, expr2)  ::= <<  (COALESCE(<expr1>, <expr2>)) >>



old_RDF_STR(args)  ::= << 
 RDF_STR(<args; separator=", ">)
>>




EQ_NEQ_CAST_ALL(left, ltype, right, rtype, nrstart, nrend, tstring, tdatetime, tiri, tbn, operator)  ::= <<  
 (((<ltype> BETWEEN <nrstart> AND <nrend>) AND (<rtype> BETWEEN <nrstart> AND <nrend>) AND CAST(<left> AS FLOAT) <operator> CAST(<right> AS FLOAT)) OR
 (<ltype> \> <tstring> AND <rtype> = <ltype> AND <left> <operator> <right>) OR
 (<ltype> BETWEEN <tbn> AND <tiri> AND <rtype> = <ltype> AND <left> <operator> <right>) OR 
 (<ltype> = <tdatetime> AND <rtype> = <tdatetime> AND (CAST (<left> AS TIMESTAMP) <operator> CAST (<right> AS TIMESTAMP)) 
>>



RDF_LANGMATCHES_FAMILY(ftype, rstart, rend)  ::= << 
 (<ftype> BETWEEN <rstart> AND <rend>)
>>


RDF_NE_CAST_LEFT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  (<cast_function_start>( <left> <cast_function_end> AS <cast>) \<\>  <right>) >>



RDF_STRLANG(lexform, lang)  ::= <<  CONCAT(CONCAT(<lexform>, '@'), '<lang>') >>










RDF_GE(left, right)  ::= <<  (<left> \>= <right>) >>




whereclause_primary_entry(operator, value)  ::= << 
 (T.entry <operator> <value>) 
>>



tables_values(number)  ::= <<  (prop<number>, val<number>) >>



LONG_STRING_ORDER_BY_JOIN (var, var_typ, tab_name, tab_alias)  ::= << 
 LEFT OUTER JOIN <tab_name> AS <tab_alias> ON <var>=<tab_alias>.short_string AND <tab_alias>.typ = <var_typ>  
>>



predicate_value(num, value)  ::= <<  PROP<num> = '<value>' >>






BOOLEAN_CASE(condition)  ::= <<  (CASE WHEN <condition> THEN 1 ELSE 0 END) >>



RDF_IRI(string)  ::= <<  \<<string>\>  >>




RDF_LANG(args)  ::= << 
 (<args>)
>>



RDF_STRENDS_LIKE(var, value)  ::= << 
 <var> LIKE '%<value>'
>>




RDF_LT(left, right)  ::= <<  (<left> \< <right>) >>




builtin_function(udf, args)  ::= << 
 <udf>(<args; separator=", ">)
>>





RDF_IS_FALSE(value)  ::= <<  ( (<value> = 'false') OR (<value> = '0') ) >>


RDF_GT_CAST_RIGHT(left, right, cast, cast_function_start, cast_function_end)  ::= <<  ( <left> \> <cast_function_start>( <right> <cast_function_end> AS <cast>)) >>





BETWEEN_TYPE_TEST(typeCol, start, end)  ::= <<  <typeCol> BETWEEN <start> AND <end> >>




old2_relational_expression(left, right, udf)  ::= << 
 (<udf>(STRIP(<left>,B,'"'), STRIP(<right>,B,'"')) = true)
>>





selectclause_secondary(varname)  ::= << 
 (T.<varname> AS <varname>)
>>



RDF_STRENDS_LS_LIKE(var, value, long_strings_table)  ::= << 
 (<var> LIKE '%<value>'  
 OR <var> IN (SELECT short_string FROM <long_strings_table> WHERE long_string LIKE '%<value>'))
>>



RDF_NE(left, right)  ::= <<  (<left> \<\> <right>) >>




predicate_list(props)  ::= << 
	<props; separator="\n\t AND \n">
>>

 

RDF_IS_NOT_TRUE(value)  ::= <<  ( (<value> \<\> 'true') AND (<value> \<\> '1') ) >>



unary_not(expression)  ::= << 
 (NOT (<expression>))
>>



RDF_LANGMATCHES_old(ftype, stype)  ::= << 
 (<ftype> = <stype>)
>>



RDF_ISIRI(type, iri_type)  ::= << 
 (<type> = <iri_type>)
>>




new_RDF_STR(args)  ::= <<  
CASE WHEN LOCATE('^^', <args>) > 0 THEN '"'||SUBSTR(<args>, LOCATE('^^', <args>))||'"' 
     WHEN LOCATE('@', <args>) > 0 THEN '"'||SUBSTR(<args>, LOCATE('@', <args>))||'"' 
     ELSE <args> END 
>>




RDF_LE(left, right)  ::= <<  (<left> \<= <right>) >>



CAST_RIGHT(left, right, cast, cast_function_start, cast_function_end, operator)  ::= <<  (<left> <operator> <cast_function_start>( <right> <cast_function_end> AS <cast>)) >>



old2_RDF_EQ(left, right)  ::= <<  (RDF_EQ(<left>, <right>) = true) >>



RDF_LCASE(args)  ::= <<  LOWER(<args>) >>




RDF_LANGMATCHES_ALL(ftype, rstart)  ::= << 
 (<ftype> \>= <rstart>)
>>


select_caseclause_primary(triple_number, hashes, predicate_value)  ::= << 
	CASE <hashes:caseclause_when_value(hash=it, value=predicate_value)>
		ELSE NULL
	END AS val<triple_number>
>>



new_logical_and_expressions(expressions)  ::= << 
 (<expressions:effective_boolean_value(it); separator="\n\t AND \n">)
>>





aggregate_distinct_count(var)  ::= << 
 COUNT(DISTINCT <var>)
>>



  




/******************************************************************************
 * Copyright (c) 2015 IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *****************************************************************************/
 // $ANTLR 3.3 Nov 30, 2010 12:50:56 IbmSparql.g 2014-07-17 09:07:57
 
package com.ibm.research.rdf.store.sparql11;

import java.util.ArrayList;
import java.util.List;

import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.DFA;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.MismatchedTokenException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.RuleReturnScope;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeAdaptor;
import org.antlr.runtime.tree.RewriteEarlyExitException;
import org.antlr.runtime.tree.RewriteRuleSubtreeStream;
import org.antlr.runtime.tree.RewriteRuleTokenStream;
import org.antlr.runtime.tree.TreeAdaptor;

public class IbmSparqlParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PATH", "ALT", "SEQ", "ELT", "INV", "BROKEN_PLUS", "BROKEN_MINUS", "NIL", "ANNON", "ROOT", "PROLOGUE", "DEFAULT_NAMESPACE", "NAMESPACE_PREFIX_MAP", "KEY", "QUERY", "UPDATE", "TYPE", "PVARS", "EXP", "NOT_IN", "GROUP_GRAPH_PATTERN", "GROUP_GRAPH_PATTERN_SUB", "GRAPH_GRAPH_PATTERN", "SUB_SELECT", "TRIPLES_BLOCK", "NON_TRIPLES", "TRIPLE", "TRIPLE2", "TRIPLES_SAME_SUBJECT", "GRAPH_NODE", "VAR", "PREFIXED_NAME", "PREFIXED_NS", "FUNCTION", "EXPRESSION", "NOT_EXISTS", "IRI_OR_FUNCTION", "DATASET", "GROUP_BY", "ORDER_BY", "CONDITION", "BIND_VALUES", "STRING", "BOOLEAN", "NUMERIC", "SUBJECT", "PREDICATE", "VALUE", "TRIPLES_NODE_PROPERTY_LIST", "TRIPLES_NODE", "COLLECTION", "PROPERTY_LIST", "PREDICATE_VALUE", "WHERE", "IRI_REF", "LTE", "MODIFIERS", "BIG_INTEGER", "BIG_DECIMAL", "INLINE_DATA", "BASE", "PREFIX", "PNAME_NS", "SELECT", "DISTINCT", "REDUCED", "OPEN_BRACE", "AS", "CLOSE_BRACE", "CONSTRUCT", "WHERE_TOKEN", "OPEN_CURLY_BRACE", "CLOSE_CURLY_BRACE", "DESCRIBE", "ASK", "FROM", "NAMED", "GROUP", "BY", "HAVING", "ORDER", "ASC", "DESC", "LIMIT", "INTEGER", "OFFSET", "BINDINGS", "UNDEF", "SEMICOLON", "LOAD", "SILENT", "INTO", "CLEAR", "DROP", "CREATE", "ADD", "TO", "MOVE", "COPY", "INSERT", "DATA", "DELETE", "WITH", "USING", "DEFAULT", "GRAPH", "ALL", "DOT", "VALUES", "OPTIONAL", "SERVICE", "BIND", "UNION", "MINUS", "FILTER", "COMMA", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", "VAR1", "VAR2", "LOGICAL_OR", "LOGICAL_AND", "LT", "IN", "NOT", "STR", "LANG", "LANGMATCHES", "DATATYPE", "BOUND", "IRI", "URI", "BNODE", "RAND", "ABS", "CEIL", "FLOOR", "ROUND", "CONCAT", "STRLEN", "UCASE", "LCASE", "ENCODE_FOR_URI", "CONTAINS", "STRSTARTS", "STRENDS", "STRBEFORE", "STRAFTER", "YEAR", "MONTH", "DAY", "HOURS", "MINUTES", "SECONDS", "TIMEZONE", "TZ", "NOW", "UUID", "STRUUID", "MD5", "SHA1", "SHA224", "SHA256", "SHA384", "SHA512", "COALESCE", "IF", "STRLANG", "STRDT", "SAMETERM", "ISIRI", "ISURI", "ISBLANK", "ISLITERAL", "ISNUMERIC", "REGEX", "SUBSTR", "REPLACE", "EXISTS", "COUNT", "SUM", "MIN", "MAX", "AVG", "SAMPLE", "GROUP_CONCAT", "SEPARATOR", "LANGTAG", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", "TRUE", "FALSE", "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", "PNAME_LN", "BLANK_NODE_LABEL", "B", "A", "S", "E", "P", "R", "F", "I", "X", "L", "C", "T", "D", "N", "U", "O", "W", "H", "K", "M", "G", "Y", "V", "Z", "UNICODE_ESCAPE", "PN_PREFIX", "PN_LOCAL", "VARNAME", "DIGIT", "HEXDIGIT", "EXPONENT", "ECHAR", "WS", "EOL", "COMMENT", "PN_CHARS_BASE", "PN_CHARS_U", "PN_CHARS", "PLX", "PERCENT", "PN_LOCAL_ESC", "J", "Q", "'*'", "'a'", "'|'", "'/'", "'^'", "'?'", "'+'", "'!'", "'='", "'!='", "'>'", "'>='", "'-'", "'^^'"
    };
    public static final int EOF=-1;
    public static final int T__251=251;
    public static final int T__252=252;
    public static final int T__253=253;
    public static final int T__254=254;
    public static final int T__255=255;
    public static final int T__256=256;
    public static final int T__257=257;
    public static final int T__258=258;
    public static final int T__259=259;
    public static final int T__260=260;
    public static final int T__261=261;
    public static final int T__262=262;
    public static final int T__263=263;
    public static final int T__264=264;
    public static final int PATH=4;
    public static final int ALT=5;
    public static final int SEQ=6;
    public static final int ELT=7;
    public static final int INV=8;
    public static final int BROKEN_PLUS=9;
    public static final int BROKEN_MINUS=10;
    public static final int NIL=11;
    public static final int ANNON=12;
    public static final int ROOT=13;
    public static final int PROLOGUE=14;
    public static final int DEFAULT_NAMESPACE=15;
    public static final int NAMESPACE_PREFIX_MAP=16;
    public static final int KEY=17;
    public static final int QUERY=18;
    public static final int UPDATE=19;
    public static final int TYPE=20;
    public static final int PVARS=21;
    public static final int EXP=22;
    public static final int NOT_IN=23;
    public static final int GROUP_GRAPH_PATTERN=24;
    public static final int GROUP_GRAPH_PATTERN_SUB=25;
    public static final int GRAPH_GRAPH_PATTERN=26;
    public static final int SUB_SELECT=27;
    public static final int TRIPLES_BLOCK=28;
    public static final int NON_TRIPLES=29;
    public static final int TRIPLE=30;
    public static final int TRIPLE2=31;
    public static final int TRIPLES_SAME_SUBJECT=32;
    public static final int GRAPH_NODE=33;
    public static final int VAR=34;
    public static final int PREFIXED_NAME=35;
    public static final int PREFIXED_NS=36;
    public static final int FUNCTION=37;
    public static final int EXPRESSION=38;
    public static final int NOT_EXISTS=39;
    public static final int IRI_OR_FUNCTION=40;
    public static final int DATASET=41;
    public static final int GROUP_BY=42;
    public static final int ORDER_BY=43;
    public static final int CONDITION=44;
    public static final int BIND_VALUES=45;
    public static final int STRING=46;
    public static final int BOOLEAN=47;
    public static final int NUMERIC=48;
    public static final int SUBJECT=49;
    public static final int PREDICATE=50;
    public static final int VALUE=51;
    public static final int TRIPLES_NODE_PROPERTY_LIST=52;
    public static final int TRIPLES_NODE=53;
    public static final int COLLECTION=54;
    public static final int PROPERTY_LIST=55;
    public static final int PREDICATE_VALUE=56;
    public static final int WHERE=57;
    public static final int IRI_REF=58;
    public static final int LTE=59;
    public static final int MODIFIERS=60;
    public static final int BIG_INTEGER=61;
    public static final int BIG_DECIMAL=62;
    public static final int INLINE_DATA=63;
    public static final int BASE=64;
    public static final int PREFIX=65;
    public static final int PNAME_NS=66;
    public static final int SELECT=67;
    public static final int DISTINCT=68;
    public static final int REDUCED=69;
    public static final int OPEN_BRACE=70;
    public static final int AS=71;
    public static final int CLOSE_BRACE=72;
    public static final int CONSTRUCT=73;
    public static final int WHERE_TOKEN=74;
    public static final int OPEN_CURLY_BRACE=75;
    public static final int CLOSE_CURLY_BRACE=76;
    public static final int DESCRIBE=77;
    public static final int ASK=78;
    public static final int FROM=79;
    public static final int NAMED=80;
    public static final int GROUP=81;
    public static final int BY=82;
    public static final int HAVING=83;
    public static final int ORDER=84;
    public static final int ASC=85;
    public static final int DESC=86;
    public static final int LIMIT=87;
    public static final int INTEGER=88;
    public static final int OFFSET=89;
    public static final int BINDINGS=90;
    public static final int UNDEF=91;
    public static final int SEMICOLON=92;
    public static final int LOAD=93;
    public static final int SILENT=94;
    public static final int INTO=95;
    public static final int CLEAR=96;
    public static final int DROP=97;
    public static final int CREATE=98;
    public static final int ADD=99;
    public static final int TO=100;
    public static final int MOVE=101;
    public static final int COPY=102;
    public static final int INSERT=103;
    public static final int DATA=104;
    public static final int DELETE=105;
    public static final int WITH=106;
    public static final int USING=107;
    public static final int DEFAULT=108;
    public static final int GRAPH=109;
    public static final int ALL=110;
    public static final int DOT=111;
    public static final int VALUES=112;
    public static final int OPTIONAL=113;
    public static final int SERVICE=114;
    public static final int BIND=115;
    public static final int UNION=116;
    public static final int MINUS=117;
    public static final int FILTER=118;
    public static final int COMMA=119;
    public static final int OPEN_SQ_BRACKET=120;
    public static final int CLOSE_SQ_BRACKET=121;
    public static final int VAR1=122;
    public static final int VAR2=123;
    public static final int LOGICAL_OR=124;
    public static final int LOGICAL_AND=125;
    public static final int LT=126;
    public static final int IN=127;
    public static final int NOT=128;
    public static final int STR=129;
    public static final int LANG=130;
    public static final int LANGMATCHES=131;
    public static final int DATATYPE=132;
    public static final int BOUND=133;
    public static final int IRI=134;
    public static final int URI=135;
    public static final int BNODE=136;
    public static final int RAND=137;
    public static final int ABS=138;
    public static final int CEIL=139;
    public static final int FLOOR=140;
    public static final int ROUND=141;
    public static final int CONCAT=142;
    public static final int STRLEN=143;
    public static final int UCASE=144;
    public static final int LCASE=145;
    public static final int ENCODE_FOR_URI=146;
    public static final int CONTAINS=147;
    public static final int STRSTARTS=148;
    public static final int STRENDS=149;
    public static final int STRBEFORE=150;
    public static final int STRAFTER=151;
    public static final int YEAR=152;
    public static final int MONTH=153;
    public static final int DAY=154;
    public static final int HOURS=155;
    public static final int MINUTES=156;
    public static final int SECONDS=157;
    public static final int TIMEZONE=158;
    public static final int TZ=159;
    public static final int NOW=160;
    public static final int UUID=161;
    public static final int STRUUID=162;
    public static final int MD5=163;
    public static final int SHA1=164;
    public static final int SHA224=165;
    public static final int SHA256=166;
    public static final int SHA384=167;
    public static final int SHA512=168;
    public static final int COALESCE=169;
    public static final int IF=170;
    public static final int STRLANG=171;
    public static final int STRDT=172;
    public static final int SAMETERM=173;
    public static final int ISIRI=174;
    public static final int ISURI=175;
    public static final int ISBLANK=176;
    public static final int ISLITERAL=177;
    public static final int ISNUMERIC=178;
    public static final int REGEX=179;
    public static final int SUBSTR=180;
    public static final int REPLACE=181;
    public static final int EXISTS=182;
    public static final int COUNT=183;
    public static final int SUM=184;
    public static final int MIN=185;
    public static final int MAX=186;
    public static final int AVG=187;
    public static final int SAMPLE=188;
    public static final int GROUP_CONCAT=189;
    public static final int SEPARATOR=190;
    public static final int LANGTAG=191;
    public static final int DECIMAL=192;
    public static final int DOUBLE=193;
    public static final int INTEGER_POSITIVE=194;
    public static final int DECIMAL_POSITIVE=195;
    public static final int DOUBLE_POSITIVE=196;
    public static final int INTEGER_NEGATIVE=197;
    public static final int DECIMAL_NEGATIVE=198;
    public static final int DOUBLE_NEGATIVE=199;
    public static final int TRUE=200;
    public static final int FALSE=201;
    public static final int STRING_LITERAL1=202;
    public static final int STRING_LITERAL2=203;
    public static final int STRING_LITERAL_LONG1=204;
    public static final int STRING_LITERAL_LONG2=205;
    public static final int PNAME_LN=206;
    public static final int BLANK_NODE_LABEL=207;
    public static final int B=208;
    public static final int A=209;
    public static final int S=210;
    public static final int E=211;
    public static final int P=212;
    public static final int R=213;
    public static final int F=214;
    public static final int I=215;
    public static final int X=216;
    public static final int L=217;
    public static final int C=218;
    public static final int T=219;
    public static final int D=220;
    public static final int N=221;
    public static final int U=222;
    public static final int O=223;
    public static final int W=224;
    public static final int H=225;
    public static final int K=226;
    public static final int M=227;
    public static final int G=228;
    public static final int Y=229;
    public static final int V=230;
    public static final int Z=231;
    public static final int UNICODE_ESCAPE=232;
    public static final int PN_PREFIX=233;
    public static final int PN_LOCAL=234;
    public static final int VARNAME=235;
    public static final int DIGIT=236;
    public static final int HEXDIGIT=237;
    public static final int EXPONENT=238;
    public static final int ECHAR=239;
    public static final int WS=240;
    public static final int EOL=241;
    public static final int COMMENT=242;
    public static final int PN_CHARS_BASE=243;
    public static final int PN_CHARS_U=244;
    public static final int PN_CHARS=245;
    public static final int PLX=246;
    public static final int PERCENT=247;
    public static final int PN_LOCAL_ESC=248;
    public static final int J=249;
    public static final int Q=250;

    // delegates
    // delegators


        public IbmSparqlParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public IbmSparqlParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return IbmSparqlParser.tokenNames; }
    public String getGrammarFileName() { return "IbmSparql.g"; }


    	protected void mismatch(IntStream input, int ttype, BitSet follow)
    		throws RecognitionException
    	{
    		throw new MismatchedTokenException(ttype, input);
    	}
    	
    	public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    		throws RecognitionException	
    	{
    		throw e;
    	}
    	
    	protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow)
        	throws RecognitionException
    	{   
        	throw new MismatchedTokenException(ttype, input);
    	}  


    public static class queryUnit_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "queryUnit"
    // IbmSparql.g:119:1: queryUnit : query -> ^( ROOT query ) ;
    public final IbmSparqlParser.queryUnit_return queryUnit() throws RecognitionException {
        IbmSparqlParser.queryUnit_return retval = new IbmSparqlParser.queryUnit_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.query_return query1 = null;


        RewriteRuleSubtreeStream stream_query=new RewriteRuleSubtreeStream(adaptor,"rule query");
        try {
            // IbmSparql.g:120:2: ( query -> ^( ROOT query ) )
            // IbmSparql.g:120:4: query
            {
            pushFollow(FOLLOW_query_in_queryUnit375);
            query1=query();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query.add(query1.getTree());


            // AST REWRITE
            // elements: query
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 122:3: -> ^( ROOT query )
            {
                // IbmSparql.g:122:7: ^( ROOT query )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(ROOT, "ROOT"), root_1);

                adaptor.addChild(root_1, stream_query.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "queryUnit"

    public static class query_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query"
    // IbmSparql.g:126:1: query : p= prologue (s= selectQuery | c= constructQuery | d= describeQuery | a= askQuery ) (b= bindingsClause )? -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? ) ;
    public final IbmSparqlParser.query_return query() throws RecognitionException {
        IbmSparqlParser.query_return retval = new IbmSparqlParser.query_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.prologue_return p = null;

        IbmSparqlParser.selectQuery_return s = null;

        IbmSparqlParser.constructQuery_return c = null;

        IbmSparqlParser.describeQuery_return d = null;

        IbmSparqlParser.askQuery_return a = null;

        IbmSparqlParser.bindingsClause_return b = null;


        RewriteRuleSubtreeStream stream_describeQuery=new RewriteRuleSubtreeStream(adaptor,"rule describeQuery");
        RewriteRuleSubtreeStream stream_bindingsClause=new RewriteRuleSubtreeStream(adaptor,"rule bindingsClause");
        RewriteRuleSubtreeStream stream_constructQuery=new RewriteRuleSubtreeStream(adaptor,"rule constructQuery");
        RewriteRuleSubtreeStream stream_askQuery=new RewriteRuleSubtreeStream(adaptor,"rule askQuery");
        RewriteRuleSubtreeStream stream_prologue=new RewriteRuleSubtreeStream(adaptor,"rule prologue");
        RewriteRuleSubtreeStream stream_selectQuery=new RewriteRuleSubtreeStream(adaptor,"rule selectQuery");
        try {
            // IbmSparql.g:127:2: (p= prologue (s= selectQuery | c= constructQuery | d= describeQuery | a= askQuery ) (b= bindingsClause )? -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? ) )
            // IbmSparql.g:127:4: p= prologue (s= selectQuery | c= constructQuery | d= describeQuery | a= askQuery ) (b= bindingsClause )?
            {
            pushFollow(FOLLOW_prologue_in_query411);
            p=prologue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prologue.add(p.getTree());
            // IbmSparql.g:128:3: (s= selectQuery | c= constructQuery | d= describeQuery | a= askQuery )
            int alt1=4;
            switch ( input.LA(1) ) {
            case SELECT:
                {
                alt1=1;
                }
                break;
            case CONSTRUCT:
                {
                alt1=2;
                }
                break;
            case DESCRIBE:
                {
                alt1=3;
                }
                break;
            case ASK:
                {
                alt1=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // IbmSparql.g:128:5: s= selectQuery
                    {
                    pushFollow(FOLLOW_selectQuery_in_query419);
                    s=selectQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectQuery.add(s.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:128:21: c= constructQuery
                    {
                    pushFollow(FOLLOW_constructQuery_in_query425);
                    c=constructQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructQuery.add(c.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:128:40: d= describeQuery
                    {
                    pushFollow(FOLLOW_describeQuery_in_query431);
                    d=describeQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_describeQuery.add(d.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparql.g:128:58: a= askQuery
                    {
                    pushFollow(FOLLOW_askQuery_in_query437);
                    a=askQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_askQuery.add(a.getTree());

                    }
                    break;

            }

            // IbmSparql.g:129:4: (b= bindingsClause )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==BINDINGS||LA2_0==VALUES) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // IbmSparql.g:129:4: b= bindingsClause
                    {
                    pushFollow(FOLLOW_bindingsClause_in_query445);
                    b=bindingsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bindingsClause.add(b.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: c, s, a, d, p, b
            // token labels: 
            // rule labels: retval, d, b, s, c, p, a
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 131:3: -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? )
            {
                // IbmSparql.g:131:7: ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(QUERY, "QUERY"), root_1);

                adaptor.addChild(root_1, stream_p.nextTree());
                // IbmSparql.g:131:19: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextTree());

                }
                stream_s.reset();
                // IbmSparql.g:131:23: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();
                // IbmSparql.g:131:27: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();
                // IbmSparql.g:131:31: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();
                // IbmSparql.g:131:35: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "query"

    public static class updateUnit_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateUnit"
    // IbmSparql.g:134:1: updateUnit : update -> ^( UPDATE update ) ;
    public final IbmSparqlParser.updateUnit_return updateUnit() throws RecognitionException {
        IbmSparqlParser.updateUnit_return retval = new IbmSparqlParser.updateUnit_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.update_return update2 = null;


        RewriteRuleSubtreeStream stream_update=new RewriteRuleSubtreeStream(adaptor,"rule update");
        try {
            // IbmSparql.g:135:2: ( update -> ^( UPDATE update ) )
            // IbmSparql.g:135:6: update
            {
            pushFollow(FOLLOW_update_in_updateUnit504);
            update2=update();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_update.add(update2.getTree());


            // AST REWRITE
            // elements: update
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 137:3: -> ^( UPDATE update )
            {
                // IbmSparql.g:137:7: ^( UPDATE update )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(UPDATE, "UPDATE"), root_1);

                adaptor.addChild(root_1, stream_update.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateUnit"

    public static class prologue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologue"
    // IbmSparql.g:140:1: prologue : (b+= baseDecl | p+= prefixDecl )* -> ^( PROLOGUE ( $b)* ( $p)* ) ;
    public final IbmSparqlParser.prologue_return prologue() throws RecognitionException {
        IbmSparqlParser.prologue_return retval = new IbmSparqlParser.prologue_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        List list_b=null;
        List list_p=null;
        RuleReturnScope b = null;
        RuleReturnScope p = null;
        RewriteRuleSubtreeStream stream_prefixDecl=new RewriteRuleSubtreeStream(adaptor,"rule prefixDecl");
        RewriteRuleSubtreeStream stream_baseDecl=new RewriteRuleSubtreeStream(adaptor,"rule baseDecl");
        try {
            // IbmSparql.g:141:2: ( (b+= baseDecl | p+= prefixDecl )* -> ^( PROLOGUE ( $b)* ( $p)* ) )
            // IbmSparql.g:141:6: (b+= baseDecl | p+= prefixDecl )*
            {
            // IbmSparql.g:141:6: (b+= baseDecl | p+= prefixDecl )*
            loop3:
            do {
                int alt3=3;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==BASE) ) {
                    alt3=1;
                }
                else if ( (LA3_0==PREFIX) ) {
                    alt3=2;
                }


                switch (alt3) {
            	case 1 :
            	    // IbmSparql.g:141:8: b+= baseDecl
            	    {
            	    pushFollow(FOLLOW_baseDecl_in_prologue542);
            	    b=baseDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_baseDecl.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;
            	case 2 :
            	    // IbmSparql.g:141:22: p+= prefixDecl
            	    {
            	    pushFollow(FOLLOW_prefixDecl_in_prologue548);
            	    p=prefixDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prefixDecl.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);



            // AST REWRITE
            // elements: b, p
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b, p
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
            root_0 = (XTree)adaptor.nil();
            // 143:3: -> ^( PROLOGUE ( $b)* ( $p)* )
            {
                // IbmSparql.g:143:7: ^( PROLOGUE ( $b)* ( $p)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PROLOGUE, "PROLOGUE"), root_1);

                // IbmSparql.g:143:19: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();
                // IbmSparql.g:143:24: ( $p)*
                while ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologue"

    public static class baseDecl_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "baseDecl"
    // IbmSparql.g:146:1: baseDecl : BASE i= iRIref -> ^( BASE $i) ;
    public final IbmSparqlParser.baseDecl_return baseDecl() throws RecognitionException {
        IbmSparqlParser.baseDecl_return retval = new IbmSparqlParser.baseDecl_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token BASE3=null;
        IbmSparqlParser.iRIref_return i = null;


        XTree BASE3_tree=null;
        RewriteRuleTokenStream stream_BASE=new RewriteRuleTokenStream(adaptor,"token BASE");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // IbmSparql.g:147:2: ( BASE i= iRIref -> ^( BASE $i) )
            // IbmSparql.g:147:6: BASE i= iRIref
            {
            BASE3=(Token)match(input,BASE,FOLLOW_BASE_in_baseDecl590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BASE.add(BASE3);

            pushFollow(FOLLOW_iRIref_in_baseDecl594);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());


            // AST REWRITE
            // elements: i, BASE
            // token labels: 
            // rule labels: retval, i
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 149:3: -> ^( BASE $i)
            {
                // IbmSparql.g:149:7: ^( BASE $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_BASE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_i.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "baseDecl"

    public static class prefixDecl_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefixDecl"
    // IbmSparql.g:152:1: prefixDecl : PREFIX p= PNAME_NS i= iRIref -> ^( PREFIX ^( PREFIXED_NS $p) $i) ;
    public final IbmSparqlParser.prefixDecl_return prefixDecl() throws RecognitionException {
        IbmSparqlParser.prefixDecl_return retval = new IbmSparqlParser.prefixDecl_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token p=null;
        Token PREFIX4=null;
        IbmSparqlParser.iRIref_return i = null;


        XTree p_tree=null;
        XTree PREFIX4_tree=null;
        RewriteRuleTokenStream stream_PREFIX=new RewriteRuleTokenStream(adaptor,"token PREFIX");
        RewriteRuleTokenStream stream_PNAME_NS=new RewriteRuleTokenStream(adaptor,"token PNAME_NS");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // IbmSparql.g:153:2: ( PREFIX p= PNAME_NS i= iRIref -> ^( PREFIX ^( PREFIXED_NS $p) $i) )
            // IbmSparql.g:153:6: PREFIX p= PNAME_NS i= iRIref
            {
            PREFIX4=(Token)match(input,PREFIX,FOLLOW_PREFIX_in_prefixDecl627); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PREFIX.add(PREFIX4);

            p=(Token)match(input,PNAME_NS,FOLLOW_PNAME_NS_in_prefixDecl631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PNAME_NS.add(p);

            pushFollow(FOLLOW_iRIref_in_prefixDecl635);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());


            // AST REWRITE
            // elements: p, PREFIX, i
            // token labels: p
            // rule labels: retval, i
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 155:3: -> ^( PREFIX ^( PREFIXED_NS $p) $i)
            {
                // IbmSparql.g:155:7: ^( PREFIX ^( PREFIXED_NS $p) $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_PREFIX.nextNode(), root_1);

                // IbmSparql.g:155:17: ^( PREFIXED_NS $p)
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREFIXED_NS, "PREFIXED_NS"), root_2);

                adaptor.addChild(root_2, stream_p.nextNode());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_i.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefixDecl"

    public static class selectQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectQuery"
    // IbmSparql.g:158:1: selectQuery : s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier -> ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? ) ;
    public final IbmSparqlParser.selectQuery_return selectQuery() throws RecognitionException {
        IbmSparqlParser.selectQuery_return retval = new IbmSparqlParser.selectQuery_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        List list_d=null;
        IbmSparqlParser.selectClause_return s = null;

        IbmSparqlParser.whereClause_return w = null;

        IbmSparqlParser.solutionModifier_return m = null;

        RuleReturnScope d = null;
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        try {
            // IbmSparql.g:159:2: (s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier -> ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? ) )
            // IbmSparql.g:159:6: s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier
            {
            pushFollow(FOLLOW_selectClause_in_selectQuery676);
            s=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());
            // IbmSparql.g:159:22: (d+= datasetClause )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==FROM) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // IbmSparql.g:159:22: d+= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_selectQuery680);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());
            	    if (list_d==null) list_d=new ArrayList();
            	    list_d.add(d.getTree());


            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);

            pushFollow(FOLLOW_whereClause_in_selectQuery685);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());
            pushFollow(FOLLOW_solutionModifier_in_selectQuery689);
            m=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(m.getTree());


            // AST REWRITE
            // elements: s, w, d, m
            // token labels: 
            // rule labels: w, retval, s, m
            // token list labels: 
            // rule list labels: d
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_m=new RewriteRuleSubtreeStream(adaptor,"rule m",m!=null?m.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"token d",list_d);
            root_0 = (XTree)adaptor.nil();
            // 160:3: -> ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? )
            {
                // IbmSparql.g:160:7: ^( SELECT $s ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SELECT, "SELECT"), root_1);

                adaptor.addChild(root_1, stream_s.nextTree());
                // IbmSparql.g:160:20: ( ^( DATASET ( $d)* ) )?
                if ( stream_d.hasNext() ) {
                    // IbmSparql.g:160:20: ^( DATASET ( $d)* )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(DATASET, "DATASET"), root_2);

                    // IbmSparql.g:160:30: ( $d)*
                    while ( stream_d.hasNext() ) {
                        adaptor.addChild(root_2, stream_d.nextTree());

                    }
                    stream_d.reset();

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_d.reset();
                // IbmSparql.g:160:36: ( $w)?
                if ( stream_w.hasNext() ) {
                    adaptor.addChild(root_1, stream_w.nextTree());

                }
                stream_w.reset();
                // IbmSparql.g:160:40: ( $m)?
                if ( stream_m.hasNext() ) {
                    adaptor.addChild(root_1, stream_m.nextTree());

                }
                stream_m.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectQuery"

    public static class subSelect_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelect"
    // IbmSparql.g:163:1: subSelect : s= selectClause w= whereClause m= solutionModifier (d= inlineData )? -> ^( SUB_SELECT $s $w $m ( $d)? ) ;
    public final IbmSparqlParser.subSelect_return subSelect() throws RecognitionException {
        IbmSparqlParser.subSelect_return retval = new IbmSparqlParser.subSelect_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.selectClause_return s = null;

        IbmSparqlParser.whereClause_return w = null;

        IbmSparqlParser.solutionModifier_return m = null;

        IbmSparqlParser.inlineData_return d = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_inlineData=new RewriteRuleSubtreeStream(adaptor,"rule inlineData");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        try {
            // IbmSparql.g:164:2: (s= selectClause w= whereClause m= solutionModifier (d= inlineData )? -> ^( SUB_SELECT $s $w $m ( $d)? ) )
            // IbmSparql.g:164:6: s= selectClause w= whereClause m= solutionModifier (d= inlineData )?
            {
            pushFollow(FOLLOW_selectClause_in_subSelect739);
            s=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());
            pushFollow(FOLLOW_whereClause_in_subSelect743);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());
            pushFollow(FOLLOW_solutionModifier_in_subSelect747);
            m=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(m.getTree());
            // IbmSparql.g:164:54: (d= inlineData )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==VALUES) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // IbmSparql.g:164:55: d= inlineData
                    {
                    pushFollow(FOLLOW_inlineData_in_subSelect752);
                    d=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inlineData.add(d.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: m, d, s, w
            // token labels: 
            // rule labels: w, retval, d, s, m
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_m=new RewriteRuleSubtreeStream(adaptor,"rule m",m!=null?m.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 165:3: -> ^( SUB_SELECT $s $w $m ( $d)? )
            {
                // IbmSparql.g:165:7: ^( SUB_SELECT $s $w $m ( $d)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SUB_SELECT, "SUB_SELECT"), root_1);

                adaptor.addChild(root_1, stream_s.nextTree());
                adaptor.addChild(root_1, stream_w.nextTree());
                adaptor.addChild(root_1, stream_m.nextTree());
                // IbmSparql.g:165:30: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelect"

    public static class selectClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // IbmSparql.g:168:1: selectClause : SELECT (t1= DISTINCT | t2= REDUCED )? ( (v1+= var | e+= expAsVar | f+= fexp )+ | '*' ) -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? ) ;
    public final IbmSparqlParser.selectClause_return selectClause() throws RecognitionException {
        IbmSparqlParser.selectClause_return retval = new IbmSparqlParser.selectClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token t1=null;
        Token t2=null;
        Token SELECT5=null;
        Token char_literal6=null;
        List list_v1=null;
        List list_e=null;
        List list_f=null;
        RuleReturnScope v1 = null;
        RuleReturnScope e = null;
        RuleReturnScope f = null;
        XTree t1_tree=null;
        XTree t2_tree=null;
        XTree SELECT5_tree=null;
        XTree char_literal6_tree=null;
        RewriteRuleTokenStream stream_251=new RewriteRuleTokenStream(adaptor,"token 251");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_REDUCED=new RewriteRuleTokenStream(adaptor,"token REDUCED");
        RewriteRuleSubtreeStream stream_fexp=new RewriteRuleSubtreeStream(adaptor,"rule fexp");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_expAsVar=new RewriteRuleSubtreeStream(adaptor,"rule expAsVar");
        try {
            // IbmSparql.g:169:2: ( SELECT (t1= DISTINCT | t2= REDUCED )? ( (v1+= var | e+= expAsVar | f+= fexp )+ | '*' ) -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? ) )
            // IbmSparql.g:169:6: SELECT (t1= DISTINCT | t2= REDUCED )? ( (v1+= var | e+= expAsVar | f+= fexp )+ | '*' )
            {
            SELECT5=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectClause795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT5);

            // IbmSparql.g:169:13: (t1= DISTINCT | t2= REDUCED )?
            int alt6=3;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==DISTINCT) ) {
                alt6=1;
            }
            else if ( (LA6_0==REDUCED) ) {
                alt6=2;
            }
            switch (alt6) {
                case 1 :
                    // IbmSparql.g:169:15: t1= DISTINCT
                    {
                    t1=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(t1);


                    }
                    break;
                case 2 :
                    // IbmSparql.g:169:29: t2= REDUCED
                    {
                    t2=(Token)match(input,REDUCED,FOLLOW_REDUCED_in_selectClause807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_REDUCED.add(t2);


                    }
                    break;

            }

            // IbmSparql.g:169:43: ( (v1+= var | e+= expAsVar | f+= fexp )+ | '*' )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==OPEN_BRACE||(LA8_0>=VAR1 && LA8_0<=VAR2)||(LA8_0>=NOT && LA8_0<=GROUP_CONCAT)) ) {
                alt8=1;
            }
            else if ( (LA8_0==251) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // IbmSparql.g:169:45: (v1+= var | e+= expAsVar | f+= fexp )+
                    {
                    // IbmSparql.g:169:45: (v1+= var | e+= expAsVar | f+= fexp )+
                    int cnt7=0;
                    loop7:
                    do {
                        int alt7=4;
                        switch ( input.LA(1) ) {
                        case VAR1:
                        case VAR2:
                            {
                            alt7=1;
                            }
                            break;
                        case OPEN_BRACE:
                            {
                            alt7=2;
                            }
                            break;
                        case NOT:
                        case STR:
                        case LANG:
                        case LANGMATCHES:
                        case DATATYPE:
                        case BOUND:
                        case IRI:
                        case URI:
                        case BNODE:
                        case RAND:
                        case ABS:
                        case CEIL:
                        case FLOOR:
                        case ROUND:
                        case CONCAT:
                        case STRLEN:
                        case UCASE:
                        case LCASE:
                        case ENCODE_FOR_URI:
                        case CONTAINS:
                        case STRSTARTS:
                        case STRENDS:
                        case STRBEFORE:
                        case STRAFTER:
                        case YEAR:
                        case MONTH:
                        case DAY:
                        case HOURS:
                        case MINUTES:
                        case SECONDS:
                        case TIMEZONE:
                        case TZ:
                        case NOW:
                        case UUID:
                        case STRUUID:
                        case MD5:
                        case SHA1:
                        case SHA224:
                        case SHA256:
                        case SHA384:
                        case SHA512:
                        case COALESCE:
                        case IF:
                        case STRLANG:
                        case STRDT:
                        case SAMETERM:
                        case ISIRI:
                        case ISURI:
                        case ISBLANK:
                        case ISLITERAL:
                        case ISNUMERIC:
                        case REGEX:
                        case SUBSTR:
                        case REPLACE:
                        case EXISTS:
                        case COUNT:
                        case SUM:
                        case MIN:
                        case MAX:
                        case AVG:
                        case SAMPLE:
                        case GROUP_CONCAT:
                            {
                            alt7=3;
                            }
                            break;

                        }

                        switch (alt7) {
                    	case 1 :
                    	    // IbmSparql.g:169:47: v1+= var
                    	    {
                    	    pushFollow(FOLLOW_var_in_selectClause818);
                    	    v1=var();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_var.add(v1.getTree());
                    	    if (list_v1==null) list_v1=new ArrayList();
                    	    list_v1.add(v1.getTree());


                    	    }
                    	    break;
                    	case 2 :
                    	    // IbmSparql.g:169:57: e+= expAsVar
                    	    {
                    	    pushFollow(FOLLOW_expAsVar_in_selectClause824);
                    	    e=expAsVar();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expAsVar.add(e.getTree());
                    	    if (list_e==null) list_e=new ArrayList();
                    	    list_e.add(e.getTree());


                    	    }
                    	    break;
                    	case 3 :
                    	    // IbmSparql.g:169:71: f+= fexp
                    	    {
                    	    pushFollow(FOLLOW_fexp_in_selectClause830);
                    	    f=fexp();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_fexp.add(f.getTree());
                    	    if (list_f==null) list_f=new ArrayList();
                    	    list_f.add(f.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt7 >= 1 ) break loop7;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(7, input);
                                throw eee;
                        }
                        cnt7++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // IbmSparql.g:169:84: '*'
                    {
                    char_literal6=(Token)match(input,251,FOLLOW_251_in_selectClause837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_251.add(char_literal6);


                    }
                    break;

            }



            // AST REWRITE
            // elements: t2, 251, v1, f, e, t1
            // token labels: t2, t1
            // rule labels: retval
            // token list labels: 
            // rule list labels: f, v1, e
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t2=new RewriteRuleTokenStream(adaptor,"token t2",t2);
            RewriteRuleTokenStream stream_t1=new RewriteRuleTokenStream(adaptor,"token t1",t1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"token f",list_f);
            RewriteRuleSubtreeStream stream_v1=new RewriteRuleSubtreeStream(adaptor,"token v1",list_v1);
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
            root_0 = (XTree)adaptor.nil();
            // 171:3: -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? )
            {
                // IbmSparql.g:171:8: ( ^( TYPE ( $t1)? ( $t2)? ) )?
                if ( stream_t2.hasNext()||stream_t1.hasNext() ) {
                    // IbmSparql.g:171:8: ^( TYPE ( $t1)? ( $t2)? )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TYPE, "TYPE"), root_1);

                    // IbmSparql.g:171:15: ( $t1)?
                    if ( stream_t1.hasNext() ) {
                        adaptor.addChild(root_1, stream_t1.nextNode());

                    }
                    stream_t1.reset();
                    // IbmSparql.g:171:20: ( $t2)?
                    if ( stream_t2.hasNext() ) {
                        adaptor.addChild(root_1, stream_t2.nextNode());

                    }
                    stream_t2.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_t2.reset();
                stream_t1.reset();
                // IbmSparql.g:171:27: ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PVARS, "PVARS"), root_1);

                // IbmSparql.g:171:35: ( $v1)*
                while ( stream_v1.hasNext() ) {
                    adaptor.addChild(root_1, stream_v1.nextTree());

                }
                stream_v1.reset();
                // IbmSparql.g:171:40: ( $e)*
                while ( stream_e.hasNext() ) {
                    adaptor.addChild(root_1, stream_e.nextTree());

                }
                stream_e.reset();
                // IbmSparql.g:171:44: ( $f)*
                while ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextTree());

                }
                stream_f.reset();
                // IbmSparql.g:171:48: ( '*' )?
                if ( stream_251.hasNext() ) {
                    adaptor.addChild(root_1, stream_251.nextNode());

                }
                stream_251.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class expAsVar_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expAsVar"
    // IbmSparql.g:174:1: expAsVar : OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( AS $v $e) ;
    public final IbmSparqlParser.expAsVar_return expAsVar() throws RecognitionException {
        IbmSparqlParser.expAsVar_return retval = new IbmSparqlParser.expAsVar_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE7=null;
        Token AS8=null;
        Token CLOSE_BRACE9=null;
        IbmSparqlParser.expression_return e = null;

        IbmSparqlParser.var_return v = null;


        XTree OPEN_BRACE7_tree=null;
        XTree AS8_tree=null;
        XTree CLOSE_BRACE9_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // IbmSparql.g:175:2: ( OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( AS $v $e) )
            // IbmSparql.g:175:4: OPEN_BRACE e= expression AS v= var CLOSE_BRACE
            {
            OPEN_BRACE7=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_expAsVar891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE7);

            pushFollow(FOLLOW_expression_in_expAsVar895);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());
            AS8=(Token)match(input,AS,FOLLOW_AS_in_expAsVar897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS8);

            pushFollow(FOLLOW_var_in_expAsVar901);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());
            CLOSE_BRACE9=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_expAsVar903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE9);



            // AST REWRITE
            // elements: v, AS, e
            // token labels: 
            // rule labels: v, retval, e
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 177:3: -> ^( AS $v $e)
            {
                // IbmSparql.g:177:6: ^( AS $v $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_AS.nextNode(), root_1);

                adaptor.addChild(root_1, stream_v.nextTree());
                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "expAsVar"

    public static class fexp_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fexp"
    // IbmSparql.g:180:1: fexp : (a= aggregate | b= builtInCall ) -> ^( EXP ( $a)? ( $b)? ) ;
    public final IbmSparqlParser.fexp_return fexp() throws RecognitionException {
        IbmSparqlParser.fexp_return retval = new IbmSparqlParser.fexp_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.aggregate_return a = null;

        IbmSparqlParser.builtInCall_return b = null;


        RewriteRuleSubtreeStream stream_aggregate=new RewriteRuleSubtreeStream(adaptor,"rule aggregate");
        RewriteRuleSubtreeStream stream_builtInCall=new RewriteRuleSubtreeStream(adaptor,"rule builtInCall");
        try {
            // IbmSparql.g:180:6: ( (a= aggregate | b= builtInCall ) -> ^( EXP ( $a)? ( $b)? ) )
            // IbmSparql.g:180:8: (a= aggregate | b= builtInCall )
            {
            // IbmSparql.g:180:8: (a= aggregate | b= builtInCall )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=COUNT && LA9_0<=GROUP_CONCAT)) ) {
                alt9=1;
            }
            else if ( ((LA9_0>=NOT && LA9_0<=EXISTS)) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // IbmSparql.g:180:10: a= aggregate
                    {
                    pushFollow(FOLLOW_aggregate_in_fexp937);
                    a=aggregate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aggregate.add(a.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:180:24: b= builtInCall
                    {
                    pushFollow(FOLLOW_builtInCall_in_fexp943);
                    b=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtInCall.add(b.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: b, a
            // token labels: 
            // rule labels: retval, b, a
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 182:3: -> ^( EXP ( $a)? ( $b)? )
            {
                // IbmSparql.g:182:7: ^( EXP ( $a)? ( $b)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(EXP, "EXP"), root_1);

                // IbmSparql.g:182:14: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();
                // IbmSparql.g:182:18: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "fexp"

    public static class constructQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructQuery"
    // IbmSparql.g:186:1: constructQuery : CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) ) ;
    public final IbmSparqlParser.constructQuery_return constructQuery() throws RecognitionException {
        IbmSparqlParser.constructQuery_return retval = new IbmSparqlParser.constructQuery_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token CONSTRUCT10=null;
        Token WHERE_TOKEN11=null;
        Token OPEN_CURLY_BRACE12=null;
        Token CLOSE_CURLY_BRACE13=null;
        List list_d1=null;
        List list_d2=null;
        IbmSparqlParser.constructTemplate_return c = null;

        IbmSparqlParser.whereClause_return w1 = null;

        IbmSparqlParser.solutionModifier_return s1 = null;

        IbmSparqlParser.triplesTemplate_return t = null;

        IbmSparqlParser.solutionModifier_return s2 = null;

        RuleReturnScope d1 = null;
        RuleReturnScope d2 = null;
        XTree CONSTRUCT10_tree=null;
        XTree WHERE_TOKEN11_tree=null;
        XTree OPEN_CURLY_BRACE12_tree=null;
        XTree CLOSE_CURLY_BRACE13_tree=null;
        RewriteRuleTokenStream stream_CONSTRUCT=new RewriteRuleTokenStream(adaptor,"token CONSTRUCT");
        RewriteRuleTokenStream stream_WHERE_TOKEN=new RewriteRuleTokenStream(adaptor,"token WHERE_TOKEN");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_triplesTemplate=new RewriteRuleSubtreeStream(adaptor,"rule triplesTemplate");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_constructTemplate=new RewriteRuleSubtreeStream(adaptor,"rule constructTemplate");
        try {
            // IbmSparql.g:187:2: ( CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) ) )
            // IbmSparql.g:187:6: CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) )
            {
            CONSTRUCT10=(Token)match(input,CONSTRUCT,FOLLOW_CONSTRUCT_in_constructQuery985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONSTRUCT.add(CONSTRUCT10);

            // IbmSparql.g:188:6: ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==OPEN_CURLY_BRACE) ) {
                alt13=1;
            }
            else if ( (LA13_0==WHERE_TOKEN||LA13_0==FROM) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // IbmSparql.g:189:8: (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier )
                    {
                    // IbmSparql.g:189:8: (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier )
                    // IbmSparql.g:189:9: c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier
                    {
                    pushFollow(FOLLOW_constructTemplate_in_constructQuery1005);
                    c=constructTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructTemplate.add(c.getTree());
                    // IbmSparql.g:189:31: (d1+= datasetClause )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==FROM) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // IbmSparql.g:189:31: d1+= datasetClause
                    	    {
                    	    pushFollow(FOLLOW_datasetClause_in_constructQuery1009);
                    	    d1=datasetClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_datasetClause.add(d1.getTree());
                    	    if (list_d1==null) list_d1=new ArrayList();
                    	    list_d1.add(d1.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);

                    pushFollow(FOLLOW_whereClause_in_constructQuery1014);
                    w1=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(w1.getTree());
                    pushFollow(FOLLOW_solutionModifier_in_constructQuery1018);
                    s1=solutionModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_solutionModifier.add(s1.getTree());

                    }



                    // AST REWRITE
                    // elements: w1, d1, s1, CONSTRUCT, c
                    // token labels: 
                    // rule labels: retval, s1, c, w1
                    // token list labels: 
                    // rule list labels: d1
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
                    RewriteRuleSubtreeStream stream_w1=new RewriteRuleSubtreeStream(adaptor,"rule w1",w1!=null?w1.tree:null);
                    RewriteRuleSubtreeStream stream_d1=new RewriteRuleSubtreeStream(adaptor,"token d1",list_d1);
                    root_0 = (XTree)adaptor.nil();
                    // 190:5: -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1)
                    {
                        // IbmSparql.g:190:8: ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_CONSTRUCT.nextNode(), root_1);

                        // IbmSparql.g:190:21: ( $c)?
                        if ( stream_c.hasNext() ) {
                            adaptor.addChild(root_1, stream_c.nextTree());

                        }
                        stream_c.reset();
                        // IbmSparql.g:190:25: ( ^( DATASET ( $d1)* ) )?
                        if ( stream_d1.hasNext() ) {
                            // IbmSparql.g:190:25: ^( DATASET ( $d1)* )
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(DATASET, "DATASET"), root_2);

                            // IbmSparql.g:190:35: ( $d1)*
                            while ( stream_d1.hasNext() ) {
                                adaptor.addChild(root_2, stream_d1.nextTree());

                            }
                            stream_d1.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_d1.reset();
                        adaptor.addChild(root_1, stream_w1.nextTree());
                        adaptor.addChild(root_1, stream_s1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:191:8: ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier )
                    {
                    // IbmSparql.g:191:8: ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier )
                    // IbmSparql.g:191:9: (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier
                    {
                    // IbmSparql.g:191:11: (d2+= datasetClause )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==FROM) ) {
                            alt11=1;
                        }


                        switch (alt11) {
                    	case 1 :
                    	    // IbmSparql.g:191:11: d2+= datasetClause
                    	    {
                    	    pushFollow(FOLLOW_datasetClause_in_constructQuery1063);
                    	    d2=datasetClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_datasetClause.add(d2.getTree());
                    	    if (list_d2==null) list_d2=new ArrayList();
                    	    list_d2.add(d2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);

                    WHERE_TOKEN11=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_constructQuery1066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE_TOKEN.add(WHERE_TOKEN11);

                    OPEN_CURLY_BRACE12=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_constructQuery1068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE12);

                    // IbmSparql.g:191:58: (t= triplesTemplate )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0==IRI_REF||LA12_0==PNAME_NS||LA12_0==OPEN_BRACE||LA12_0==INTEGER||LA12_0==OPEN_SQ_BRACKET||(LA12_0>=VAR1 && LA12_0<=VAR2)||(LA12_0>=DECIMAL && LA12_0<=BLANK_NODE_LABEL)) ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // IbmSparql.g:191:58: t= triplesTemplate
                            {
                            pushFollow(FOLLOW_triplesTemplate_in_constructQuery1072);
                            t=triplesTemplate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_triplesTemplate.add(t.getTree());

                            }
                            break;

                    }

                    CLOSE_CURLY_BRACE13=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_constructQuery1075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE13);

                    pushFollow(FOLLOW_solutionModifier_in_constructQuery1079);
                    s2=solutionModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_solutionModifier.add(s2.getTree());

                    }



                    // AST REWRITE
                    // elements: d2, s2, t, CONSTRUCT
                    // token labels: 
                    // rule labels: retval, s2, t
                    // token list labels: 
                    // rule list labels: d2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.tree:null);
                    RewriteRuleSubtreeStream stream_d2=new RewriteRuleSubtreeStream(adaptor,"token d2",list_d2);
                    root_0 = (XTree)adaptor.nil();
                    // 192:5: -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2)
                    {
                        // IbmSparql.g:192:8: ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_CONSTRUCT.nextNode(), root_1);

                        // IbmSparql.g:192:21: ( ^( DATASET ( $d2)* ) )?
                        if ( stream_d2.hasNext() ) {
                            // IbmSparql.g:192:21: ^( DATASET ( $d2)* )
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(DATASET, "DATASET"), root_2);

                            // IbmSparql.g:192:31: ( $d2)*
                            while ( stream_d2.hasNext() ) {
                                adaptor.addChild(root_2, stream_d2.nextTree());

                            }
                            stream_d2.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_d2.reset();
                        // IbmSparql.g:192:38: ( ^( WHERE $t) )?
                        if ( stream_t.hasNext() ) {
                            // IbmSparql.g:192:39: ^( WHERE $t)
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(WHERE, "WHERE"), root_2);

                            adaptor.addChild(root_2, stream_t.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_t.reset();
                        adaptor.addChild(root_1, stream_s2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructQuery"

    public static class describeQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "describeQuery"
    // IbmSparql.g:196:1: describeQuery : DESCRIBE ( (v+= varOrIRIref )+ | r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s) ;
    public final IbmSparqlParser.describeQuery_return describeQuery() throws RecognitionException {
        IbmSparqlParser.describeQuery_return retval = new IbmSparqlParser.describeQuery_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token r=null;
        Token DESCRIBE14=null;
        List list_v=null;
        IbmSparqlParser.datasetClause_return d = null;

        IbmSparqlParser.whereClause_return w = null;

        IbmSparqlParser.solutionModifier_return s = null;

        RuleReturnScope v = null;
        XTree r_tree=null;
        XTree DESCRIBE14_tree=null;
        RewriteRuleTokenStream stream_251=new RewriteRuleTokenStream(adaptor,"token 251");
        RewriteRuleTokenStream stream_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token DESCRIBE");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        try {
            // IbmSparql.g:197:2: ( DESCRIBE ( (v+= varOrIRIref )+ | r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s) )
            // IbmSparql.g:197:6: DESCRIBE ( (v+= varOrIRIref )+ | r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier
            {
            DESCRIBE14=(Token)match(input,DESCRIBE,FOLLOW_DESCRIBE_in_describeQuery1141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DESCRIBE.add(DESCRIBE14);

            // IbmSparql.g:197:15: ( (v+= varOrIRIref )+ | r= '*' )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==IRI_REF||LA15_0==PNAME_NS||(LA15_0>=VAR1 && LA15_0<=VAR2)||LA15_0==PNAME_LN) ) {
                alt15=1;
            }
            else if ( (LA15_0==251) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // IbmSparql.g:197:17: (v+= varOrIRIref )+
                    {
                    // IbmSparql.g:197:18: (v+= varOrIRIref )+
                    int cnt14=0;
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==IRI_REF||LA14_0==PNAME_NS||(LA14_0>=VAR1 && LA14_0<=VAR2)||LA14_0==PNAME_LN) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // IbmSparql.g:197:18: v+= varOrIRIref
                    	    {
                    	    pushFollow(FOLLOW_varOrIRIref_in_describeQuery1147);
                    	    v=varOrIRIref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());
                    	    if (list_v==null) list_v=new ArrayList();
                    	    list_v.add(v.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt14 >= 1 ) break loop14;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(14, input);
                                throw eee;
                        }
                        cnt14++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // IbmSparql.g:197:35: r= '*'
                    {
                    r=(Token)match(input,251,FOLLOW_251_in_describeQuery1154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_251.add(r);


                    }
                    break;

            }

            // IbmSparql.g:197:44: (d= datasetClause )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==FROM) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // IbmSparql.g:197:44: d= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_describeQuery1160);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // IbmSparql.g:197:61: (w= whereClause )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( ((LA17_0>=WHERE_TOKEN && LA17_0<=OPEN_CURLY_BRACE)) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // IbmSparql.g:197:61: w= whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_describeQuery1165);
                    w=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_solutionModifier_in_describeQuery1170);
            s=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(s.getTree());


            // AST REWRITE
            // elements: w, v, s, DESCRIBE, d, r
            // token labels: r
            // rule labels: w, retval, d, s
            // token list labels: 
            // rule list labels: v
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (XTree)adaptor.nil();
            // 199:3: -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s)
            {
                // IbmSparql.g:199:7: ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_DESCRIBE.nextNode(), root_1);

                // IbmSparql.g:199:20: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();
                // IbmSparql.g:199:25: ( $r)?
                if ( stream_r.hasNext() ) {
                    adaptor.addChild(root_1, stream_r.nextNode());

                }
                stream_r.reset();
                // IbmSparql.g:199:30: ( $d)*
                while ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();
                // IbmSparql.g:199:35: ( $w)?
                if ( stream_w.hasNext() ) {
                    adaptor.addChild(root_1, stream_w.nextTree());

                }
                stream_w.reset();
                adaptor.addChild(root_1, stream_s.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "describeQuery"

    public static class askQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "askQuery"
    // IbmSparql.g:202:1: askQuery : ASK (d= datasetClause )* w= whereClause -> ^( ASK ( $d)* $w) ;
    public final IbmSparqlParser.askQuery_return askQuery() throws RecognitionException {
        IbmSparqlParser.askQuery_return retval = new IbmSparqlParser.askQuery_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token ASK15=null;
        IbmSparqlParser.datasetClause_return d = null;

        IbmSparqlParser.whereClause_return w = null;


        XTree ASK15_tree=null;
        RewriteRuleTokenStream stream_ASK=new RewriteRuleTokenStream(adaptor,"token ASK");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        try {
            // IbmSparql.g:203:2: ( ASK (d= datasetClause )* w= whereClause -> ^( ASK ( $d)* $w) )
            // IbmSparql.g:203:6: ASK (d= datasetClause )* w= whereClause
            {
            ASK15=(Token)match(input,ASK,FOLLOW_ASK_in_askQuery1224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASK.add(ASK15);

            // IbmSparql.g:203:11: (d= datasetClause )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==FROM) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // IbmSparql.g:203:11: d= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_askQuery1228);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);

            pushFollow(FOLLOW_whereClause_in_askQuery1233);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());


            // AST REWRITE
            // elements: d, w, ASK
            // token labels: 
            // rule labels: w, retval, d
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 205:3: -> ^( ASK ( $d)* $w)
            {
                // IbmSparql.g:205:7: ^( ASK ( $d)* $w)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_ASK.nextNode(), root_1);

                // IbmSparql.g:205:14: ( $d)*
                while ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_w.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "askQuery"

    public static class datasetClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "datasetClause"
    // IbmSparql.g:208:1: datasetClause : FROM (d= defaultGraphClause | n= namedGraphClause ) -> ^( FROM ( $d)? ( ^( NAMED $n) )? ) ;
    public final IbmSparqlParser.datasetClause_return datasetClause() throws RecognitionException {
        IbmSparqlParser.datasetClause_return retval = new IbmSparqlParser.datasetClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token FROM16=null;
        IbmSparqlParser.defaultGraphClause_return d = null;

        IbmSparqlParser.namedGraphClause_return n = null;


        XTree FROM16_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_defaultGraphClause=new RewriteRuleSubtreeStream(adaptor,"rule defaultGraphClause");
        RewriteRuleSubtreeStream stream_namedGraphClause=new RewriteRuleSubtreeStream(adaptor,"rule namedGraphClause");
        try {
            // IbmSparql.g:209:2: ( FROM (d= defaultGraphClause | n= namedGraphClause ) -> ^( FROM ( $d)? ( ^( NAMED $n) )? ) )
            // IbmSparql.g:209:6: FROM (d= defaultGraphClause | n= namedGraphClause )
            {
            FROM16=(Token)match(input,FROM,FOLLOW_FROM_in_datasetClause1270); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM16);

            // IbmSparql.g:209:11: (d= defaultGraphClause | n= namedGraphClause )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==IRI_REF||LA19_0==PNAME_NS||LA19_0==PNAME_LN) ) {
                alt19=1;
            }
            else if ( (LA19_0==NAMED) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // IbmSparql.g:209:13: d= defaultGraphClause
                    {
                    pushFollow(FOLLOW_defaultGraphClause_in_datasetClause1276);
                    d=defaultGraphClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defaultGraphClause.add(d.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:209:36: n= namedGraphClause
                    {
                    pushFollow(FOLLOW_namedGraphClause_in_datasetClause1282);
                    n=namedGraphClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_namedGraphClause.add(n.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: FROM, d, n
            // token labels: 
            // rule labels: retval, d, n
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 211:3: -> ^( FROM ( $d)? ( ^( NAMED $n) )? )
            {
                // IbmSparql.g:211:7: ^( FROM ( $d)? ( ^( NAMED $n) )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_FROM.nextNode(), root_1);

                // IbmSparql.g:211:15: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();
                // IbmSparql.g:211:19: ( ^( NAMED $n) )?
                if ( stream_n.hasNext() ) {
                    // IbmSparql.g:211:19: ^( NAMED $n)
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(NAMED, "NAMED"), root_2);

                    adaptor.addChild(root_2, stream_n.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_n.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "datasetClause"

    public static class defaultGraphClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultGraphClause"
    // IbmSparql.g:214:1: defaultGraphClause : sourceSelector ;
    public final IbmSparqlParser.defaultGraphClause_return defaultGraphClause() throws RecognitionException {
        IbmSparqlParser.defaultGraphClause_return retval = new IbmSparqlParser.defaultGraphClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.sourceSelector_return sourceSelector17 = null;



        try {
            // IbmSparql.g:215:2: ( sourceSelector )
            // IbmSparql.g:215:6: sourceSelector
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_sourceSelector_in_defaultGraphClause1326);
            sourceSelector17=sourceSelector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sourceSelector17.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "defaultGraphClause"

    public static class namedGraphClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namedGraphClause"
    // IbmSparql.g:218:1: namedGraphClause : NAMED s= sourceSelector -> $s;
    public final IbmSparqlParser.namedGraphClause_return namedGraphClause() throws RecognitionException {
        IbmSparqlParser.namedGraphClause_return retval = new IbmSparqlParser.namedGraphClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token NAMED18=null;
        IbmSparqlParser.sourceSelector_return s = null;


        XTree NAMED18_tree=null;
        RewriteRuleTokenStream stream_NAMED=new RewriteRuleTokenStream(adaptor,"token NAMED");
        RewriteRuleSubtreeStream stream_sourceSelector=new RewriteRuleSubtreeStream(adaptor,"rule sourceSelector");
        try {
            // IbmSparql.g:219:2: ( NAMED s= sourceSelector -> $s)
            // IbmSparql.g:219:6: NAMED s= sourceSelector
            {
            NAMED18=(Token)match(input,NAMED,FOLLOW_NAMED_in_namedGraphClause1343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMED.add(NAMED18);

            pushFollow(FOLLOW_sourceSelector_in_namedGraphClause1347);
            s=sourceSelector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sourceSelector.add(s.getTree());


            // AST REWRITE
            // elements: s
            // token labels: 
            // rule labels: retval, s
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 219:30: -> $s
            {
                adaptor.addChild(root_0, stream_s.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "namedGraphClause"

    public static class sourceSelector_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sourceSelector"
    // IbmSparql.g:222:1: sourceSelector : iRIref ;
    public final IbmSparqlParser.sourceSelector_return sourceSelector() throws RecognitionException {
        IbmSparqlParser.sourceSelector_return retval = new IbmSparqlParser.sourceSelector_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.iRIref_return iRIref19 = null;



        try {
            // IbmSparql.g:223:2: ( iRIref )
            // IbmSparql.g:223:6: iRIref
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_iRIref_in_sourceSelector1370);
            iRIref19=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref19.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "sourceSelector"

    public static class whereClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // IbmSparql.g:226:1: whereClause : ( WHERE_TOKEN )? groupGraphPattern -> ^( WHERE groupGraphPattern ) ;
    public final IbmSparqlParser.whereClause_return whereClause() throws RecognitionException {
        IbmSparqlParser.whereClause_return retval = new IbmSparqlParser.whereClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token WHERE_TOKEN20=null;
        IbmSparqlParser.groupGraphPattern_return groupGraphPattern21 = null;


        XTree WHERE_TOKEN20_tree=null;
        RewriteRuleTokenStream stream_WHERE_TOKEN=new RewriteRuleTokenStream(adaptor,"token WHERE_TOKEN");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparql.g:227:2: ( ( WHERE_TOKEN )? groupGraphPattern -> ^( WHERE groupGraphPattern ) )
            // IbmSparql.g:227:6: ( WHERE_TOKEN )? groupGraphPattern
            {
            // IbmSparql.g:227:6: ( WHERE_TOKEN )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==WHERE_TOKEN) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // IbmSparql.g:227:6: WHERE_TOKEN
                    {
                    WHERE_TOKEN20=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_whereClause1387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE_TOKEN.add(WHERE_TOKEN20);


                    }
                    break;

            }

            pushFollow(FOLLOW_groupGraphPattern_in_whereClause1390);
            groupGraphPattern21=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(groupGraphPattern21.getTree());


            // AST REWRITE
            // elements: groupGraphPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 229:3: -> ^( WHERE groupGraphPattern )
            {
                // IbmSparql.g:229:7: ^( WHERE groupGraphPattern )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(WHERE, "WHERE"), root_1);

                adaptor.addChild(root_1, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class solutionModifier_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "solutionModifier"
    // IbmSparql.g:232:1: solutionModifier : (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )? -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? ) ;
    public final IbmSparqlParser.solutionModifier_return solutionModifier() throws RecognitionException {
        IbmSparqlParser.solutionModifier_return retval = new IbmSparqlParser.solutionModifier_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.groupClause_return g = null;

        IbmSparqlParser.havingClause_return h = null;

        IbmSparqlParser.orderClause_return o = null;

        IbmSparqlParser.limitOffsetClauses_return l = null;


        RewriteRuleSubtreeStream stream_limitOffsetClauses=new RewriteRuleSubtreeStream(adaptor,"rule limitOffsetClauses");
        RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
        RewriteRuleSubtreeStream stream_groupClause=new RewriteRuleSubtreeStream(adaptor,"rule groupClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        try {
            // IbmSparql.g:233:2: ( (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )? -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? ) )
            // IbmSparql.g:233:6: (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )?
            {
            // IbmSparql.g:233:7: (g= groupClause )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==GROUP) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // IbmSparql.g:233:7: g= groupClause
                    {
                    pushFollow(FOLLOW_groupClause_in_solutionModifier1424);
                    g=groupClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupClause.add(g.getTree());

                    }
                    break;

            }

            // IbmSparql.g:233:22: (h= havingClause )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==HAVING) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // IbmSparql.g:233:22: h= havingClause
                    {
                    pushFollow(FOLLOW_havingClause_in_solutionModifier1429);
                    h=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(h.getTree());

                    }
                    break;

            }

            // IbmSparql.g:233:38: (o= orderClause )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==ORDER) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // IbmSparql.g:233:38: o= orderClause
                    {
                    pushFollow(FOLLOW_orderClause_in_solutionModifier1434);
                    o=orderClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderClause.add(o.getTree());

                    }
                    break;

            }

            // IbmSparql.g:233:53: (l= limitOffsetClauses )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==LIMIT||LA24_0==OFFSET) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // IbmSparql.g:233:53: l= limitOffsetClauses
                    {
                    pushFollow(FOLLOW_limitOffsetClauses_in_solutionModifier1439);
                    l=limitOffsetClauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_limitOffsetClauses.add(l.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: h, g, l, o
            // token labels: 
            // rule labels: g, retval, o, l, h
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.tree:null);
            RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.tree:null);
            RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 234:3: -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? )
            {
                // IbmSparql.g:234:6: ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(MODIFIERS, "MODIFIERS"), root_1);

                // IbmSparql.g:234:18: ( $g)?
                if ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();
                // IbmSparql.g:234:22: ( $h)?
                if ( stream_h.hasNext() ) {
                    adaptor.addChild(root_1, stream_h.nextTree());

                }
                stream_h.reset();
                // IbmSparql.g:234:26: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextTree());

                }
                stream_o.reset();
                // IbmSparql.g:234:30: ( $l)?
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextTree());

                }
                stream_l.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "solutionModifier"

    public static class groupClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupClause"
    // IbmSparql.g:237:1: groupClause : GROUP BY (g+= groupCondition )+ -> ^( GROUP_BY ( $g)+ ) ;
    public final IbmSparqlParser.groupClause_return groupClause() throws RecognitionException {
        IbmSparqlParser.groupClause_return retval = new IbmSparqlParser.groupClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token GROUP22=null;
        Token BY23=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree GROUP22_tree=null;
        XTree BY23_tree=null;
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleSubtreeStream stream_groupCondition=new RewriteRuleSubtreeStream(adaptor,"rule groupCondition");
        try {
            // IbmSparql.g:238:2: ( GROUP BY (g+= groupCondition )+ -> ^( GROUP_BY ( $g)+ ) )
            // IbmSparql.g:238:6: GROUP BY (g+= groupCondition )+
            {
            GROUP22=(Token)match(input,GROUP,FOLLOW_GROUP_in_groupClause1481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP22);

            BY23=(Token)match(input,BY,FOLLOW_BY_in_groupClause1483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY23);

            // IbmSparql.g:238:16: (g+= groupCondition )+
            int cnt25=0;
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==IRI_REF||LA25_0==PNAME_NS||LA25_0==OPEN_BRACE||(LA25_0>=VAR1 && LA25_0<=VAR2)||(LA25_0>=NOT && LA25_0<=EXISTS)||LA25_0==PNAME_LN) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // IbmSparql.g:238:16: g+= groupCondition
            	    {
            	    pushFollow(FOLLOW_groupCondition_in_groupClause1487);
            	    g=groupCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_groupCondition.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt25 >= 1 ) break loop25;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(25, input);
                        throw eee;
                }
                cnt25++;
            } while (true);



            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 240:3: -> ^( GROUP_BY ( $g)+ )
            {
                // IbmSparql.g:240:7: ^( GROUP_BY ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(GROUP_BY, "GROUP_BY"), root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupClause"

    public static class groupCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupCondition"
    // IbmSparql.g:243:1: groupCondition : ( builtInCall | functionCall | OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE -> ^( CONDITION $e ( $v)? ) | var );
    public final IbmSparqlParser.groupCondition_return groupCondition() throws RecognitionException {
        IbmSparqlParser.groupCondition_return retval = new IbmSparqlParser.groupCondition_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE26=null;
        Token AS27=null;
        Token CLOSE_BRACE28=null;
        IbmSparqlParser.expression_return e = null;

        IbmSparqlParser.var_return v = null;

        IbmSparqlParser.builtInCall_return builtInCall24 = null;

        IbmSparqlParser.functionCall_return functionCall25 = null;

        IbmSparqlParser.var_return var29 = null;


        XTree OPEN_BRACE26_tree=null;
        XTree AS27_tree=null;
        XTree CLOSE_BRACE28_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // IbmSparql.g:244:2: ( builtInCall | functionCall | OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE -> ^( CONDITION $e ( $v)? ) | var )
            int alt27=4;
            switch ( input.LA(1) ) {
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case UUID:
            case STRUUID:
            case MD5:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
                {
                alt27=1;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt27=2;
                }
                break;
            case OPEN_BRACE:
                {
                alt27=3;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt27=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }

            switch (alt27) {
                case 1 :
                    // IbmSparql.g:244:6: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_builtInCall_in_groupCondition1522);
                    builtInCall24=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall24.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:245:6: functionCall
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_functionCall_in_groupCondition1530);
                    functionCall25=functionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCall25.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:246:6: OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE
                    {
                    OPEN_BRACE26=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_groupCondition1538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE26);

                    pushFollow(FOLLOW_expression_in_groupCondition1542);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e.getTree());
                    // IbmSparql.g:246:30: ( AS v= var )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==AS) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // IbmSparql.g:246:32: AS v= var
                            {
                            AS27=(Token)match(input,AS,FOLLOW_AS_in_groupCondition1546); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS27);

                            pushFollow(FOLLOW_var_in_groupCondition1550);
                            v=var();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_var.add(v.getTree());

                            }
                            break;

                    }

                    CLOSE_BRACE28=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_groupCondition1555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE28);



                    // AST REWRITE
                    // elements: e, v
                    // token labels: 
                    // rule labels: v, retval, e
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 246:58: -> ^( CONDITION $e ( $v)? )
                    {
                        // IbmSparql.g:246:62: ^( CONDITION $e ( $v)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(CONDITION, "CONDITION"), root_1);

                        adaptor.addChild(root_1, stream_e.nextTree());
                        // IbmSparql.g:246:80: ( $v)?
                        if ( stream_v.hasNext() ) {
                            adaptor.addChild(root_1, stream_v.nextTree());

                        }
                        stream_v.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // IbmSparql.g:247:6: var
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_var_in_groupCondition1582);
                    var29=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var29.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupCondition"

    public static class havingClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // IbmSparql.g:250:1: havingClause : HAVING (h+= havingCondition )+ -> ^( HAVING ( $h)+ ) ;
    public final IbmSparqlParser.havingClause_return havingClause() throws RecognitionException {
        IbmSparqlParser.havingClause_return retval = new IbmSparqlParser.havingClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token HAVING30=null;
        List list_h=null;
        RuleReturnScope h = null;
        XTree HAVING30_tree=null;
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleSubtreeStream stream_havingCondition=new RewriteRuleSubtreeStream(adaptor,"rule havingCondition");
        try {
            // IbmSparql.g:251:2: ( HAVING (h+= havingCondition )+ -> ^( HAVING ( $h)+ ) )
            // IbmSparql.g:251:6: HAVING (h+= havingCondition )+
            {
            HAVING30=(Token)match(input,HAVING,FOLLOW_HAVING_in_havingClause1599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HAVING.add(HAVING30);

            // IbmSparql.g:251:14: (h+= havingCondition )+
            int cnt28=0;
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==IRI_REF||LA28_0==PNAME_NS||LA28_0==OPEN_BRACE||(LA28_0>=NOT && LA28_0<=EXISTS)||LA28_0==PNAME_LN) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // IbmSparql.g:251:14: h+= havingCondition
            	    {
            	    pushFollow(FOLLOW_havingCondition_in_havingClause1603);
            	    h=havingCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_havingCondition.add(h.getTree());
            	    if (list_h==null) list_h=new ArrayList();
            	    list_h.add(h.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt28 >= 1 ) break loop28;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(28, input);
                        throw eee;
                }
                cnt28++;
            } while (true);



            // AST REWRITE
            // elements: h, HAVING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: h
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"token h",list_h);
            root_0 = (XTree)adaptor.nil();
            // 253:3: -> ^( HAVING ( $h)+ )
            {
                // IbmSparql.g:253:7: ^( HAVING ( $h)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_HAVING.nextNode(), root_1);

                if ( !(stream_h.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_h.hasNext() ) {
                    adaptor.addChild(root_1, stream_h.nextTree());

                }
                stream_h.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class havingCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingCondition"
    // IbmSparql.g:256:1: havingCondition : constraint ;
    public final IbmSparqlParser.havingCondition_return havingCondition() throws RecognitionException {
        IbmSparqlParser.havingCondition_return retval = new IbmSparqlParser.havingCondition_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.constraint_return constraint31 = null;



        try {
            // IbmSparql.g:257:2: ( constraint )
            // IbmSparql.g:257:6: constraint
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_constraint_in_havingCondition1640);
            constraint31=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint31.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingCondition"

    public static class orderClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderClause"
    // IbmSparql.g:260:1: orderClause : ORDER BY (o+= orderCondition )+ -> ^( ORDER_BY ( $o)+ ) ;
    public final IbmSparqlParser.orderClause_return orderClause() throws RecognitionException {
        IbmSparqlParser.orderClause_return retval = new IbmSparqlParser.orderClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token ORDER32=null;
        Token BY33=null;
        List list_o=null;
        RuleReturnScope o = null;
        XTree ORDER32_tree=null;
        XTree BY33_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleSubtreeStream stream_orderCondition=new RewriteRuleSubtreeStream(adaptor,"rule orderCondition");
        try {
            // IbmSparql.g:261:2: ( ORDER BY (o+= orderCondition )+ -> ^( ORDER_BY ( $o)+ ) )
            // IbmSparql.g:261:6: ORDER BY (o+= orderCondition )+
            {
            ORDER32=(Token)match(input,ORDER,FOLLOW_ORDER_in_orderClause1657); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ORDER.add(ORDER32);

            BY33=(Token)match(input,BY,FOLLOW_BY_in_orderClause1659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY33);

            // IbmSparql.g:261:16: (o+= orderCondition )+
            int cnt29=0;
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==IRI_REF||LA29_0==PNAME_NS||LA29_0==OPEN_BRACE||(LA29_0>=ASC && LA29_0<=DESC)||(LA29_0>=VAR1 && LA29_0<=VAR2)||(LA29_0>=NOT && LA29_0<=EXISTS)||LA29_0==PNAME_LN) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // IbmSparql.g:261:16: o+= orderCondition
            	    {
            	    pushFollow(FOLLOW_orderCondition_in_orderClause1663);
            	    o=orderCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderCondition.add(o.getTree());
            	    if (list_o==null) list_o=new ArrayList();
            	    list_o.add(o.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        throw eee;
                }
                cnt29++;
            } while (true);



            // AST REWRITE
            // elements: o
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: o
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"token o",list_o);
            root_0 = (XTree)adaptor.nil();
            // 263:3: -> ^( ORDER_BY ( $o)+ )
            {
                // IbmSparql.g:263:7: ^( ORDER_BY ( $o)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(ORDER_BY, "ORDER_BY"), root_1);

                if ( !(stream_o.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextTree());

                }
                stream_o.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderClause"

    public static class orderCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderCondition"
    // IbmSparql.g:266:1: orderCondition : ( ( ( ASC | DESC ) brackettedExpression ) | constraint | var );
    public final IbmSparqlParser.orderCondition_return orderCondition() throws RecognitionException {
        IbmSparqlParser.orderCondition_return retval = new IbmSparqlParser.orderCondition_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token ASC34=null;
        Token DESC35=null;
        IbmSparqlParser.brackettedExpression_return brackettedExpression36 = null;

        IbmSparqlParser.constraint_return constraint37 = null;

        IbmSparqlParser.var_return var38 = null;


        XTree ASC34_tree=null;
        XTree DESC35_tree=null;

        try {
            // IbmSparql.g:267:2: ( ( ( ASC | DESC ) brackettedExpression ) | constraint | var )
            int alt31=3;
            switch ( input.LA(1) ) {
            case ASC:
            case DESC:
                {
                alt31=1;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case OPEN_BRACE:
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case UUID:
            case STRUUID:
            case MD5:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
            case PNAME_LN:
                {
                alt31=2;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt31=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // IbmSparql.g:267:4: ( ( ASC | DESC ) brackettedExpression )
                    {
                    root_0 = (XTree)adaptor.nil();

                    // IbmSparql.g:267:4: ( ( ASC | DESC ) brackettedExpression )
                    // IbmSparql.g:267:6: ( ASC | DESC ) brackettedExpression
                    {
                    // IbmSparql.g:267:6: ( ASC | DESC )
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==ASC) ) {
                        alt30=1;
                    }
                    else if ( (LA30_0==DESC) ) {
                        alt30=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 30, 0, input);

                        throw nvae;
                    }
                    switch (alt30) {
                        case 1 :
                            // IbmSparql.g:267:8: ASC
                            {
                            ASC34=(Token)match(input,ASC,FOLLOW_ASC_in_orderCondition1699); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASC34_tree = (XTree)adaptor.create(ASC34);
                            root_0 = (XTree)adaptor.becomeRoot(ASC34_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // IbmSparql.g:267:15: DESC
                            {
                            DESC35=(Token)match(input,DESC,FOLLOW_DESC_in_orderCondition1704); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DESC35_tree = (XTree)adaptor.create(DESC35);
                            root_0 = (XTree)adaptor.becomeRoot(DESC35_tree, root_0);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_brackettedExpression_in_orderCondition1709);
                    brackettedExpression36=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression36.getTree());

                    }


                    }
                    break;
                case 2 :
                    // IbmSparql.g:268:4: constraint
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_constraint_in_orderCondition1716);
                    constraint37=constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint37.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:269:7: var
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_var_in_orderCondition1725);
                    var38=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var38.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderCondition"

    public static class limitOffsetClauses_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "limitOffsetClauses"
    // IbmSparql.g:272:1: limitOffsetClauses : ( limitClause ( offsetClause )? | offsetClause ( limitClause )? );
    public final IbmSparqlParser.limitOffsetClauses_return limitOffsetClauses() throws RecognitionException {
        IbmSparqlParser.limitOffsetClauses_return retval = new IbmSparqlParser.limitOffsetClauses_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.limitClause_return limitClause39 = null;

        IbmSparqlParser.offsetClause_return offsetClause40 = null;

        IbmSparqlParser.offsetClause_return offsetClause41 = null;

        IbmSparqlParser.limitClause_return limitClause42 = null;



        try {
            // IbmSparql.g:273:2: ( limitClause ( offsetClause )? | offsetClause ( limitClause )? )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==LIMIT) ) {
                alt34=1;
            }
            else if ( (LA34_0==OFFSET) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // IbmSparql.g:273:6: limitClause ( offsetClause )?
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_limitClause_in_limitOffsetClauses1742);
                    limitClause39=limitClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limitClause39.getTree());
                    // IbmSparql.g:273:18: ( offsetClause )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==OFFSET) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // IbmSparql.g:273:18: offsetClause
                            {
                            pushFollow(FOLLOW_offsetClause_in_limitOffsetClauses1744);
                            offsetClause40=offsetClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, offsetClause40.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // IbmSparql.g:273:34: offsetClause ( limitClause )?
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_offsetClause_in_limitOffsetClauses1749);
                    offsetClause41=offsetClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, offsetClause41.getTree());
                    // IbmSparql.g:273:47: ( limitClause )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==LIMIT) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // IbmSparql.g:273:47: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_limitOffsetClauses1751);
                            limitClause42=limitClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, limitClause42.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "limitOffsetClauses"

    public static class limitClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "limitClause"
    // IbmSparql.g:276:1: limitClause : LIMIT i= INTEGER -> ^( LIMIT $i) ;
    public final IbmSparqlParser.limitClause_return limitClause() throws RecognitionException {
        IbmSparqlParser.limitClause_return retval = new IbmSparqlParser.limitClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token i=null;
        Token LIMIT43=null;

        XTree i_tree=null;
        XTree LIMIT43_tree=null;
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
        RewriteRuleTokenStream stream_LIMIT=new RewriteRuleTokenStream(adaptor,"token LIMIT");

        try {
            // IbmSparql.g:277:2: ( LIMIT i= INTEGER -> ^( LIMIT $i) )
            // IbmSparql.g:277:6: LIMIT i= INTEGER
            {
            LIMIT43=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limitClause1769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LIMIT.add(LIMIT43);

            i=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_limitClause1773); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTEGER.add(i);



            // AST REWRITE
            // elements: LIMIT, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 277:24: -> ^( LIMIT $i)
            {
                // IbmSparql.g:277:28: ^( LIMIT $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_LIMIT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "limitClause"

    public static class offsetClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "offsetClause"
    // IbmSparql.g:280:1: offsetClause : OFFSET i= INTEGER -> ^( OFFSET $i) ;
    public final IbmSparqlParser.offsetClause_return offsetClause() throws RecognitionException {
        IbmSparqlParser.offsetClause_return retval = new IbmSparqlParser.offsetClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token i=null;
        Token OFFSET44=null;

        XTree i_tree=null;
        XTree OFFSET44_tree=null;
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");

        try {
            // IbmSparql.g:281:2: ( OFFSET i= INTEGER -> ^( OFFSET $i) )
            // IbmSparql.g:281:6: OFFSET i= INTEGER
            {
            OFFSET44=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_offsetClause1805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OFFSET.add(OFFSET44);

            i=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_offsetClause1809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTEGER.add(i);



            // AST REWRITE
            // elements: OFFSET, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 281:24: -> ^( OFFSET $i)
            {
                // IbmSparql.g:281:28: ^( OFFSET $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_OFFSET.nextNode(), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "offsetClause"

    public static class bindingsClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bindingsClause"
    // IbmSparql.g:284:1: bindingsClause : ( BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) ) | inlineData );
    public final IbmSparqlParser.bindingsClause_return bindingsClause() throws RecognitionException {
        IbmSparqlParser.bindingsClause_return retval = new IbmSparqlParser.bindingsClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token BINDINGS45=null;
        Token OPEN_CURLY_BRACE46=null;
        Token OPEN_BRACE47=null;
        Token CLOSE_BRACE48=null;
        Token CLOSE_CURLY_BRACE50=null;
        List list_v=null;
        List list_bv=null;
        IbmSparqlParser.nil_return nil49 = null;

        IbmSparqlParser.inlineData_return inlineData51 = null;

        RuleReturnScope v = null;
        RuleReturnScope bv = null;
        XTree BINDINGS45_tree=null;
        XTree OPEN_CURLY_BRACE46_tree=null;
        XTree OPEN_BRACE47_tree=null;
        XTree CLOSE_BRACE48_tree=null;
        XTree CLOSE_CURLY_BRACE50_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_BINDINGS=new RewriteRuleTokenStream(adaptor,"token BINDINGS");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_bindingValue=new RewriteRuleSubtreeStream(adaptor,"rule bindingValue");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try {
            // IbmSparql.g:285:2: ( BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) ) | inlineData )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==BINDINGS) ) {
                alt38=1;
            }
            else if ( (LA38_0==VALUES) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // IbmSparql.g:285:6: BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE
                    {
                    BINDINGS45=(Token)match(input,BINDINGS,FOLLOW_BINDINGS_in_bindingsClause1840); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BINDINGS.add(BINDINGS45);

                    // IbmSparql.g:285:16: (v+= var )*
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);

                        if ( ((LA35_0>=VAR1 && LA35_0<=VAR2)) ) {
                            alt35=1;
                        }


                        switch (alt35) {
                    	case 1 :
                    	    // IbmSparql.g:285:16: v+= var
                    	    {
                    	    pushFollow(FOLLOW_var_in_bindingsClause1844);
                    	    v=var();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
                    	    if (list_v==null) list_v=new ArrayList();
                    	    list_v.add(v.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop35;
                        }
                    } while (true);

                    OPEN_CURLY_BRACE46=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_bindingsClause1847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE46);

                    // IbmSparql.g:285:40: ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )*
                    loop37:
                    do {
                        int alt37=3;
                        int LA37_0 = input.LA(1);

                        if ( (LA37_0==OPEN_BRACE) ) {
                            int LA37_2 = input.LA(2);

                            if ( (LA37_2==CLOSE_BRACE) ) {
                                alt37=2;
                            }
                            else if ( (LA37_2==IRI_REF||LA37_2==PNAME_NS||LA37_2==INTEGER||LA37_2==UNDEF||(LA37_2>=DECIMAL && LA37_2<=PNAME_LN)) ) {
                                alt37=1;
                            }


                        }


                        switch (alt37) {
                    	case 1 :
                    	    // IbmSparql.g:285:42: OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE
                    	    {
                    	    OPEN_BRACE47=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bindingsClause1851); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE47);

                    	    // IbmSparql.g:285:55: (bv+= bindingValue )+
                    	    int cnt36=0;
                    	    loop36:
                    	    do {
                    	        int alt36=2;
                    	        int LA36_0 = input.LA(1);

                    	        if ( (LA36_0==IRI_REF||LA36_0==PNAME_NS||LA36_0==INTEGER||LA36_0==UNDEF||(LA36_0>=DECIMAL && LA36_0<=PNAME_LN)) ) {
                    	            alt36=1;
                    	        }


                    	        switch (alt36) {
                    	    	case 1 :
                    	    	    // IbmSparql.g:285:55: bv+= bindingValue
                    	    	    {
                    	    	    pushFollow(FOLLOW_bindingValue_in_bindingsClause1855);
                    	    	    bv=bindingValue();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) stream_bindingValue.add(bv.getTree());
                    	    	    if (list_bv==null) list_bv=new ArrayList();
                    	    	    list_bv.add(bv.getTree());


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt36 >= 1 ) break loop36;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(36, input);
                    	                throw eee;
                    	        }
                    	        cnt36++;
                    	    } while (true);

                    	    CLOSE_BRACE48=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bindingsClause1858); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE48);


                    	    }
                    	    break;
                    	case 2 :
                    	    // IbmSparql.g:285:85: nil
                    	    {
                    	    pushFollow(FOLLOW_nil_in_bindingsClause1862);
                    	    nil49=nil();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_nil.add(nil49.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop37;
                        }
                    } while (true);

                    CLOSE_CURLY_BRACE50=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_bindingsClause1867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE50);



                    // AST REWRITE
                    // elements: nil, v, bv, BINDINGS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: v, bv
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
                    RewriteRuleSubtreeStream stream_bv=new RewriteRuleSubtreeStream(adaptor,"token bv",list_bv);
                    root_0 = (XTree)adaptor.nil();
                    // 287:3: -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) )
                    {
                        // IbmSparql.g:287:7: ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_BINDINGS.nextNode(), root_1);

                        // IbmSparql.g:287:20: ( $v)*
                        while ( stream_v.hasNext() ) {
                            adaptor.addChild(root_1, stream_v.nextTree());

                        }
                        stream_v.reset();
                        // IbmSparql.g:287:25: ^( BIND_VALUES ( $bv)* ( nil )? )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIND_VALUES, "BIND_VALUES"), root_2);

                        // IbmSparql.g:287:39: ( $bv)*
                        while ( stream_bv.hasNext() ) {
                            adaptor.addChild(root_2, stream_bv.nextTree());

                        }
                        stream_bv.reset();
                        // IbmSparql.g:287:44: ( nil )?
                        if ( stream_nil.hasNext() ) {
                            adaptor.addChild(root_2, stream_nil.nextTree());

                        }
                        stream_nil.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:288:9: inlineData
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_inlineData_in_bindingsClause1907);
                    inlineData51=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineData51.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "bindingsClause"

    public static class bindingValue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bindingValue"
    // IbmSparql.g:291:1: bindingValue : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF ) ;
    public final IbmSparqlParser.bindingValue_return bindingValue() throws RecognitionException {
        IbmSparqlParser.bindingValue_return retval = new IbmSparqlParser.bindingValue_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token UNDEF56=null;
        IbmSparqlParser.iRIref_return iRIref52 = null;

        IbmSparqlParser.rDFLiteral_return rDFLiteral53 = null;

        IbmSparqlParser.numericLiteral_return numericLiteral54 = null;

        IbmSparqlParser.booleanLiteral_return booleanLiteral55 = null;


        XTree UNDEF56_tree=null;

        try {
            // IbmSparql.g:292:2: ( ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF ) )
            // IbmSparql.g:292:6: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            {
            root_0 = (XTree)adaptor.nil();

            // IbmSparql.g:292:6: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            int alt39=5;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt39=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt39=2;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt39=3;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt39=4;
                }
                break;
            case UNDEF:
                {
                alt39=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // IbmSparql.g:292:8: iRIref
                    {
                    pushFollow(FOLLOW_iRIref_in_bindingValue1926);
                    iRIref52=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref52.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:292:17: rDFLiteral
                    {
                    pushFollow(FOLLOW_rDFLiteral_in_bindingValue1930);
                    rDFLiteral53=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral53.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:292:30: numericLiteral
                    {
                    pushFollow(FOLLOW_numericLiteral_in_bindingValue1934);
                    numericLiteral54=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral54.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparql.g:292:47: booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_bindingValue1938);
                    booleanLiteral55=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral55.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparql.g:292:64: UNDEF
                    {
                    UNDEF56=(Token)match(input,UNDEF,FOLLOW_UNDEF_in_bindingValue1942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDEF56_tree = (XTree)adaptor.create(UNDEF56);
                    adaptor.addChild(root_0, UNDEF56_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "bindingValue"

    public static class update_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update"
    // IbmSparql.g:295:1: update : prologue ( update1 ( SEMICOLON update )? )? ;
    public final IbmSparqlParser.update_return update() throws RecognitionException {
        IbmSparqlParser.update_return retval = new IbmSparqlParser.update_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token SEMICOLON59=null;
        IbmSparqlParser.prologue_return prologue57 = null;

        IbmSparqlParser.update1_return update158 = null;

        IbmSparqlParser.update_return update60 = null;


        XTree SEMICOLON59_tree=null;

        try {
            // IbmSparql.g:296:2: ( prologue ( update1 ( SEMICOLON update )? )? )
            // IbmSparql.g:296:6: prologue ( update1 ( SEMICOLON update )? )?
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_prologue_in_update1961);
            prologue57=prologue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, prologue57.getTree());
            // IbmSparql.g:296:15: ( update1 ( SEMICOLON update )? )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==LOAD||(LA41_0>=CLEAR && LA41_0<=ADD)||(LA41_0>=MOVE && LA41_0<=INSERT)||(LA41_0>=DELETE && LA41_0<=WITH)) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // IbmSparql.g:296:17: update1 ( SEMICOLON update )?
                    {
                    pushFollow(FOLLOW_update1_in_update1965);
                    update158=update1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update158.getTree());
                    // IbmSparql.g:296:25: ( SEMICOLON update )?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( (LA40_0==SEMICOLON) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // IbmSparql.g:296:27: SEMICOLON update
                            {
                            SEMICOLON59=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_update1969); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON59_tree = (XTree)adaptor.create(SEMICOLON59);
                            adaptor.addChild(root_0, SEMICOLON59_tree);
                            }
                            pushFollow(FOLLOW_update_in_update1971);
                            update60=update();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, update60.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "update"

    public static class update1_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update1"
    // IbmSparql.g:299:1: update1 : ( load | clear | drop | add | move | copy | create | insertData | deleteData | deleteWhere | modify );
    public final IbmSparqlParser.update1_return update1() throws RecognitionException {
        IbmSparqlParser.update1_return retval = new IbmSparqlParser.update1_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.load_return load61 = null;

        IbmSparqlParser.clear_return clear62 = null;

        IbmSparqlParser.drop_return drop63 = null;

        IbmSparqlParser.add_return add64 = null;

        IbmSparqlParser.move_return move65 = null;

        IbmSparqlParser.copy_return copy66 = null;

        IbmSparqlParser.create_return create67 = null;

        IbmSparqlParser.insertData_return insertData68 = null;

        IbmSparqlParser.deleteData_return deleteData69 = null;

        IbmSparqlParser.deleteWhere_return deleteWhere70 = null;

        IbmSparqlParser.modify_return modify71 = null;



        try {
            // IbmSparql.g:300:2: ( load | clear | drop | add | move | copy | create | insertData | deleteData | deleteWhere | modify )
            int alt42=11;
            alt42 = dfa42.predict(input);
            switch (alt42) {
                case 1 :
                    // IbmSparql.g:300:6: load
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_load_in_update11994);
                    load61=load();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, load61.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:300:13: clear
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_clear_in_update11998);
                    clear62=clear();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clear62.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:300:21: drop
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_drop_in_update12002);
                    drop63=drop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop63.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparql.g:300:28: add
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_add_in_update12006);
                    add64=add();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, add64.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparql.g:300:34: move
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_move_in_update12010);
                    move65=move();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, move65.getTree());

                    }
                    break;
                case 6 :
                    // IbmSparql.g:300:41: copy
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_copy_in_update12014);
                    copy66=copy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, copy66.getTree());

                    }
                    break;
                case 7 :
                    // IbmSparql.g:300:48: create
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_create_in_update12018);
                    create67=create();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create67.getTree());

                    }
                    break;
                case 8 :
                    // IbmSparql.g:300:57: insertData
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_insertData_in_update12022);
                    insertData68=insertData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertData68.getTree());

                    }
                    break;
                case 9 :
                    // IbmSparql.g:300:70: deleteData
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_deleteData_in_update12026);
                    deleteData69=deleteData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteData69.getTree());

                    }
                    break;
                case 10 :
                    // IbmSparql.g:300:83: deleteWhere
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_deleteWhere_in_update12030);
                    deleteWhere70=deleteWhere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteWhere70.getTree());

                    }
                    break;
                case 11 :
                    // IbmSparql.g:300:97: modify
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_modify_in_update12034);
                    modify71=modify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modify71.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "update1"

    public static class load_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "load"
    // IbmSparql.g:303:1: load : LOAD ( SILENT )? iRIref ( INTO graphRef )? ;
    public final IbmSparqlParser.load_return load() throws RecognitionException {
        IbmSparqlParser.load_return retval = new IbmSparqlParser.load_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token LOAD72=null;
        Token SILENT73=null;
        Token INTO75=null;
        IbmSparqlParser.iRIref_return iRIref74 = null;

        IbmSparqlParser.graphRef_return graphRef76 = null;


        XTree LOAD72_tree=null;
        XTree SILENT73_tree=null;
        XTree INTO75_tree=null;

        try {
            // IbmSparql.g:304:2: ( LOAD ( SILENT )? iRIref ( INTO graphRef )? )
            // IbmSparql.g:304:6: LOAD ( SILENT )? iRIref ( INTO graphRef )?
            {
            root_0 = (XTree)adaptor.nil();

            LOAD72=(Token)match(input,LOAD,FOLLOW_LOAD_in_load2051); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD72_tree = (XTree)adaptor.create(LOAD72);
            adaptor.addChild(root_0, LOAD72_tree);
            }
            // IbmSparql.g:304:11: ( SILENT )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==SILENT) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // IbmSparql.g:304:11: SILENT
                    {
                    SILENT73=(Token)match(input,SILENT,FOLLOW_SILENT_in_load2053); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT73_tree = (XTree)adaptor.create(SILENT73);
                    adaptor.addChild(root_0, SILENT73_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_iRIref_in_load2056);
            iRIref74=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref74.getTree());
            // IbmSparql.g:304:26: ( INTO graphRef )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==INTO) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // IbmSparql.g:304:28: INTO graphRef
                    {
                    INTO75=(Token)match(input,INTO,FOLLOW_INTO_in_load2060); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO75_tree = (XTree)adaptor.create(INTO75);
                    adaptor.addChild(root_0, INTO75_tree);
                    }
                    pushFollow(FOLLOW_graphRef_in_load2062);
                    graphRef76=graphRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef76.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "load"

    public static class clear_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clear"
    // IbmSparql.g:307:1: clear : CLEAR ( SILENT )? graphRefAll ;
    public final IbmSparqlParser.clear_return clear() throws RecognitionException {
        IbmSparqlParser.clear_return retval = new IbmSparqlParser.clear_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token CLEAR77=null;
        Token SILENT78=null;
        IbmSparqlParser.graphRefAll_return graphRefAll79 = null;


        XTree CLEAR77_tree=null;
        XTree SILENT78_tree=null;

        try {
            // IbmSparql.g:308:2: ( CLEAR ( SILENT )? graphRefAll )
            // IbmSparql.g:308:6: CLEAR ( SILENT )? graphRefAll
            {
            root_0 = (XTree)adaptor.nil();

            CLEAR77=(Token)match(input,CLEAR,FOLLOW_CLEAR_in_clear2082); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLEAR77_tree = (XTree)adaptor.create(CLEAR77);
            adaptor.addChild(root_0, CLEAR77_tree);
            }
            // IbmSparql.g:308:12: ( SILENT )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==SILENT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // IbmSparql.g:308:12: SILENT
                    {
                    SILENT78=(Token)match(input,SILENT,FOLLOW_SILENT_in_clear2084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT78_tree = (XTree)adaptor.create(SILENT78);
                    adaptor.addChild(root_0, SILENT78_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphRefAll_in_clear2087);
            graphRefAll79=graphRefAll();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRefAll79.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "clear"

    public static class drop_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "drop"
    // IbmSparql.g:311:1: drop : DROP ( SILENT )? graphRefAll ;
    public final IbmSparqlParser.drop_return drop() throws RecognitionException {
        IbmSparqlParser.drop_return retval = new IbmSparqlParser.drop_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DROP80=null;
        Token SILENT81=null;
        IbmSparqlParser.graphRefAll_return graphRefAll82 = null;


        XTree DROP80_tree=null;
        XTree SILENT81_tree=null;

        try {
            // IbmSparql.g:312:2: ( DROP ( SILENT )? graphRefAll )
            // IbmSparql.g:312:6: DROP ( SILENT )? graphRefAll
            {
            root_0 = (XTree)adaptor.nil();

            DROP80=(Token)match(input,DROP,FOLLOW_DROP_in_drop2104); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DROP80_tree = (XTree)adaptor.create(DROP80);
            adaptor.addChild(root_0, DROP80_tree);
            }
            // IbmSparql.g:312:11: ( SILENT )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SILENT) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // IbmSparql.g:312:11: SILENT
                    {
                    SILENT81=(Token)match(input,SILENT,FOLLOW_SILENT_in_drop2106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT81_tree = (XTree)adaptor.create(SILENT81);
                    adaptor.addChild(root_0, SILENT81_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphRefAll_in_drop2109);
            graphRefAll82=graphRefAll();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRefAll82.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "drop"

    public static class create_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create"
    // IbmSparql.g:315:1: create : CREATE ( SILENT )? graphRef ;
    public final IbmSparqlParser.create_return create() throws RecognitionException {
        IbmSparqlParser.create_return retval = new IbmSparqlParser.create_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token CREATE83=null;
        Token SILENT84=null;
        IbmSparqlParser.graphRef_return graphRef85 = null;


        XTree CREATE83_tree=null;
        XTree SILENT84_tree=null;

        try {
            // IbmSparql.g:316:2: ( CREATE ( SILENT )? graphRef )
            // IbmSparql.g:316:6: CREATE ( SILENT )? graphRef
            {
            root_0 = (XTree)adaptor.nil();

            CREATE83=(Token)match(input,CREATE,FOLLOW_CREATE_in_create2126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CREATE83_tree = (XTree)adaptor.create(CREATE83);
            adaptor.addChild(root_0, CREATE83_tree);
            }
            // IbmSparql.g:316:13: ( SILENT )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==SILENT) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // IbmSparql.g:316:13: SILENT
                    {
                    SILENT84=(Token)match(input,SILENT,FOLLOW_SILENT_in_create2128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT84_tree = (XTree)adaptor.create(SILENT84);
                    adaptor.addChild(root_0, SILENT84_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphRef_in_create2131);
            graphRef85=graphRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef85.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "create"

    public static class add_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "add"
    // IbmSparql.g:319:1: add : ADD ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlParser.add_return add() throws RecognitionException {
        IbmSparqlParser.add_return retval = new IbmSparqlParser.add_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token ADD86=null;
        Token SILENT87=null;
        Token TO89=null;
        IbmSparqlParser.graphOrDefault_return graphOrDefault88 = null;

        IbmSparqlParser.graphOrDefault_return graphOrDefault90 = null;


        XTree ADD86_tree=null;
        XTree SILENT87_tree=null;
        XTree TO89_tree=null;

        try {
            // IbmSparql.g:320:2: ( ADD ( SILENT )? graphOrDefault TO graphOrDefault )
            // IbmSparql.g:320:6: ADD ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();

            ADD86=(Token)match(input,ADD,FOLLOW_ADD_in_add2148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ADD86_tree = (XTree)adaptor.create(ADD86);
            adaptor.addChild(root_0, ADD86_tree);
            }
            // IbmSparql.g:320:10: ( SILENT )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==SILENT) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // IbmSparql.g:320:10: SILENT
                    {
                    SILENT87=(Token)match(input,SILENT,FOLLOW_SILENT_in_add2150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT87_tree = (XTree)adaptor.create(SILENT87);
                    adaptor.addChild(root_0, SILENT87_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphOrDefault_in_add2153);
            graphOrDefault88=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault88.getTree());
            TO89=(Token)match(input,TO,FOLLOW_TO_in_add2155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO89_tree = (XTree)adaptor.create(TO89);
            adaptor.addChild(root_0, TO89_tree);
            }
            pushFollow(FOLLOW_graphOrDefault_in_add2157);
            graphOrDefault90=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault90.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "add"

    public static class move_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "move"
    // IbmSparql.g:323:1: move : MOVE ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlParser.move_return move() throws RecognitionException {
        IbmSparqlParser.move_return retval = new IbmSparqlParser.move_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token MOVE91=null;
        Token SILENT92=null;
        Token TO94=null;
        IbmSparqlParser.graphOrDefault_return graphOrDefault93 = null;

        IbmSparqlParser.graphOrDefault_return graphOrDefault95 = null;


        XTree MOVE91_tree=null;
        XTree SILENT92_tree=null;
        XTree TO94_tree=null;

        try {
            // IbmSparql.g:324:2: ( MOVE ( SILENT )? graphOrDefault TO graphOrDefault )
            // IbmSparql.g:324:6: MOVE ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();

            MOVE91=(Token)match(input,MOVE,FOLLOW_MOVE_in_move2174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MOVE91_tree = (XTree)adaptor.create(MOVE91);
            adaptor.addChild(root_0, MOVE91_tree);
            }
            // IbmSparql.g:324:11: ( SILENT )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==SILENT) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // IbmSparql.g:324:11: SILENT
                    {
                    SILENT92=(Token)match(input,SILENT,FOLLOW_SILENT_in_move2176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT92_tree = (XTree)adaptor.create(SILENT92);
                    adaptor.addChild(root_0, SILENT92_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphOrDefault_in_move2179);
            graphOrDefault93=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault93.getTree());
            TO94=(Token)match(input,TO,FOLLOW_TO_in_move2181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO94_tree = (XTree)adaptor.create(TO94);
            adaptor.addChild(root_0, TO94_tree);
            }
            pushFollow(FOLLOW_graphOrDefault_in_move2183);
            graphOrDefault95=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault95.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "move"

    public static class copy_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "copy"
    // IbmSparql.g:327:1: copy : COPY ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlParser.copy_return copy() throws RecognitionException {
        IbmSparqlParser.copy_return retval = new IbmSparqlParser.copy_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token COPY96=null;
        Token SILENT97=null;
        Token TO99=null;
        IbmSparqlParser.graphOrDefault_return graphOrDefault98 = null;

        IbmSparqlParser.graphOrDefault_return graphOrDefault100 = null;


        XTree COPY96_tree=null;
        XTree SILENT97_tree=null;
        XTree TO99_tree=null;

        try {
            // IbmSparql.g:328:2: ( COPY ( SILENT )? graphOrDefault TO graphOrDefault )
            // IbmSparql.g:328:6: COPY ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();

            COPY96=(Token)match(input,COPY,FOLLOW_COPY_in_copy2200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COPY96_tree = (XTree)adaptor.create(COPY96);
            adaptor.addChild(root_0, COPY96_tree);
            }
            // IbmSparql.g:328:11: ( SILENT )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==SILENT) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // IbmSparql.g:328:11: SILENT
                    {
                    SILENT97=(Token)match(input,SILENT,FOLLOW_SILENT_in_copy2202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT97_tree = (XTree)adaptor.create(SILENT97);
                    adaptor.addChild(root_0, SILENT97_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphOrDefault_in_copy2205);
            graphOrDefault98=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault98.getTree());
            TO99=(Token)match(input,TO,FOLLOW_TO_in_copy2207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO99_tree = (XTree)adaptor.create(TO99);
            adaptor.addChild(root_0, TO99_tree);
            }
            pushFollow(FOLLOW_graphOrDefault_in_copy2209);
            graphOrDefault100=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault100.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "copy"

    public static class insertData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertData"
    // IbmSparql.g:331:1: insertData : INSERT DATA quadData ;
    public final IbmSparqlParser.insertData_return insertData() throws RecognitionException {
        IbmSparqlParser.insertData_return retval = new IbmSparqlParser.insertData_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INSERT101=null;
        Token DATA102=null;
        IbmSparqlParser.quadData_return quadData103 = null;


        XTree INSERT101_tree=null;
        XTree DATA102_tree=null;

        try {
            // IbmSparql.g:332:2: ( INSERT DATA quadData )
            // IbmSparql.g:332:6: INSERT DATA quadData
            {
            root_0 = (XTree)adaptor.nil();

            INSERT101=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertData2226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT101_tree = (XTree)adaptor.create(INSERT101);
            adaptor.addChild(root_0, INSERT101_tree);
            }
            DATA102=(Token)match(input,DATA,FOLLOW_DATA_in_insertData2228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DATA102_tree = (XTree)adaptor.create(DATA102);
            adaptor.addChild(root_0, DATA102_tree);
            }
            pushFollow(FOLLOW_quadData_in_insertData2230);
            quadData103=quadData();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadData103.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertData"

    public static class deleteData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deleteData"
    // IbmSparql.g:335:1: deleteData : DELETE DATA quadData ;
    public final IbmSparqlParser.deleteData_return deleteData() throws RecognitionException {
        IbmSparqlParser.deleteData_return retval = new IbmSparqlParser.deleteData_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DELETE104=null;
        Token DATA105=null;
        IbmSparqlParser.quadData_return quadData106 = null;


        XTree DELETE104_tree=null;
        XTree DATA105_tree=null;

        try {
            // IbmSparql.g:336:2: ( DELETE DATA quadData )
            // IbmSparql.g:336:6: DELETE DATA quadData
            {
            root_0 = (XTree)adaptor.nil();

            DELETE104=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteData2246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE104_tree = (XTree)adaptor.create(DELETE104);
            adaptor.addChild(root_0, DELETE104_tree);
            }
            DATA105=(Token)match(input,DATA,FOLLOW_DATA_in_deleteData2248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DATA105_tree = (XTree)adaptor.create(DATA105);
            adaptor.addChild(root_0, DATA105_tree);
            }
            pushFollow(FOLLOW_quadData_in_deleteData2250);
            quadData106=quadData();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadData106.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "deleteData"

    public static class deleteWhere_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deleteWhere"
    // IbmSparql.g:339:1: deleteWhere : DELETE WHERE_TOKEN quadPattern ;
    public final IbmSparqlParser.deleteWhere_return deleteWhere() throws RecognitionException {
        IbmSparqlParser.deleteWhere_return retval = new IbmSparqlParser.deleteWhere_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DELETE107=null;
        Token WHERE_TOKEN108=null;
        IbmSparqlParser.quadPattern_return quadPattern109 = null;


        XTree DELETE107_tree=null;
        XTree WHERE_TOKEN108_tree=null;

        try {
            // IbmSparql.g:340:2: ( DELETE WHERE_TOKEN quadPattern )
            // IbmSparql.g:340:6: DELETE WHERE_TOKEN quadPattern
            {
            root_0 = (XTree)adaptor.nil();

            DELETE107=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteWhere2267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE107_tree = (XTree)adaptor.create(DELETE107);
            adaptor.addChild(root_0, DELETE107_tree);
            }
            WHERE_TOKEN108=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_deleteWhere2269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE_TOKEN108_tree = (XTree)adaptor.create(WHERE_TOKEN108);
            adaptor.addChild(root_0, WHERE_TOKEN108_tree);
            }
            pushFollow(FOLLOW_quadPattern_in_deleteWhere2271);
            quadPattern109=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern109.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "deleteWhere"

    public static class modify_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modify"
    // IbmSparql.g:343:1: modify : ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern ;
    public final IbmSparqlParser.modify_return modify() throws RecognitionException {
        IbmSparqlParser.modify_return retval = new IbmSparqlParser.modify_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token WITH110=null;
        Token WHERE_TOKEN116=null;
        IbmSparqlParser.iRIref_return iRIref111 = null;

        IbmSparqlParser.deleteClause_return deleteClause112 = null;

        IbmSparqlParser.insertClause_return insertClause113 = null;

        IbmSparqlParser.insertClause_return insertClause114 = null;

        IbmSparqlParser.usingClause_return usingClause115 = null;

        IbmSparqlParser.groupGraphPattern_return groupGraphPattern117 = null;


        XTree WITH110_tree=null;
        XTree WHERE_TOKEN116_tree=null;

        try {
            // IbmSparql.g:344:2: ( ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern )
            // IbmSparql.g:344:6: ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern
            {
            root_0 = (XTree)adaptor.nil();

            // IbmSparql.g:344:6: ( WITH iRIref )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==WITH) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // IbmSparql.g:344:8: WITH iRIref
                    {
                    WITH110=(Token)match(input,WITH,FOLLOW_WITH_in_modify2290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH110_tree = (XTree)adaptor.create(WITH110);
                    adaptor.addChild(root_0, WITH110_tree);
                    }
                    pushFollow(FOLLOW_iRIref_in_modify2292);
                    iRIref111=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref111.getTree());

                    }
                    break;

            }

            // IbmSparql.g:344:23: ( deleteClause ( insertClause )? | insertClause )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==DELETE) ) {
                alt53=1;
            }
            else if ( (LA53_0==INSERT) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    // IbmSparql.g:344:25: deleteClause ( insertClause )?
                    {
                    pushFollow(FOLLOW_deleteClause_in_modify2299);
                    deleteClause112=deleteClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteClause112.getTree());
                    // IbmSparql.g:344:38: ( insertClause )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==INSERT) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // IbmSparql.g:344:38: insertClause
                            {
                            pushFollow(FOLLOW_insertClause_in_modify2301);
                            insertClause113=insertClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, insertClause113.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // IbmSparql.g:344:54: insertClause
                    {
                    pushFollow(FOLLOW_insertClause_in_modify2306);
                    insertClause114=insertClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertClause114.getTree());

                    }
                    break;

            }

            // IbmSparql.g:344:69: ( usingClause )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==USING) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // IbmSparql.g:344:69: usingClause
            	    {
            	    pushFollow(FOLLOW_usingClause_in_modify2310);
            	    usingClause115=usingClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, usingClause115.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            WHERE_TOKEN116=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_modify2313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE_TOKEN116_tree = (XTree)adaptor.create(WHERE_TOKEN116);
            adaptor.addChild(root_0, WHERE_TOKEN116_tree);
            }
            pushFollow(FOLLOW_groupGraphPattern_in_modify2315);
            groupGraphPattern117=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, groupGraphPattern117.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "modify"

    public static class deleteClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deleteClause"
    // IbmSparql.g:347:1: deleteClause : DELETE quadPattern ;
    public final IbmSparqlParser.deleteClause_return deleteClause() throws RecognitionException {
        IbmSparqlParser.deleteClause_return retval = new IbmSparqlParser.deleteClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DELETE118=null;
        IbmSparqlParser.quadPattern_return quadPattern119 = null;


        XTree DELETE118_tree=null;

        try {
            // IbmSparql.g:348:2: ( DELETE quadPattern )
            // IbmSparql.g:348:6: DELETE quadPattern
            {
            root_0 = (XTree)adaptor.nil();

            DELETE118=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteClause2331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE118_tree = (XTree)adaptor.create(DELETE118);
            adaptor.addChild(root_0, DELETE118_tree);
            }
            pushFollow(FOLLOW_quadPattern_in_deleteClause2333);
            quadPattern119=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern119.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "deleteClause"

    public static class insertClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertClause"
    // IbmSparql.g:351:1: insertClause : INSERT quadPattern ;
    public final IbmSparqlParser.insertClause_return insertClause() throws RecognitionException {
        IbmSparqlParser.insertClause_return retval = new IbmSparqlParser.insertClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INSERT120=null;
        IbmSparqlParser.quadPattern_return quadPattern121 = null;


        XTree INSERT120_tree=null;

        try {
            // IbmSparql.g:352:2: ( INSERT quadPattern )
            // IbmSparql.g:352:6: INSERT quadPattern
            {
            root_0 = (XTree)adaptor.nil();

            INSERT120=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertClause2350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT120_tree = (XTree)adaptor.create(INSERT120);
            adaptor.addChild(root_0, INSERT120_tree);
            }
            pushFollow(FOLLOW_quadPattern_in_insertClause2352);
            quadPattern121=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern121.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertClause"

    public static class usingClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "usingClause"
    // IbmSparql.g:355:1: usingClause : USING ( iRIref | NAMED iRIref ) ;
    public final IbmSparqlParser.usingClause_return usingClause() throws RecognitionException {
        IbmSparqlParser.usingClause_return retval = new IbmSparqlParser.usingClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token USING122=null;
        Token NAMED124=null;
        IbmSparqlParser.iRIref_return iRIref123 = null;

        IbmSparqlParser.iRIref_return iRIref125 = null;


        XTree USING122_tree=null;
        XTree NAMED124_tree=null;

        try {
            // IbmSparql.g:356:2: ( USING ( iRIref | NAMED iRIref ) )
            // IbmSparql.g:356:6: USING ( iRIref | NAMED iRIref )
            {
            root_0 = (XTree)adaptor.nil();

            USING122=(Token)match(input,USING,FOLLOW_USING_in_usingClause2369); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USING122_tree = (XTree)adaptor.create(USING122);
            adaptor.addChild(root_0, USING122_tree);
            }
            // IbmSparql.g:356:12: ( iRIref | NAMED iRIref )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==IRI_REF||LA55_0==PNAME_NS||LA55_0==PNAME_LN) ) {
                alt55=1;
            }
            else if ( (LA55_0==NAMED) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // IbmSparql.g:356:14: iRIref
                    {
                    pushFollow(FOLLOW_iRIref_in_usingClause2373);
                    iRIref123=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref123.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:356:23: NAMED iRIref
                    {
                    NAMED124=(Token)match(input,NAMED,FOLLOW_NAMED_in_usingClause2377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAMED124_tree = (XTree)adaptor.create(NAMED124);
                    adaptor.addChild(root_0, NAMED124_tree);
                    }
                    pushFollow(FOLLOW_iRIref_in_usingClause2379);
                    iRIref125=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref125.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "usingClause"

    public static class graphOrDefault_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphOrDefault"
    // IbmSparql.g:359:1: graphOrDefault : ( DEFAULT | ( GRAPH )? iRIref );
    public final IbmSparqlParser.graphOrDefault_return graphOrDefault() throws RecognitionException {
        IbmSparqlParser.graphOrDefault_return retval = new IbmSparqlParser.graphOrDefault_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DEFAULT126=null;
        Token GRAPH127=null;
        IbmSparqlParser.iRIref_return iRIref128 = null;


        XTree DEFAULT126_tree=null;
        XTree GRAPH127_tree=null;

        try {
            // IbmSparql.g:360:2: ( DEFAULT | ( GRAPH )? iRIref )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==DEFAULT) ) {
                alt57=1;
            }
            else if ( (LA57_0==IRI_REF||LA57_0==PNAME_NS||LA57_0==GRAPH||LA57_0==PNAME_LN) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // IbmSparql.g:360:6: DEFAULT
                    {
                    root_0 = (XTree)adaptor.nil();

                    DEFAULT126=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_graphOrDefault2398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT126_tree = (XTree)adaptor.create(DEFAULT126);
                    adaptor.addChild(root_0, DEFAULT126_tree);
                    }

                    }
                    break;
                case 2 :
                    // IbmSparql.g:360:16: ( GRAPH )? iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    // IbmSparql.g:360:16: ( GRAPH )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==GRAPH) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // IbmSparql.g:360:16: GRAPH
                            {
                            GRAPH127=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphOrDefault2402); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            GRAPH127_tree = (XTree)adaptor.create(GRAPH127);
                            adaptor.addChild(root_0, GRAPH127_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_iRIref_in_graphOrDefault2405);
                    iRIref128=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref128.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphOrDefault"

    public static class graphRef_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphRef"
    // IbmSparql.g:363:1: graphRef : GRAPH iRIref ;
    public final IbmSparqlParser.graphRef_return graphRef() throws RecognitionException {
        IbmSparqlParser.graphRef_return retval = new IbmSparqlParser.graphRef_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token GRAPH129=null;
        IbmSparqlParser.iRIref_return iRIref130 = null;


        XTree GRAPH129_tree=null;

        try {
            // IbmSparql.g:364:2: ( GRAPH iRIref )
            // IbmSparql.g:364:6: GRAPH iRIref
            {
            root_0 = (XTree)adaptor.nil();

            GRAPH129=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphRef2422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GRAPH129_tree = (XTree)adaptor.create(GRAPH129);
            adaptor.addChild(root_0, GRAPH129_tree);
            }
            pushFollow(FOLLOW_iRIref_in_graphRef2424);
            iRIref130=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref130.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphRef"

    public static class graphRefAll_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphRefAll"
    // IbmSparql.g:367:1: graphRefAll : ( graphRef | DEFAULT | NAMED | ALL );
    public final IbmSparqlParser.graphRefAll_return graphRefAll() throws RecognitionException {
        IbmSparqlParser.graphRefAll_return retval = new IbmSparqlParser.graphRefAll_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DEFAULT132=null;
        Token NAMED133=null;
        Token ALL134=null;
        IbmSparqlParser.graphRef_return graphRef131 = null;


        XTree DEFAULT132_tree=null;
        XTree NAMED133_tree=null;
        XTree ALL134_tree=null;

        try {
            // IbmSparql.g:368:2: ( graphRef | DEFAULT | NAMED | ALL )
            int alt58=4;
            switch ( input.LA(1) ) {
            case GRAPH:
                {
                alt58=1;
                }
                break;
            case DEFAULT:
                {
                alt58=2;
                }
                break;
            case NAMED:
                {
                alt58=3;
                }
                break;
            case ALL:
                {
                alt58=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }

            switch (alt58) {
                case 1 :
                    // IbmSparql.g:368:7: graphRef
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_graphRef_in_graphRefAll2438);
                    graphRef131=graphRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef131.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:368:18: DEFAULT
                    {
                    root_0 = (XTree)adaptor.nil();

                    DEFAULT132=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_graphRefAll2442); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT132_tree = (XTree)adaptor.create(DEFAULT132);
                    adaptor.addChild(root_0, DEFAULT132_tree);
                    }

                    }
                    break;
                case 3 :
                    // IbmSparql.g:368:28: NAMED
                    {
                    root_0 = (XTree)adaptor.nil();

                    NAMED133=(Token)match(input,NAMED,FOLLOW_NAMED_in_graphRefAll2446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAMED133_tree = (XTree)adaptor.create(NAMED133);
                    adaptor.addChild(root_0, NAMED133_tree);
                    }

                    }
                    break;
                case 4 :
                    // IbmSparql.g:368:36: ALL
                    {
                    root_0 = (XTree)adaptor.nil();

                    ALL134=(Token)match(input,ALL,FOLLOW_ALL_in_graphRefAll2450); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL134_tree = (XTree)adaptor.create(ALL134);
                    adaptor.addChild(root_0, ALL134_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphRefAll"

    public static class quadPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quadPattern"
    // IbmSparql.g:371:1: quadPattern : OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE ;
    public final IbmSparqlParser.quadPattern_return quadPattern() throws RecognitionException {
        IbmSparqlParser.quadPattern_return retval = new IbmSparqlParser.quadPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_CURLY_BRACE135=null;
        Token CLOSE_CURLY_BRACE137=null;
        IbmSparqlParser.quads_return quads136 = null;


        XTree OPEN_CURLY_BRACE135_tree=null;
        XTree CLOSE_CURLY_BRACE137_tree=null;

        try {
            // IbmSparql.g:372:2: ( OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE )
            // IbmSparql.g:372:7: OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();

            OPEN_CURLY_BRACE135=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadPattern2464); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE135_tree = (XTree)adaptor.create(OPEN_CURLY_BRACE135);
            adaptor.addChild(root_0, OPEN_CURLY_BRACE135_tree);
            }
            pushFollow(FOLLOW_quads_in_quadPattern2466);
            quads136=quads();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quads136.getTree());
            CLOSE_CURLY_BRACE137=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadPattern2468); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE137_tree = (XTree)adaptor.create(CLOSE_CURLY_BRACE137);
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE137_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "quadPattern"

    public static class quadData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quadData"
    // IbmSparql.g:375:1: quadData : OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE ;
    public final IbmSparqlParser.quadData_return quadData() throws RecognitionException {
        IbmSparqlParser.quadData_return retval = new IbmSparqlParser.quadData_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_CURLY_BRACE138=null;
        Token CLOSE_CURLY_BRACE140=null;
        IbmSparqlParser.quads_return quads139 = null;


        XTree OPEN_CURLY_BRACE138_tree=null;
        XTree CLOSE_CURLY_BRACE140_tree=null;

        try {
            // IbmSparql.g:376:2: ( OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE )
            // IbmSparql.g:376:7: OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();

            OPEN_CURLY_BRACE138=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadData2482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE138_tree = (XTree)adaptor.create(OPEN_CURLY_BRACE138);
            adaptor.addChild(root_0, OPEN_CURLY_BRACE138_tree);
            }
            pushFollow(FOLLOW_quads_in_quadData2484);
            quads139=quads();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quads139.getTree());
            CLOSE_CURLY_BRACE140=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadData2486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE140_tree = (XTree)adaptor.create(CLOSE_CURLY_BRACE140);
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE140_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "quadData"

    public static class quads_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quads"
    // IbmSparql.g:379:1: quads : ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )* ;
    public final IbmSparqlParser.quads_return quads() throws RecognitionException {
        IbmSparqlParser.quads_return retval = new IbmSparqlParser.quads_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DOT143=null;
        IbmSparqlParser.triplesTemplate_return triplesTemplate141 = null;

        IbmSparqlParser.quadsNotTriples_return quadsNotTriples142 = null;

        IbmSparqlParser.triplesTemplate_return triplesTemplate144 = null;


        XTree DOT143_tree=null;

        try {
            // IbmSparql.g:380:2: ( ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )* )
            // IbmSparql.g:380:7: ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )*
            {
            root_0 = (XTree)adaptor.nil();

            // IbmSparql.g:380:7: ( triplesTemplate )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==IRI_REF||LA59_0==PNAME_NS||LA59_0==OPEN_BRACE||LA59_0==INTEGER||LA59_0==OPEN_SQ_BRACKET||(LA59_0>=VAR1 && LA59_0<=VAR2)||(LA59_0>=DECIMAL && LA59_0<=BLANK_NODE_LABEL)) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // IbmSparql.g:380:7: triplesTemplate
                    {
                    pushFollow(FOLLOW_triplesTemplate_in_quads2500);
                    triplesTemplate141=triplesTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate141.getTree());

                    }
                    break;

            }

            // IbmSparql.g:380:24: ( quadsNotTriples ( DOT )? ( triplesTemplate )? )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==GRAPH) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // IbmSparql.g:380:26: quadsNotTriples ( DOT )? ( triplesTemplate )?
            	    {
            	    pushFollow(FOLLOW_quadsNotTriples_in_quads2505);
            	    quadsNotTriples142=quadsNotTriples();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quadsNotTriples142.getTree());
            	    // IbmSparql.g:380:42: ( DOT )?
            	    int alt60=2;
            	    int LA60_0 = input.LA(1);

            	    if ( (LA60_0==DOT) ) {
            	        alt60=1;
            	    }
            	    switch (alt60) {
            	        case 1 :
            	            // IbmSparql.g:380:42: DOT
            	            {
            	            DOT143=(Token)match(input,DOT,FOLLOW_DOT_in_quads2507); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DOT143_tree = (XTree)adaptor.create(DOT143);
            	            adaptor.addChild(root_0, DOT143_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // IbmSparql.g:380:47: ( triplesTemplate )?
            	    int alt61=2;
            	    int LA61_0 = input.LA(1);

            	    if ( (LA61_0==IRI_REF||LA61_0==PNAME_NS||LA61_0==OPEN_BRACE||LA61_0==INTEGER||LA61_0==OPEN_SQ_BRACKET||(LA61_0>=VAR1 && LA61_0<=VAR2)||(LA61_0>=DECIMAL && LA61_0<=BLANK_NODE_LABEL)) ) {
            	        alt61=1;
            	    }
            	    switch (alt61) {
            	        case 1 :
            	            // IbmSparql.g:380:47: triplesTemplate
            	            {
            	            pushFollow(FOLLOW_triplesTemplate_in_quads2510);
            	            triplesTemplate144=triplesTemplate();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate144.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "quads"

    public static class quadsNotTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quadsNotTriples"
    // IbmSparql.g:383:1: quadsNotTriples : GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE ;
    public final IbmSparqlParser.quadsNotTriples_return quadsNotTriples() throws RecognitionException {
        IbmSparqlParser.quadsNotTriples_return retval = new IbmSparqlParser.quadsNotTriples_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token GRAPH145=null;
        Token OPEN_CURLY_BRACE147=null;
        Token CLOSE_CURLY_BRACE149=null;
        IbmSparqlParser.varOrIRIref_return varOrIRIref146 = null;

        IbmSparqlParser.triplesTemplate_return triplesTemplate148 = null;


        XTree GRAPH145_tree=null;
        XTree OPEN_CURLY_BRACE147_tree=null;
        XTree CLOSE_CURLY_BRACE149_tree=null;

        try {
            // IbmSparql.g:384:2: ( GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE )
            // IbmSparql.g:384:7: GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();

            GRAPH145=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_quadsNotTriples2528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GRAPH145_tree = (XTree)adaptor.create(GRAPH145);
            adaptor.addChild(root_0, GRAPH145_tree);
            }
            pushFollow(FOLLOW_varOrIRIref_in_quadsNotTriples2530);
            varOrIRIref146=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrIRIref146.getTree());
            OPEN_CURLY_BRACE147=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadsNotTriples2532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE147_tree = (XTree)adaptor.create(OPEN_CURLY_BRACE147);
            adaptor.addChild(root_0, OPEN_CURLY_BRACE147_tree);
            }
            // IbmSparql.g:384:42: ( triplesTemplate )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==IRI_REF||LA63_0==PNAME_NS||LA63_0==OPEN_BRACE||LA63_0==INTEGER||LA63_0==OPEN_SQ_BRACKET||(LA63_0>=VAR1 && LA63_0<=VAR2)||(LA63_0>=DECIMAL && LA63_0<=BLANK_NODE_LABEL)) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // IbmSparql.g:384:42: triplesTemplate
                    {
                    pushFollow(FOLLOW_triplesTemplate_in_quadsNotTriples2534);
                    triplesTemplate148=triplesTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate148.getTree());

                    }
                    break;

            }

            CLOSE_CURLY_BRACE149=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadsNotTriples2537); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE149_tree = (XTree)adaptor.create(CLOSE_CURLY_BRACE149);
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE149_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "quadsNotTriples"

    public static class triplesTemplate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesTemplate"
    // IbmSparql.g:387:1: triplesTemplate : triplesSameSubject ( DOT ( triplesTemplate )? )? ;
    public final IbmSparqlParser.triplesTemplate_return triplesTemplate() throws RecognitionException {
        IbmSparqlParser.triplesTemplate_return retval = new IbmSparqlParser.triplesTemplate_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DOT151=null;
        IbmSparqlParser.triplesSameSubject_return triplesSameSubject150 = null;

        IbmSparqlParser.triplesTemplate_return triplesTemplate152 = null;


        XTree DOT151_tree=null;

        try {
            // IbmSparql.g:388:2: ( triplesSameSubject ( DOT ( triplesTemplate )? )? )
            // IbmSparql.g:388:7: triplesSameSubject ( DOT ( triplesTemplate )? )?
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_triplesSameSubject_in_triplesTemplate2551);
            triplesSameSubject150=triplesSameSubject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesSameSubject150.getTree());
            // IbmSparql.g:388:26: ( DOT ( triplesTemplate )? )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==DOT) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // IbmSparql.g:388:28: DOT ( triplesTemplate )?
                    {
                    DOT151=(Token)match(input,DOT,FOLLOW_DOT_in_triplesTemplate2555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT151_tree = (XTree)adaptor.create(DOT151);
                    adaptor.addChild(root_0, DOT151_tree);
                    }
                    // IbmSparql.g:388:32: ( triplesTemplate )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==IRI_REF||LA64_0==PNAME_NS||LA64_0==OPEN_BRACE||LA64_0==INTEGER||LA64_0==OPEN_SQ_BRACKET||(LA64_0>=VAR1 && LA64_0<=VAR2)||(LA64_0>=DECIMAL && LA64_0<=BLANK_NODE_LABEL)) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // IbmSparql.g:388:32: triplesTemplate
                            {
                            pushFollow(FOLLOW_triplesTemplate_in_triplesTemplate2557);
                            triplesTemplate152=triplesTemplate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate152.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesTemplate"

    public static class groupGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupGraphPattern"
    // IbmSparql.g:391:1: groupGraphPattern : OPEN_CURLY_BRACE (s= subSelect | g= groupGraphPatternSub ) CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? ) ;
    public final IbmSparqlParser.groupGraphPattern_return groupGraphPattern() throws RecognitionException {
        IbmSparqlParser.groupGraphPattern_return retval = new IbmSparqlParser.groupGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_CURLY_BRACE153=null;
        Token CLOSE_CURLY_BRACE154=null;
        IbmSparqlParser.subSelect_return s = null;

        IbmSparqlParser.groupGraphPatternSub_return g = null;


        XTree OPEN_CURLY_BRACE153_tree=null;
        XTree CLOSE_CURLY_BRACE154_tree=null;
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_groupGraphPatternSub=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPatternSub");
        RewriteRuleSubtreeStream stream_subSelect=new RewriteRuleSubtreeStream(adaptor,"rule subSelect");
        try {
            // IbmSparql.g:392:2: ( OPEN_CURLY_BRACE (s= subSelect | g= groupGraphPatternSub ) CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? ) )
            // IbmSparql.g:392:7: OPEN_CURLY_BRACE (s= subSelect | g= groupGraphPatternSub ) CLOSE_CURLY_BRACE
            {
            OPEN_CURLY_BRACE153=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE153);

            // IbmSparql.g:392:24: (s= subSelect | g= groupGraphPatternSub )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==SELECT) ) {
                alt66=1;
            }
            else if ( (LA66_0==IRI_REF||LA66_0==PNAME_NS||LA66_0==OPEN_BRACE||(LA66_0>=OPEN_CURLY_BRACE && LA66_0<=CLOSE_CURLY_BRACE)||LA66_0==INTEGER||LA66_0==GRAPH||(LA66_0>=VALUES && LA66_0<=BIND)||(LA66_0>=MINUS && LA66_0<=FILTER)||LA66_0==OPEN_SQ_BRACKET||(LA66_0>=VAR1 && LA66_0<=VAR2)||(LA66_0>=DECIMAL && LA66_0<=BLANK_NODE_LABEL)) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // IbmSparql.g:392:26: s= subSelect
                    {
                    pushFollow(FOLLOW_subSelect_in_groupGraphPattern2581);
                    s=subSelect();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelect.add(s.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:392:40: g= groupGraphPatternSub
                    {
                    pushFollow(FOLLOW_groupGraphPatternSub_in_groupGraphPattern2587);
                    g=groupGraphPatternSub();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupGraphPatternSub.add(g.getTree());

                    }
                    break;

            }

            CLOSE_CURLY_BRACE154=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE154);



            // AST REWRITE
            // elements: subSelect, groupGraphPatternSub
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 394:3: -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? )
            {
                // IbmSparql.g:394:7: ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(GROUP_GRAPH_PATTERN, "GROUP_GRAPH_PATTERN"), root_1);

                // IbmSparql.g:394:30: ( subSelect )?
                if ( stream_subSelect.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelect.nextTree());

                }
                stream_subSelect.reset();
                // IbmSparql.g:394:41: ( groupGraphPatternSub )?
                if ( stream_groupGraphPatternSub.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupGraphPatternSub.nextTree());

                }
                stream_groupGraphPatternSub.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupGraphPattern"

    public static class groupGraphPatternSub_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupGraphPatternSub"
    // IbmSparql.g:397:1: groupGraphPatternSub : ( triplesBlock )? ( groupGraphPatternSubInt )* -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )* ;
    public final IbmSparqlParser.groupGraphPatternSub_return groupGraphPatternSub() throws RecognitionException {
        IbmSparqlParser.groupGraphPatternSub_return retval = new IbmSparqlParser.groupGraphPatternSub_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.triplesBlock_return triplesBlock155 = null;

        IbmSparqlParser.groupGraphPatternSubInt_return groupGraphPatternSubInt156 = null;


        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_groupGraphPatternSubInt=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPatternSubInt");
        try {
            // IbmSparql.g:398:2: ( ( triplesBlock )? ( groupGraphPatternSubInt )* -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )* )
            // IbmSparql.g:398:7: ( triplesBlock )? ( groupGraphPatternSubInt )*
            {
            // IbmSparql.g:398:7: ( triplesBlock )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==IRI_REF||LA67_0==PNAME_NS||LA67_0==OPEN_BRACE||LA67_0==INTEGER||LA67_0==OPEN_SQ_BRACKET||(LA67_0>=VAR1 && LA67_0<=VAR2)||(LA67_0>=DECIMAL && LA67_0<=BLANK_NODE_LABEL)) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // IbmSparql.g:398:7: triplesBlock
                    {
                    pushFollow(FOLLOW_triplesBlock_in_groupGraphPatternSub2625);
                    triplesBlock155=triplesBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesBlock.add(triplesBlock155.getTree());

                    }
                    break;

            }

            // IbmSparql.g:398:21: ( groupGraphPatternSubInt )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==OPEN_CURLY_BRACE||LA68_0==GRAPH||(LA68_0>=VALUES && LA68_0<=BIND)||(LA68_0>=MINUS && LA68_0<=FILTER)) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // IbmSparql.g:398:21: groupGraphPatternSubInt
            	    {
            	    pushFollow(FOLLOW_groupGraphPatternSubInt_in_groupGraphPatternSub2628);
            	    groupGraphPatternSubInt156=groupGraphPatternSubInt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_groupGraphPatternSubInt.add(groupGraphPatternSubInt156.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);



            // AST REWRITE
            // elements: groupGraphPatternSubInt, triplesBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 399:3: -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )*
            {
                // IbmSparql.g:399:7: ( ^( TRIPLES_BLOCK triplesBlock ) )?
                if ( stream_triplesBlock.hasNext() ) {
                    // IbmSparql.g:399:7: ^( TRIPLES_BLOCK triplesBlock )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLES_BLOCK, "TRIPLES_BLOCK"), root_1);

                    adaptor.addChild(root_1, stream_triplesBlock.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_triplesBlock.reset();
                // IbmSparql.g:399:38: ( groupGraphPatternSubInt )*
                while ( stream_groupGraphPatternSubInt.hasNext() ) {
                    adaptor.addChild(root_0, stream_groupGraphPatternSubInt.nextTree());

                }
                stream_groupGraphPatternSubInt.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupGraphPatternSub"

    public static class groupGraphPatternSubInt_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupGraphPatternSubInt"
    // IbmSparql.g:402:1: groupGraphPatternSubInt : graphPatternNotTriples ( DOT )? ( triplesBlock )? -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )? ;
    public final IbmSparqlParser.groupGraphPatternSubInt_return groupGraphPatternSubInt() throws RecognitionException {
        IbmSparqlParser.groupGraphPatternSubInt_return retval = new IbmSparqlParser.groupGraphPatternSubInt_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DOT158=null;
        IbmSparqlParser.graphPatternNotTriples_return graphPatternNotTriples157 = null;

        IbmSparqlParser.triplesBlock_return triplesBlock159 = null;


        XTree DOT158_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_graphPatternNotTriples=new RewriteRuleSubtreeStream(adaptor,"rule graphPatternNotTriples");
        try {
            // IbmSparql.g:403:2: ( graphPatternNotTriples ( DOT )? ( triplesBlock )? -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )? )
            // IbmSparql.g:403:7: graphPatternNotTriples ( DOT )? ( triplesBlock )?
            {
            pushFollow(FOLLOW_graphPatternNotTriples_in_groupGraphPatternSubInt2658);
            graphPatternNotTriples157=graphPatternNotTriples();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_graphPatternNotTriples.add(graphPatternNotTriples157.getTree());
            // IbmSparql.g:403:30: ( DOT )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==DOT) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // IbmSparql.g:403:30: DOT
                    {
                    DOT158=(Token)match(input,DOT,FOLLOW_DOT_in_groupGraphPatternSubInt2660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT158);


                    }
                    break;

            }

            // IbmSparql.g:403:35: ( triplesBlock )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==IRI_REF||LA70_0==PNAME_NS||LA70_0==OPEN_BRACE||LA70_0==INTEGER||LA70_0==OPEN_SQ_BRACKET||(LA70_0>=VAR1 && LA70_0<=VAR2)||(LA70_0>=DECIMAL && LA70_0<=BLANK_NODE_LABEL)) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // IbmSparql.g:403:35: triplesBlock
                    {
                    pushFollow(FOLLOW_triplesBlock_in_groupGraphPatternSubInt2663);
                    triplesBlock159=triplesBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesBlock.add(triplesBlock159.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: triplesBlock, graphPatternNotTriples
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 404:3: -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )?
            {
                adaptor.addChild(root_0, stream_graphPatternNotTriples.nextTree());
                // IbmSparql.g:404:30: ( ^( TRIPLES_BLOCK triplesBlock ) )?
                if ( stream_triplesBlock.hasNext() ) {
                    // IbmSparql.g:404:30: ^( TRIPLES_BLOCK triplesBlock )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLES_BLOCK, "TRIPLES_BLOCK"), root_1);

                    adaptor.addChild(root_1, stream_triplesBlock.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_triplesBlock.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupGraphPatternSubInt"

    public static class triplesBlock_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesBlock"
    // IbmSparql.g:407:1: triplesBlock : t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )? -> triplesSameSubjectPath ( ( triplesBlock )+ )? ;
    public final IbmSparqlParser.triplesBlock_return triplesBlock() throws RecognitionException {
        IbmSparqlParser.triplesBlock_return retval = new IbmSparqlParser.triplesBlock_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DOT160=null;
        IbmSparqlParser.triplesSameSubjectPath_return t1 = null;

        IbmSparqlParser.triplesBlock_return t2 = null;


        XTree DOT160_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_triplesSameSubjectPath=new RewriteRuleSubtreeStream(adaptor,"rule triplesSameSubjectPath");
        try {
            // IbmSparql.g:408:2: (t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )? -> triplesSameSubjectPath ( ( triplesBlock )+ )? )
            // IbmSparql.g:408:7: t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )?
            {
            pushFollow(FOLLOW_triplesSameSubjectPath_in_triplesBlock2694);
            t1=triplesSameSubjectPath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_triplesSameSubjectPath.add(t1.getTree());
            // IbmSparql.g:408:33: ( DOT (t2= triplesBlock )? )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==DOT) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // IbmSparql.g:408:35: DOT (t2= triplesBlock )?
                    {
                    DOT160=(Token)match(input,DOT,FOLLOW_DOT_in_triplesBlock2698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT160);

                    // IbmSparql.g:408:41: (t2= triplesBlock )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==IRI_REF||LA71_0==PNAME_NS||LA71_0==OPEN_BRACE||LA71_0==INTEGER||LA71_0==OPEN_SQ_BRACKET||(LA71_0>=VAR1 && LA71_0<=VAR2)||(LA71_0>=DECIMAL && LA71_0<=BLANK_NODE_LABEL)) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // IbmSparql.g:408:41: t2= triplesBlock
                            {
                            pushFollow(FOLLOW_triplesBlock_in_triplesBlock2702);
                            t2=triplesBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_triplesBlock.add(t2.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: triplesBlock, triplesSameSubjectPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 408:60: -> triplesSameSubjectPath ( ( triplesBlock )+ )?
            {
                adaptor.addChild(root_0, stream_triplesSameSubjectPath.nextTree());
                // IbmSparql.g:408:87: ( ( triplesBlock )+ )?
                if ( stream_triplesBlock.hasNext() ) {
                    if ( !(stream_triplesBlock.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_triplesBlock.hasNext() ) {
                        adaptor.addChild(root_0, stream_triplesBlock.nextTree());

                    }
                    stream_triplesBlock.reset();

                }
                stream_triplesBlock.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesBlock"

    public static class graphPatternNotTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphPatternNotTriples"
    // IbmSparql.g:411:1: graphPatternNotTriples : ( groupOrUnionGraphPattern | optionalGraphPattern | minusGraphPattern | graphGraphPattern | serviceGraphPattern | filter | bind | inlineData );
    public final IbmSparqlParser.graphPatternNotTriples_return graphPatternNotTriples() throws RecognitionException {
        IbmSparqlParser.graphPatternNotTriples_return retval = new IbmSparqlParser.graphPatternNotTriples_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.groupOrUnionGraphPattern_return groupOrUnionGraphPattern161 = null;

        IbmSparqlParser.optionalGraphPattern_return optionalGraphPattern162 = null;

        IbmSparqlParser.minusGraphPattern_return minusGraphPattern163 = null;

        IbmSparqlParser.graphGraphPattern_return graphGraphPattern164 = null;

        IbmSparqlParser.serviceGraphPattern_return serviceGraphPattern165 = null;

        IbmSparqlParser.filter_return filter166 = null;

        IbmSparqlParser.bind_return bind167 = null;

        IbmSparqlParser.inlineData_return inlineData168 = null;



        try {
            // IbmSparql.g:412:2: ( groupOrUnionGraphPattern | optionalGraphPattern | minusGraphPattern | graphGraphPattern | serviceGraphPattern | filter | bind | inlineData )
            int alt73=8;
            switch ( input.LA(1) ) {
            case OPEN_CURLY_BRACE:
                {
                alt73=1;
                }
                break;
            case OPTIONAL:
                {
                alt73=2;
                }
                break;
            case MINUS:
                {
                alt73=3;
                }
                break;
            case GRAPH:
                {
                alt73=4;
                }
                break;
            case SERVICE:
                {
                alt73=5;
                }
                break;
            case FILTER:
                {
                alt73=6;
                }
                break;
            case BIND:
                {
                alt73=7;
                }
                break;
            case VALUES:
                {
                alt73=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // IbmSparql.g:412:7: groupOrUnionGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples2733);
                    groupOrUnionGraphPattern161=groupOrUnionGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupOrUnionGraphPattern161.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:413:10: optionalGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_optionalGraphPattern_in_graphPatternNotTriples2747);
                    optionalGraphPattern162=optionalGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionalGraphPattern162.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:414:10: minusGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_minusGraphPattern_in_graphPatternNotTriples2760);
                    minusGraphPattern163=minusGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, minusGraphPattern163.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparql.g:415:10: graphGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_graphGraphPattern_in_graphPatternNotTriples2774);
                    graphGraphPattern164=graphGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphGraphPattern164.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparql.g:416:10: serviceGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_serviceGraphPattern_in_graphPatternNotTriples2788);
                    serviceGraphPattern165=serviceGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, serviceGraphPattern165.getTree());

                    }
                    break;
                case 6 :
                    // IbmSparql.g:417:10: filter
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_filter_in_graphPatternNotTriples2802);
                    filter166=filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filter166.getTree());

                    }
                    break;
                case 7 :
                    // IbmSparql.g:418:10: bind
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_bind_in_graphPatternNotTriples2816);
                    bind167=bind();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bind167.getTree());

                    }
                    break;
                case 8 :
                    // IbmSparql.g:419:10: inlineData
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_inlineData_in_graphPatternNotTriples2829);
                    inlineData168=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineData168.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphPatternNotTriples"

    public static class inlineData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineData"
    // IbmSparql.g:422:1: inlineData : VALUES dataBlock -> ^( VALUES dataBlock ) ;
    public final IbmSparqlParser.inlineData_return inlineData() throws RecognitionException {
        IbmSparqlParser.inlineData_return retval = new IbmSparqlParser.inlineData_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token VALUES169=null;
        IbmSparqlParser.dataBlock_return dataBlock170 = null;


        XTree VALUES169_tree=null;
        RewriteRuleTokenStream stream_VALUES=new RewriteRuleTokenStream(adaptor,"token VALUES");
        RewriteRuleSubtreeStream stream_dataBlock=new RewriteRuleSubtreeStream(adaptor,"rule dataBlock");
        try {
            // IbmSparql.g:423:5: ( VALUES dataBlock -> ^( VALUES dataBlock ) )
            // IbmSparql.g:423:10: VALUES dataBlock
            {
            VALUES169=(Token)match(input,VALUES,FOLLOW_VALUES_in_inlineData2849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VALUES.add(VALUES169);

            pushFollow(FOLLOW_dataBlock_in_inlineData2851);
            dataBlock170=dataBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dataBlock.add(dataBlock170.getTree());


            // AST REWRITE
            // elements: dataBlock, VALUES
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 423:27: -> ^( VALUES dataBlock )
            {
                // IbmSparql.g:423:30: ^( VALUES dataBlock )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_VALUES.nextNode(), root_1);

                adaptor.addChild(root_1, stream_dataBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineData"

    public static class dataBlock_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dataBlock"
    // IbmSparql.g:426:1: dataBlock : ( inlineDataOneVar | inlineDataFull );
    public final IbmSparqlParser.dataBlock_return dataBlock() throws RecognitionException {
        IbmSparqlParser.dataBlock_return retval = new IbmSparqlParser.dataBlock_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.inlineDataOneVar_return inlineDataOneVar171 = null;

        IbmSparqlParser.inlineDataFull_return inlineDataFull172 = null;



        try {
            // IbmSparql.g:427:5: ( inlineDataOneVar | inlineDataFull )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( ((LA74_0>=VAR1 && LA74_0<=VAR2)) ) {
                alt74=1;
            }
            else if ( (LA74_0==OPEN_BRACE) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // IbmSparql.g:427:10: inlineDataOneVar
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_inlineDataOneVar_in_dataBlock2879);
                    inlineDataOneVar171=inlineDataOneVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDataOneVar171.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:427:29: inlineDataFull
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_inlineDataFull_in_dataBlock2883);
                    inlineDataFull172=inlineDataFull();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDataFull172.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "dataBlock"

    public static class inlineDataOneVar_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineDataOneVar"
    // IbmSparql.g:430:1: inlineDataOneVar : v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA $v ( $b)* ) ;
    public final IbmSparqlParser.inlineDataOneVar_return inlineDataOneVar() throws RecognitionException {
        IbmSparqlParser.inlineDataOneVar_return retval = new IbmSparqlParser.inlineDataOneVar_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_CURLY_BRACE173=null;
        Token CLOSE_CURLY_BRACE174=null;
        List list_b=null;
        IbmSparqlParser.var_return v = null;

        RuleReturnScope b = null;
        XTree OPEN_CURLY_BRACE173_tree=null;
        XTree CLOSE_CURLY_BRACE174_tree=null;
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_dataBlockValue=new RewriteRuleSubtreeStream(adaptor,"rule dataBlockValue");
        try {
            // IbmSparql.g:431:5: (v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA $v ( $b)* ) )
            // IbmSparql.g:431:10: v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE
            {
            pushFollow(FOLLOW_var_in_inlineDataOneVar2905);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());
            OPEN_CURLY_BRACE173=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_inlineDataOneVar2907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE173);

            // IbmSparql.g:431:34: (b+= dataBlockValue )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==IRI_REF||LA75_0==PNAME_NS||LA75_0==INTEGER||LA75_0==UNDEF||(LA75_0>=DECIMAL && LA75_0<=PNAME_LN)) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // IbmSparql.g:431:34: b+= dataBlockValue
            	    {
            	    pushFollow(FOLLOW_dataBlockValue_in_inlineDataOneVar2911);
            	    b=dataBlockValue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dataBlockValue.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);

            CLOSE_CURLY_BRACE174=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataOneVar2914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE174);



            // AST REWRITE
            // elements: b, v
            // token labels: 
            // rule labels: v, retval
            // token list labels: 
            // rule list labels: b
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (XTree)adaptor.nil();
            // 431:70: -> ^( INLINE_DATA $v ( $b)* )
            {
                // IbmSparql.g:431:73: ^( INLINE_DATA $v ( $b)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INLINE_DATA, "INLINE_DATA"), root_1);

                adaptor.addChild(root_1, stream_v.nextTree());
                // IbmSparql.g:431:90: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineDataOneVar"

    public static class inlineDataFull_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineDataFull"
    // IbmSparql.g:434:1: inlineDataFull : OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA ( $v)* ( $b)* ) ;
    public final IbmSparqlParser.inlineDataFull_return inlineDataFull() throws RecognitionException {
        IbmSparqlParser.inlineDataFull_return retval = new IbmSparqlParser.inlineDataFull_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE175=null;
        Token CLOSE_BRACE176=null;
        Token OPEN_CURLY_BRACE177=null;
        Token OPEN_BRACE178=null;
        Token CLOSE_BRACE179=null;
        Token CLOSE_CURLY_BRACE180=null;
        List list_v=null;
        List list_b=null;
        RuleReturnScope v = null;
        RuleReturnScope b = null;
        XTree OPEN_BRACE175_tree=null;
        XTree CLOSE_BRACE176_tree=null;
        XTree OPEN_CURLY_BRACE177_tree=null;
        XTree OPEN_BRACE178_tree=null;
        XTree CLOSE_BRACE179_tree=null;
        XTree CLOSE_CURLY_BRACE180_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_dataBlockValue=new RewriteRuleSubtreeStream(adaptor,"rule dataBlockValue");
        try {
            // IbmSparql.g:435:5: ( OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA ( $v)* ( $b)* ) )
            // IbmSparql.g:435:10: OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE
            {
            OPEN_BRACE175=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_inlineDataFull2947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE175);

            // IbmSparql.g:435:22: (v+= var )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( ((LA76_0>=VAR1 && LA76_0<=VAR2)) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // IbmSparql.g:435:22: v+= var
            	    {
            	    pushFollow(FOLLOW_var_in_inlineDataFull2951);
            	    v=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
            	    if (list_v==null) list_v=new ArrayList();
            	    list_v.add(v.getTree());


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            CLOSE_BRACE176=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_inlineDataFull2954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE176);

            OPEN_CURLY_BRACE177=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_inlineDataFull2956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE177);

            // IbmSparql.g:435:58: ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==OPEN_BRACE) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // IbmSparql.g:435:60: OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE
            	    {
            	    OPEN_BRACE178=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_inlineDataFull2960); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE178);

            	    // IbmSparql.g:435:72: (b+= dataBlockValue )*
            	    loop77:
            	    do {
            	        int alt77=2;
            	        int LA77_0 = input.LA(1);

            	        if ( (LA77_0==IRI_REF||LA77_0==PNAME_NS||LA77_0==INTEGER||LA77_0==UNDEF||(LA77_0>=DECIMAL && LA77_0<=PNAME_LN)) ) {
            	            alt77=1;
            	        }


            	        switch (alt77) {
            	    	case 1 :
            	    	    // IbmSparql.g:435:72: b+= dataBlockValue
            	    	    {
            	    	    pushFollow(FOLLOW_dataBlockValue_in_inlineDataFull2964);
            	    	    b=dataBlockValue();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_dataBlockValue.add(b.getTree());
            	    	    if (list_b==null) list_b=new ArrayList();
            	    	    list_b.add(b.getTree());


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop77;
            	        }
            	    } while (true);

            	    CLOSE_BRACE179=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_inlineDataFull2967); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE179);


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            CLOSE_CURLY_BRACE180=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataFull2972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE180);



            // AST REWRITE
            // elements: b, v
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: v, b
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (XTree)adaptor.nil();
            // 435:124: -> ^( INLINE_DATA ( $v)* ( $b)* )
            {
                // IbmSparql.g:435:127: ^( INLINE_DATA ( $v)* ( $b)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INLINE_DATA, "INLINE_DATA"), root_1);

                // IbmSparql.g:435:141: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();
                // IbmSparql.g:435:145: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineDataFull"

    public static class dataBlockValue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dataBlockValue"
    // IbmSparql.g:438:1: dataBlockValue : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF );
    public final IbmSparqlParser.dataBlockValue_return dataBlockValue() throws RecognitionException {
        IbmSparqlParser.dataBlockValue_return retval = new IbmSparqlParser.dataBlockValue_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token UNDEF185=null;
        IbmSparqlParser.iRIref_return iRIref181 = null;

        IbmSparqlParser.rDFLiteral_return rDFLiteral182 = null;

        IbmSparqlParser.numericLiteral_return numericLiteral183 = null;

        IbmSparqlParser.booleanLiteral_return booleanLiteral184 = null;


        XTree UNDEF185_tree=null;

        try {
            // IbmSparql.g:439:2: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            int alt79=5;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt79=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt79=2;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt79=3;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt79=4;
                }
                break;
            case UNDEF:
                {
                alt79=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    // IbmSparql.g:439:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIref_in_dataBlockValue3006);
                    iRIref181=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref181.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:439:16: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_rDFLiteral_in_dataBlockValue3010);
                    rDFLiteral182=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral182.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:439:29: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_dataBlockValue3014);
                    numericLiteral183=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral183.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparql.g:439:46: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_dataBlockValue3018);
                    booleanLiteral184=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral184.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparql.g:439:63: UNDEF
                    {
                    root_0 = (XTree)adaptor.nil();

                    UNDEF185=(Token)match(input,UNDEF,FOLLOW_UNDEF_in_dataBlockValue3022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDEF185_tree = (XTree)adaptor.create(UNDEF185);
                    adaptor.addChild(root_0, UNDEF185_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "dataBlockValue"

    public static class optionalGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "optionalGraphPattern"
    // IbmSparql.g:441:1: optionalGraphPattern : OPTIONAL g= groupGraphPattern -> ^( OPTIONAL $g) ;
    public final IbmSparqlParser.optionalGraphPattern_return optionalGraphPattern() throws RecognitionException {
        IbmSparqlParser.optionalGraphPattern_return retval = new IbmSparqlParser.optionalGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPTIONAL186=null;
        IbmSparqlParser.groupGraphPattern_return g = null;


        XTree OPTIONAL186_tree=null;
        RewriteRuleTokenStream stream_OPTIONAL=new RewriteRuleTokenStream(adaptor,"token OPTIONAL");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparql.g:442:2: ( OPTIONAL g= groupGraphPattern -> ^( OPTIONAL $g) )
            // IbmSparql.g:442:7: OPTIONAL g= groupGraphPattern
            {
            OPTIONAL186=(Token)match(input,OPTIONAL,FOLLOW_OPTIONAL_in_optionalGraphPattern3035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPTIONAL.add(OPTIONAL186);

            pushFollow(FOLLOW_groupGraphPattern_in_optionalGraphPattern3039);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());


            // AST REWRITE
            // elements: OPTIONAL, g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 444:3: -> ^( OPTIONAL $g)
            {
                // IbmSparql.g:444:7: ^( OPTIONAL $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_OPTIONAL.nextNode(), root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "optionalGraphPattern"

    public static class graphGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphGraphPattern"
    // IbmSparql.g:447:1: graphGraphPattern : GRAPH v= varOrIRIref g= groupGraphPattern -> ^( GRAPH $v $g) ;
    public final IbmSparqlParser.graphGraphPattern_return graphGraphPattern() throws RecognitionException {
        IbmSparqlParser.graphGraphPattern_return retval = new IbmSparqlParser.graphGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token GRAPH187=null;
        IbmSparqlParser.varOrIRIref_return v = null;

        IbmSparqlParser.groupGraphPattern_return g = null;


        XTree GRAPH187_tree=null;
        RewriteRuleTokenStream stream_GRAPH=new RewriteRuleTokenStream(adaptor,"token GRAPH");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparql.g:448:2: ( GRAPH v= varOrIRIref g= groupGraphPattern -> ^( GRAPH $v $g) )
            // IbmSparql.g:448:7: GRAPH v= varOrIRIref g= groupGraphPattern
            {
            GRAPH187=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphGraphPattern3069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GRAPH.add(GRAPH187);

            pushFollow(FOLLOW_varOrIRIref_in_graphGraphPattern3073);
            v=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());
            pushFollow(FOLLOW_groupGraphPattern_in_graphGraphPattern3077);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());


            // AST REWRITE
            // elements: g, GRAPH, v
            // token labels: 
            // rule labels: v, g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 450:3: -> ^( GRAPH $v $g)
            {
                // IbmSparql.g:450:7: ^( GRAPH $v $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_GRAPH.nextNode(), root_1);

                adaptor.addChild(root_1, stream_v.nextTree());
                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphGraphPattern"

    public static class serviceGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "serviceGraphPattern"
    // IbmSparql.g:453:1: serviceGraphPattern : SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern -> ^( SERVICE ( $s)? $v $g) ;
    public final IbmSparqlParser.serviceGraphPattern_return serviceGraphPattern() throws RecognitionException {
        IbmSparqlParser.serviceGraphPattern_return retval = new IbmSparqlParser.serviceGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token s=null;
        Token SERVICE188=null;
        IbmSparqlParser.varOrIRIref_return v = null;

        IbmSparqlParser.groupGraphPattern_return g = null;


        XTree s_tree=null;
        XTree SERVICE188_tree=null;
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleTokenStream stream_SERVICE=new RewriteRuleTokenStream(adaptor,"token SERVICE");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparql.g:455:2: ( SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern -> ^( SERVICE ( $s)? $v $g) )
            // IbmSparql.g:455:7: SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern
            {
            SERVICE188=(Token)match(input,SERVICE,FOLLOW_SERVICE_in_serviceGraphPattern3119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SERVICE.add(SERVICE188);

            // IbmSparql.g:455:16: (s= SILENT )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==SILENT) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // IbmSparql.g:455:16: s= SILENT
                    {
                    s=(Token)match(input,SILENT,FOLLOW_SILENT_in_serviceGraphPattern3123); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SILENT.add(s);


                    }
                    break;

            }

            pushFollow(FOLLOW_varOrIRIref_in_serviceGraphPattern3128);
            v=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());
            pushFollow(FOLLOW_groupGraphPattern_in_serviceGraphPattern3132);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());


            // AST REWRITE
            // elements: SERVICE, g, s, v
            // token labels: s
            // rule labels: v, g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 457:3: -> ^( SERVICE ( $s)? $v $g)
            {
                // IbmSparql.g:457:7: ^( SERVICE ( $s)? $v $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_SERVICE.nextNode(), root_1);

                // IbmSparql.g:457:19: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_v.nextTree());
                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               ((XTree)retval.tree).matched = input.toString(retval.start,input.LT(-1)); 
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "serviceGraphPattern"

    public static class bind_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bind"
    // IbmSparql.g:460:1: bind : BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( BIND $v $e) ;
    public final IbmSparqlParser.bind_return bind() throws RecognitionException {
        IbmSparqlParser.bind_return retval = new IbmSparqlParser.bind_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token BIND189=null;
        Token OPEN_BRACE190=null;
        Token AS191=null;
        Token CLOSE_BRACE192=null;
        IbmSparqlParser.expression_return e = null;

        IbmSparqlParser.var_return v = null;


        XTree BIND189_tree=null;
        XTree OPEN_BRACE190_tree=null;
        XTree AS191_tree=null;
        XTree CLOSE_BRACE192_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // IbmSparql.g:461:2: ( BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( BIND $v $e) )
            // IbmSparql.g:461:7: BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE
            {
            BIND189=(Token)match(input,BIND,FOLLOW_BIND_in_bind3172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND189);

            OPEN_BRACE190=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bind3174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE190);

            pushFollow(FOLLOW_expression_in_bind3178);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());
            AS191=(Token)match(input,AS,FOLLOW_AS_in_bind3180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS191);

            pushFollow(FOLLOW_var_in_bind3184);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());
            CLOSE_BRACE192=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bind3186); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE192);



            // AST REWRITE
            // elements: BIND, e, v
            // token labels: 
            // rule labels: v, retval, e
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 463:3: -> ^( BIND $v $e)
            {
                // IbmSparql.g:463:7: ^( BIND $v $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_BIND.nextNode(), root_1);

                adaptor.addChild(root_1, stream_v.nextTree());
                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "bind"

    public static class groupOrUnionGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupOrUnionGraphPattern"
    // IbmSparql.g:466:1: groupOrUnionGraphPattern : g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1) ;
    public final IbmSparqlParser.groupOrUnionGraphPattern_return groupOrUnionGraphPattern() throws RecognitionException {
        IbmSparqlParser.groupOrUnionGraphPattern_return retval = new IbmSparqlParser.groupOrUnionGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token UNION193=null;
        List list_g2=null;
        IbmSparqlParser.groupGraphPattern_return g1 = null;

        RuleReturnScope g2 = null;
        XTree UNION193_tree=null;
        RewriteRuleTokenStream stream_UNION=new RewriteRuleTokenStream(adaptor,"token UNION");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparql.g:467:2: (g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1) )
            // IbmSparql.g:467:7: g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1)
            {
            pushFollow(FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3223);
            g1=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g1.getTree());
            // IbmSparql.g:467:28: ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1)
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==UNION) ) {
                alt82=1;
            }
            else if ( (LA82_0==IRI_REF||LA82_0==PNAME_NS||LA82_0==OPEN_BRACE||(LA82_0>=OPEN_CURLY_BRACE && LA82_0<=CLOSE_CURLY_BRACE)||LA82_0==INTEGER||LA82_0==GRAPH||(LA82_0>=DOT && LA82_0<=BIND)||(LA82_0>=MINUS && LA82_0<=FILTER)||LA82_0==OPEN_SQ_BRACKET||(LA82_0>=VAR1 && LA82_0<=VAR2)||(LA82_0>=DECIMAL && LA82_0<=BLANK_NODE_LABEL)) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // IbmSparql.g:467:30: ( UNION g2+= groupGraphPattern )+
                    {
                    // IbmSparql.g:467:30: ( UNION g2+= groupGraphPattern )+
                    int cnt81=0;
                    loop81:
                    do {
                        int alt81=2;
                        int LA81_0 = input.LA(1);

                        if ( (LA81_0==UNION) ) {
                            alt81=1;
                        }


                        switch (alt81) {
                    	case 1 :
                    	    // IbmSparql.g:467:32: UNION g2+= groupGraphPattern
                    	    {
                    	    UNION193=(Token)match(input,UNION,FOLLOW_UNION_in_groupOrUnionGraphPattern3229); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_UNION.add(UNION193);

                    	    pushFollow(FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3233);
                    	    g2=groupGraphPattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_groupGraphPattern.add(g2.getTree());
                    	    if (list_g2==null) list_g2=new ArrayList();
                    	    list_g2.add(g2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt81 >= 1 ) break loop81;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(81, input);
                                throw eee;
                        }
                        cnt81++;
                    } while (true);



                    // AST REWRITE
                    // elements: g1, UNION, g2
                    // token labels: 
                    // rule labels: retval, g1
                    // token list labels: 
                    // rule list labels: g2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_g1=new RewriteRuleSubtreeStream(adaptor,"rule g1",g1!=null?g1.tree:null);
                    RewriteRuleSubtreeStream stream_g2=new RewriteRuleSubtreeStream(adaptor,"token g2",list_g2);
                    root_0 = (XTree)adaptor.nil();
                    // 467:63: -> ^( UNION $g1 ( $g2)+ )
                    {
                        // IbmSparql.g:467:66: ^( UNION $g1 ( $g2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_UNION.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_g1.nextTree());
                        if ( !(stream_g2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_g2.hasNext() ) {
                            adaptor.addChild(root_1, stream_g2.nextTree());

                        }
                        stream_g2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:467:90: 
                    {

                    // AST REWRITE
                    // elements: g1
                    // token labels: 
                    // rule labels: retval, g1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_g1=new RewriteRuleSubtreeStream(adaptor,"rule g1",g1!=null?g1.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 467:90: -> $g1
                    {
                        adaptor.addChild(root_0, stream_g1.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupOrUnionGraphPattern"

    public static class minusGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minusGraphPattern"
    // IbmSparql.g:470:1: minusGraphPattern : MINUS n= groupGraphPattern -> ^( MINUS $n) ;
    public final IbmSparqlParser.minusGraphPattern_return minusGraphPattern() throws RecognitionException {
        IbmSparqlParser.minusGraphPattern_return retval = new IbmSparqlParser.minusGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token MINUS194=null;
        IbmSparqlParser.groupGraphPattern_return n = null;


        XTree MINUS194_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparql.g:471:5: ( MINUS n= groupGraphPattern -> ^( MINUS $n) )
            // IbmSparql.g:471:10: MINUS n= groupGraphPattern
            {
            MINUS194=(Token)match(input,MINUS,FOLLOW_MINUS_in_minusGraphPattern3280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(MINUS194);

            pushFollow(FOLLOW_groupGraphPattern_in_minusGraphPattern3284);
            n=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(n.getTree());


            // AST REWRITE
            // elements: n, MINUS
            // token labels: 
            // rule labels: retval, n
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 471:36: -> ^( MINUS $n)
            {
                // IbmSparql.g:471:39: ^( MINUS $n)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_MINUS.nextNode(), root_1);

                adaptor.addChild(root_1, stream_n.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "minusGraphPattern"

    public static class filter_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "filter"
    // IbmSparql.g:474:1: filter : FILTER c= constraint -> ^( FILTER $c) ;
    public final IbmSparqlParser.filter_return filter() throws RecognitionException {
        IbmSparqlParser.filter_return retval = new IbmSparqlParser.filter_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token FILTER195=null;
        IbmSparqlParser.constraint_return c = null;


        XTree FILTER195_tree=null;
        RewriteRuleTokenStream stream_FILTER=new RewriteRuleTokenStream(adaptor,"token FILTER");
        RewriteRuleSubtreeStream stream_constraint=new RewriteRuleSubtreeStream(adaptor,"rule constraint");
        try {
            // IbmSparql.g:475:2: ( FILTER c= constraint -> ^( FILTER $c) )
            // IbmSparql.g:475:7: FILTER c= constraint
            {
            FILTER195=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter3310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FILTER.add(FILTER195);

            pushFollow(FOLLOW_constraint_in_filter3314);
            c=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constraint.add(c.getTree());


            // AST REWRITE
            // elements: c, FILTER
            // token labels: 
            // rule labels: retval, c
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 477:3: -> ^( FILTER $c)
            {
                // IbmSparql.g:477:7: ^( FILTER $c)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_FILTER.nextNode(), root_1);

                adaptor.addChild(root_1, stream_c.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "filter"

    public static class constraint_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint"
    // IbmSparql.g:480:1: constraint : ( brackettedExpression | builtInCall | functionCall );
    public final IbmSparqlParser.constraint_return constraint() throws RecognitionException {
        IbmSparqlParser.constraint_return retval = new IbmSparqlParser.constraint_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.brackettedExpression_return brackettedExpression196 = null;

        IbmSparqlParser.builtInCall_return builtInCall197 = null;

        IbmSparqlParser.functionCall_return functionCall198 = null;



        try {
            // IbmSparql.g:481:2: ( brackettedExpression | builtInCall | functionCall )
            int alt83=3;
            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt83=1;
                }
                break;
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case UUID:
            case STRUUID:
            case MD5:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
                {
                alt83=2;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt83=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }

            switch (alt83) {
                case 1 :
                    // IbmSparql.g:481:7: brackettedExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_brackettedExpression_in_constraint3345);
                    brackettedExpression196=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression196.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:481:30: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_builtInCall_in_constraint3349);
                    builtInCall197=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall197.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:481:44: functionCall
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_functionCall_in_constraint3353);
                    functionCall198=functionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCall198.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraint"

    public static class functionCall_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionCall"
    // IbmSparql.g:484:1: functionCall : i= iRIref a= argList -> ^( FUNCTION $i $a) ;
    public final IbmSparqlParser.functionCall_return functionCall() throws RecognitionException {
        IbmSparqlParser.functionCall_return retval = new IbmSparqlParser.functionCall_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.iRIref_return i = null;

        IbmSparqlParser.argList_return a = null;


        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
        try {
            // IbmSparql.g:485:2: (i= iRIref a= argList -> ^( FUNCTION $i $a) )
            // IbmSparql.g:485:7: i= iRIref a= argList
            {
            pushFollow(FOLLOW_iRIref_in_functionCall3369);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());
            pushFollow(FOLLOW_argList_in_functionCall3373);
            a=argList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_argList.add(a.getTree());


            // AST REWRITE
            // elements: i, a
            // token labels: 
            // rule labels: retval, a, i
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 487:3: -> ^( FUNCTION $i $a)
            {
                // IbmSparql.g:487:7: ^( FUNCTION $i $a)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_i.nextTree());
                adaptor.addChild(root_1, stream_a.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "functionCall"

    public static class argList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argList"
    // IbmSparql.g:490:1: argList : ( nil -> NIL | OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> ( $d)? $e1 ( $e2)* );
    public final IbmSparqlParser.argList_return argList() throws RecognitionException {
        IbmSparqlParser.argList_return retval = new IbmSparqlParser.argList_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token d=null;
        Token OPEN_BRACE200=null;
        Token COMMA201=null;
        Token CLOSE_BRACE202=null;
        List list_e2=null;
        IbmSparqlParser.expression_return e1 = null;

        IbmSparqlParser.nil_return nil199 = null;

        RuleReturnScope e2 = null;
        XTree d_tree=null;
        XTree OPEN_BRACE200_tree=null;
        XTree COMMA201_tree=null;
        XTree CLOSE_BRACE202_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try {
            // IbmSparql.g:491:2: ( nil -> NIL | OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> ( $d)? $e1 ( $e2)* )
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==OPEN_BRACE) ) {
                int LA86_1 = input.LA(2);

                if ( (LA86_1==CLOSE_BRACE) ) {
                    alt86=1;
                }
                else if ( (LA86_1==IRI_REF||LA86_1==PNAME_NS||LA86_1==DISTINCT||LA86_1==OPEN_BRACE||LA86_1==INTEGER||(LA86_1>=VAR1 && LA86_1<=VAR2)||(LA86_1>=NOT && LA86_1<=GROUP_CONCAT)||(LA86_1>=DECIMAL && LA86_1<=PNAME_LN)||(LA86_1>=257 && LA86_1<=258)||LA86_1==263) ) {
                    alt86=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    // IbmSparql.g:491:7: nil
                    {
                    pushFollow(FOLLOW_nil_in_argList3406);
                    nil199=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil199.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 491:13: -> NIL
                    {
                        adaptor.addChild(root_0, (XTree)adaptor.create(NIL, "NIL"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:492:7: OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE
                    {
                    OPEN_BRACE200=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_argList3421); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE200);

                    // IbmSparql.g:492:19: (d= DISTINCT )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==DISTINCT) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // IbmSparql.g:492:19: d= DISTINCT
                            {
                            d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_argList3425); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_argList3430);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
                    // IbmSparql.g:492:44: ( COMMA e2+= expression )*
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( (LA85_0==COMMA) ) {
                            alt85=1;
                        }


                        switch (alt85) {
                    	case 1 :
                    	    // IbmSparql.g:492:46: COMMA e2+= expression
                    	    {
                    	    COMMA201=(Token)match(input,COMMA,FOLLOW_COMMA_in_argList3434); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA201);

                    	    pushFollow(FOLLOW_expression_in_argList3438);
                    	    e2=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    	    if (list_e2==null) list_e2=new ArrayList();
                    	    list_e2.add(e2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop85;
                        }
                    } while (true);

                    CLOSE_BRACE202=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_argList3443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE202);



                    // AST REWRITE
                    // elements: d, e2, e1
                    // token labels: d
                    // rule labels: retval, e1
                    // token list labels: 
                    // rule list labels: e2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"token e2",list_e2);
                    root_0 = (XTree)adaptor.nil();
                    // 493:10: -> ( $d)? $e1 ( $e2)*
                    {
                        // IbmSparql.g:493:14: ( $d)?
                        if ( stream_d.hasNext() ) {
                            adaptor.addChild(root_0, stream_d.nextNode());

                        }
                        stream_d.reset();
                        adaptor.addChild(root_0, stream_e1.nextTree());
                        // IbmSparql.g:493:23: ( $e2)*
                        while ( stream_e2.hasNext() ) {
                            adaptor.addChild(root_0, stream_e2.nextTree());

                        }
                        stream_e2.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "argList"

    public static class expressionList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // IbmSparql.g:496:1: expressionList : ( nil -> NIL | OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> $e1 ( $e2)* );
    public final IbmSparqlParser.expressionList_return expressionList() throws RecognitionException {
        IbmSparqlParser.expressionList_return retval = new IbmSparqlParser.expressionList_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE204=null;
        Token COMMA205=null;
        Token CLOSE_BRACE206=null;
        List list_e2=null;
        IbmSparqlParser.expression_return e1 = null;

        IbmSparqlParser.nil_return nil203 = null;

        RuleReturnScope e2 = null;
        XTree OPEN_BRACE204_tree=null;
        XTree COMMA205_tree=null;
        XTree CLOSE_BRACE206_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try {
            // IbmSparql.g:497:2: ( nil -> NIL | OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> $e1 ( $e2)* )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==OPEN_BRACE) ) {
                int LA88_1 = input.LA(2);

                if ( (LA88_1==CLOSE_BRACE) ) {
                    alt88=1;
                }
                else if ( (LA88_1==IRI_REF||LA88_1==PNAME_NS||LA88_1==OPEN_BRACE||LA88_1==INTEGER||(LA88_1>=VAR1 && LA88_1<=VAR2)||(LA88_1>=NOT && LA88_1<=GROUP_CONCAT)||(LA88_1>=DECIMAL && LA88_1<=PNAME_LN)||(LA88_1>=257 && LA88_1<=258)||LA88_1==263) ) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    // IbmSparql.g:497:7: nil
                    {
                    pushFollow(FOLLOW_nil_in_expressionList3481);
                    nil203=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil203.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 497:13: -> NIL
                    {
                        adaptor.addChild(root_0, (XTree)adaptor.create(NIL, "NIL"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:498:7: OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE
                    {
                    OPEN_BRACE204=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_expressionList3496); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE204);

                    pushFollow(FOLLOW_expression_in_expressionList3500);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
                    // IbmSparql.g:498:32: ( COMMA e2+= expression )*
                    loop87:
                    do {
                        int alt87=2;
                        int LA87_0 = input.LA(1);

                        if ( (LA87_0==COMMA) ) {
                            alt87=1;
                        }


                        switch (alt87) {
                    	case 1 :
                    	    // IbmSparql.g:498:34: COMMA e2+= expression
                    	    {
                    	    COMMA205=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList3504); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA205);

                    	    pushFollow(FOLLOW_expression_in_expressionList3508);
                    	    e2=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    	    if (list_e2==null) list_e2=new ArrayList();
                    	    list_e2.add(e2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop87;
                        }
                    } while (true);

                    CLOSE_BRACE206=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_expressionList3513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE206);



                    // AST REWRITE
                    // elements: e2, e1
                    // token labels: 
                    // rule labels: retval, e1
                    // token list labels: 
                    // rule list labels: e2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"token e2",list_e2);
                    root_0 = (XTree)adaptor.nil();
                    // 499:13: -> $e1 ( $e2)*
                    {
                        adaptor.addChild(root_0, stream_e1.nextTree());
                        // IbmSparql.g:499:22: ( $e2)*
                        while ( stream_e2.hasNext() ) {
                            adaptor.addChild(root_0, stream_e2.nextTree());

                        }
                        stream_e2.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class constructTemplate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructTemplate"
    // IbmSparql.g:502:1: constructTemplate : OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE ;
    public final IbmSparqlParser.constructTemplate_return constructTemplate() throws RecognitionException {
        IbmSparqlParser.constructTemplate_return retval = new IbmSparqlParser.constructTemplate_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_CURLY_BRACE207=null;
        Token CLOSE_CURLY_BRACE209=null;
        IbmSparqlParser.constructTriples_return constructTriples208 = null;


        XTree OPEN_CURLY_BRACE207_tree=null;
        XTree CLOSE_CURLY_BRACE209_tree=null;

        try {
            // IbmSparql.g:503:2: ( OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE )
            // IbmSparql.g:503:7: OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();

            OPEN_CURLY_BRACE207=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate3550); if (state.failed) return retval;
            // IbmSparql.g:503:25: ( constructTriples )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==IRI_REF||LA89_0==PNAME_NS||LA89_0==OPEN_BRACE||LA89_0==INTEGER||LA89_0==OPEN_SQ_BRACKET||(LA89_0>=VAR1 && LA89_0<=VAR2)||(LA89_0>=DECIMAL && LA89_0<=BLANK_NODE_LABEL)) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // IbmSparql.g:503:25: constructTriples
                    {
                    pushFollow(FOLLOW_constructTriples_in_constructTemplate3553);
                    constructTriples208=constructTriples();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructTriples208.getTree());

                    }
                    break;

            }

            CLOSE_CURLY_BRACE209=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate3556); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructTemplate"

    public static class constructTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructTriples"
    // IbmSparql.g:506:1: constructTriples : triplesSameSubject ( DOT ( constructTriples )? )? ;
    public final IbmSparqlParser.constructTriples_return constructTriples() throws RecognitionException {
        IbmSparqlParser.constructTriples_return retval = new IbmSparqlParser.constructTriples_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DOT211=null;
        IbmSparqlParser.triplesSameSubject_return triplesSameSubject210 = null;

        IbmSparqlParser.constructTriples_return constructTriples212 = null;


        XTree DOT211_tree=null;

        try {
            // IbmSparql.g:507:2: ( triplesSameSubject ( DOT ( constructTriples )? )? )
            // IbmSparql.g:507:7: triplesSameSubject ( DOT ( constructTriples )? )?
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_triplesSameSubject_in_constructTriples3571);
            triplesSameSubject210=triplesSameSubject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesSameSubject210.getTree());
            // IbmSparql.g:507:26: ( DOT ( constructTriples )? )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==DOT) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // IbmSparql.g:507:28: DOT ( constructTriples )?
                    {
                    DOT211=(Token)match(input,DOT,FOLLOW_DOT_in_constructTriples3575); if (state.failed) return retval;
                    // IbmSparql.g:507:33: ( constructTriples )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==IRI_REF||LA90_0==PNAME_NS||LA90_0==OPEN_BRACE||LA90_0==INTEGER||LA90_0==OPEN_SQ_BRACKET||(LA90_0>=VAR1 && LA90_0<=VAR2)||(LA90_0>=DECIMAL && LA90_0<=BLANK_NODE_LABEL)) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // IbmSparql.g:507:33: constructTriples
                            {
                            pushFollow(FOLLOW_constructTriples_in_constructTriples3578);
                            constructTriples212=constructTriples();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructTriples212.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructTriples"

    public static class triplesSameSubject_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesSameSubject"
    // IbmSparql.g:510:1: triplesSameSubject : ( (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmpty | (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) );
    public final IbmSparqlParser.triplesSameSubject_return triplesSameSubject() throws RecognitionException {
        IbmSparqlParser.triplesSameSubject_return retval = new IbmSparqlParser.triplesSameSubject_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.varOrTerm_return s1 = null;

        IbmSparqlParser.propertyListNotEmpty_return p1 = null;

        IbmSparqlParser.triplesNode_return s2 = null;

        IbmSparqlParser.propertyList_return p2 = null;


        RewriteRuleSubtreeStream stream_varOrTerm=new RewriteRuleSubtreeStream(adaptor,"rule varOrTerm");
        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        RewriteRuleSubtreeStream stream_triplesNode=new RewriteRuleSubtreeStream(adaptor,"rule triplesNode");
        RewriteRuleSubtreeStream stream_propertyList=new RewriteRuleSubtreeStream(adaptor,"rule propertyList");
        try {
            // IbmSparql.g:511:2: ( (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmpty | (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) )
            int alt92=2;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt92=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA92_2 = input.LA(2);

                if ( (LA92_2==CLOSE_SQ_BRACKET) ) {
                    alt92=1;
                }
                else if ( (LA92_2==IRI_REF||LA92_2==PNAME_NS||(LA92_2>=VAR1 && LA92_2<=VAR2)||LA92_2==PNAME_LN||LA92_2==252) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 2, input);

                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA92_3 = input.LA(2);

                if ( (LA92_3==CLOSE_BRACE) ) {
                    alt92=1;
                }
                else if ( (LA92_3==IRI_REF||LA92_3==PNAME_NS||LA92_3==OPEN_BRACE||LA92_3==INTEGER||LA92_3==OPEN_SQ_BRACKET||(LA92_3>=VAR1 && LA92_3<=VAR2)||(LA92_3>=DECIMAL && LA92_3<=BLANK_NODE_LABEL)) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // IbmSparql.g:511:6: (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] )
                    {
                    // IbmSparql.g:511:6: (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] )
                    // IbmSparql.g:511:7: s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1]
                    {
                    pushFollow(FOLLOW_varOrTerm_in_triplesSameSubject3598);
                    s1=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrTerm.add(s1.getTree());
                    pushFollow(FOLLOW_propertyListNotEmpty_in_triplesSameSubject3602);
                    p1=propertyListNotEmpty((CommonTree)(s1!=null?((XTree)s1.tree):null), 1);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmpty.add(p1.getTree());

                    }



                    // AST REWRITE
                    // elements: propertyListNotEmpty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 511:72: -> propertyListNotEmpty
                    {
                        adaptor.addChild(root_0, stream_propertyListNotEmpty.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:512:6: (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] )
                    {
                    // IbmSparql.g:512:6: (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] )
                    // IbmSparql.g:512:7: s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2]
                    {
                    pushFollow(FOLLOW_triplesNode_in_triplesSameSubject3622);
                    s2=triplesNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesNode.add(s2.getTree());
                    pushFollow(FOLLOW_propertyList_in_triplesSameSubject3626);
                    p2=propertyList((CommonTree)(s2!=null?((XTree)s2.tree):null), 2);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyList.add(p2.getTree());

                    }



                    // AST REWRITE
                    // elements: p2, s2
                    // token labels: 
                    // rule labels: retval, s2, p2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_p2=new RewriteRuleSubtreeStream(adaptor,"rule p2",p2!=null?p2.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 512:72: -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                    {
                        // IbmSparql.g:512:76: ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLE2, "TRIPLE2"), root_1);

                        // IbmSparql.g:512:87: ^( SUBJECT $s2)
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SUBJECT, "SUBJECT"), root_2);

                        adaptor.addChild(root_2, stream_s2.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // IbmSparql.g:512:104: ( $p2)?
                        if ( stream_p2.hasNext() ) {
                            adaptor.addChild(root_1, stream_p2.nextTree());

                        }
                        stream_p2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesSameSubject"

    public static class propertyListNotEmpty_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyListNotEmpty"
    // IbmSparql.g:515:1: propertyListNotEmpty[CommonTree s, int t] : p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )* -> ( objectList )+ ;
    public final IbmSparqlParser.propertyListNotEmpty_return propertyListNotEmpty(CommonTree s, int t) throws RecognitionException {
        IbmSparqlParser.propertyListNotEmpty_return retval = new IbmSparqlParser.propertyListNotEmpty_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token SEMICOLON214=null;
        IbmSparqlParser.verb_return p1 = null;

        IbmSparqlParser.verb_return p2 = null;

        IbmSparqlParser.objectList_return objectList213 = null;

        IbmSparqlParser.objectList_return objectList215 = null;


        XTree SEMICOLON214_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_verb=new RewriteRuleSubtreeStream(adaptor,"rule verb");
        RewriteRuleSubtreeStream stream_objectList=new RewriteRuleSubtreeStream(adaptor,"rule objectList");
        try {
            // IbmSparql.g:516:2: (p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )* -> ( objectList )+ )
            // IbmSparql.g:516:6: p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )*
            {
            pushFollow(FOLLOW_verb_in_propertyListNotEmpty3675);
            p1=verb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verb.add(p1.getTree());
            pushFollow(FOLLOW_objectList_in_propertyListNotEmpty3677);
            objectList213=objectList(s, (CommonTree)(p1!=null?((XTree)p1.tree):null), t);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_objectList.add(objectList213.getTree());
            // IbmSparql.g:517:3: ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==SEMICOLON) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // IbmSparql.g:517:5: SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )?
            	    {
            	    SEMICOLON214=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_propertyListNotEmpty3684); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON214);

            	    // IbmSparql.g:517:15: (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )?
            	    int alt93=2;
            	    int LA93_0 = input.LA(1);

            	    if ( (LA93_0==IRI_REF||LA93_0==PNAME_NS||(LA93_0>=VAR1 && LA93_0<=VAR2)||LA93_0==PNAME_LN||LA93_0==252) ) {
            	        alt93=1;
            	    }
            	    switch (alt93) {
            	        case 1 :
            	            // IbmSparql.g:517:16: p2= verb objectList[$s, (CommonTree)$p2.tree, $t]
            	            {
            	            pushFollow(FOLLOW_verb_in_propertyListNotEmpty3689);
            	            p2=verb();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_verb.add(p2.getTree());
            	            pushFollow(FOLLOW_objectList_in_propertyListNotEmpty3691);
            	            objectList215=objectList(s, (CommonTree)(p2!=null?((XTree)p2.tree):null), t);

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_objectList.add(objectList215.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);



            // AST REWRITE
            // elements: objectList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 519:3: -> ( objectList )+
            {
                if ( !(stream_objectList.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectList.hasNext() ) {
                    adaptor.addChild(root_0, stream_objectList.nextTree());

                }
                stream_objectList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyListNotEmpty"

    public static class propertyList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyList"
    // IbmSparql.g:522:1: propertyList[CommonTree s, int t] : ( propertyListNotEmpty[$s, $t] )? ;
    public final IbmSparqlParser.propertyList_return propertyList(CommonTree s, int t) throws RecognitionException {
        IbmSparqlParser.propertyList_return retval = new IbmSparqlParser.propertyList_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.propertyListNotEmpty_return propertyListNotEmpty216 = null;



        try {
            // IbmSparql.g:523:2: ( ( propertyListNotEmpty[$s, $t] )? )
            // IbmSparql.g:523:7: ( propertyListNotEmpty[$s, $t] )?
            {
            root_0 = (XTree)adaptor.nil();

            // IbmSparql.g:523:7: ( propertyListNotEmpty[$s, $t] )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==IRI_REF||LA95_0==PNAME_NS||(LA95_0>=VAR1 && LA95_0<=VAR2)||LA95_0==PNAME_LN||LA95_0==252) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // IbmSparql.g:523:7: propertyListNotEmpty[$s, $t]
                    {
                    pushFollow(FOLLOW_propertyListNotEmpty_in_propertyList3723);
                    propertyListNotEmpty216=propertyListNotEmpty(s, t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyListNotEmpty216.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyList"

    public static class objectList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectList"
    // IbmSparql.g:526:1: objectList[CommonTree s, CommonTree p, int t] : object ( COMMA object )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+ ;
    public final IbmSparqlParser.objectList_return objectList(CommonTree s, CommonTree p, int t) throws RecognitionException {
        IbmSparqlParser.objectList_return retval = new IbmSparqlParser.objectList_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token COMMA218=null;
        IbmSparqlParser.object_return object217 = null;

        IbmSparqlParser.object_return object219 = null;


        XTree COMMA218_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_object=new RewriteRuleSubtreeStream(adaptor,"rule object");
        try {
            // IbmSparql.g:527:2: ( object ( COMMA object )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+ )
            // IbmSparql.g:528:3: object ( COMMA object )*
            {
            pushFollow(FOLLOW_object_in_objectList3743);
            object217=object();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object.add(object217.getTree());
            // IbmSparql.g:528:10: ( COMMA object )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==COMMA) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // IbmSparql.g:528:11: COMMA object
            	    {
            	    COMMA218=(Token)match(input,COMMA,FOLLOW_COMMA_in_objectList3746); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA218);

            	    pushFollow(FOLLOW_object_in_objectList3748);
            	    object219=object();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_object.add(object219.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);



            // AST REWRITE
            // elements: object, object, object
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 530:3: -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+
            if (t==3) {
                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // IbmSparql.g:530:17: ^( PREDICATE )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_1);

                    adaptor.addChild(root_1, p);

                    adaptor.addChild(root_0, root_1);
                    }
                    // IbmSparql.g:530:35: ^( VALUE object )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_1);

                    adaptor.addChild(root_1, stream_object.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_object.reset();

            }
            else // 531:3: -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ )
            if (t==2) {
                // IbmSparql.g:531:15: ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST"), root_1);

                // IbmSparql.g:531:32: ^( PREDICATE )
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_2);

                adaptor.addChild(root_2, p);

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // IbmSparql.g:531:51: ^( VALUE object )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_2);

                    adaptor.addChild(root_2, stream_object.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_object.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 532:3: -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+
            {
                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // IbmSparql.g:532:10: ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLE, "TRIPLE"), root_1);

                    // IbmSparql.g:532:20: ^( SUBJECT )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SUBJECT, "SUBJECT"), root_2);

                    adaptor.addChild(root_2, s);

                    adaptor.addChild(root_1, root_2);
                    }
                    // IbmSparql.g:532:36: ^( PREDICATE )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_2);

                    adaptor.addChild(root_2, p);

                    adaptor.addChild(root_1, root_2);
                    }
                    // IbmSparql.g:532:54: ^( VALUE object )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_2);

                    adaptor.addChild(root_2, stream_object.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_object.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "objectList"

    public static class objectListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectListPath"
    // IbmSparql.g:535:1: objectListPath[CommonTree s, CommonTree p, int t] : objectPath ( COMMA objectPath )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+ ;
    public final IbmSparqlParser.objectListPath_return objectListPath(CommonTree s, CommonTree p, int t) throws RecognitionException {
        IbmSparqlParser.objectListPath_return retval = new IbmSparqlParser.objectListPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token COMMA221=null;
        IbmSparqlParser.objectPath_return objectPath220 = null;

        IbmSparqlParser.objectPath_return objectPath222 = null;


        XTree COMMA221_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_objectPath=new RewriteRuleSubtreeStream(adaptor,"rule objectPath");
        try {
            // IbmSparql.g:536:2: ( objectPath ( COMMA objectPath )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+ )
            // IbmSparql.g:537:3: objectPath ( COMMA objectPath )*
            {
            pushFollow(FOLLOW_objectPath_in_objectListPath3857);
            objectPath220=objectPath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_objectPath.add(objectPath220.getTree());
            // IbmSparql.g:537:14: ( COMMA objectPath )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // IbmSparql.g:537:15: COMMA objectPath
            	    {
            	    COMMA221=(Token)match(input,COMMA,FOLLOW_COMMA_in_objectListPath3860); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA221);

            	    pushFollow(FOLLOW_objectPath_in_objectListPath3862);
            	    objectPath222=objectPath();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_objectPath.add(objectPath222.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);



            // AST REWRITE
            // elements: objectPath, objectPath, objectPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 539:3: -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+
            if (t==3) {
                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // IbmSparql.g:539:17: ^( PREDICATE )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_1);

                    adaptor.addChild(root_1, p);

                    adaptor.addChild(root_0, root_1);
                    }
                    // IbmSparql.g:539:35: ^( VALUE objectPath )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_1);

                    adaptor.addChild(root_1, stream_objectPath.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_objectPath.reset();

            }
            else // 540:3: -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ )
            if (t==2) {
                // IbmSparql.g:540:15: ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST"), root_1);

                // IbmSparql.g:540:32: ^( PREDICATE )
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_2);

                adaptor.addChild(root_2, p);

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // IbmSparql.g:540:51: ^( VALUE objectPath )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_2);

                    adaptor.addChild(root_2, stream_objectPath.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_objectPath.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 541:3: -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+
            {
                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // IbmSparql.g:541:10: ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLE, "TRIPLE"), root_1);

                    // IbmSparql.g:541:20: ^( SUBJECT )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SUBJECT, "SUBJECT"), root_2);

                    adaptor.addChild(root_2, s);

                    adaptor.addChild(root_1, root_2);
                    }
                    // IbmSparql.g:541:36: ^( PREDICATE )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_2);

                    adaptor.addChild(root_2, p);

                    adaptor.addChild(root_1, root_2);
                    }
                    // IbmSparql.g:541:54: ^( VALUE objectPath )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_2);

                    adaptor.addChild(root_2, stream_objectPath.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_objectPath.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "objectListPath"

    public static class object_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object"
    // IbmSparql.g:544:1: object : graphNode ;
    public final IbmSparqlParser.object_return object() throws RecognitionException {
        IbmSparqlParser.object_return retval = new IbmSparqlParser.object_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.graphNode_return graphNode223 = null;



        try {
            // IbmSparql.g:545:2: ( graphNode )
            // IbmSparql.g:545:7: graphNode
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_graphNode_in_object3967);
            graphNode223=graphNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphNode223.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "object"

    public static class objectPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectPath"
    // IbmSparql.g:548:1: objectPath : graphNodePath ;
    public final IbmSparqlParser.objectPath_return objectPath() throws RecognitionException {
        IbmSparqlParser.objectPath_return retval = new IbmSparqlParser.objectPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.graphNodePath_return graphNodePath224 = null;



        try {
            // IbmSparql.g:549:2: ( graphNodePath )
            // IbmSparql.g:549:7: graphNodePath
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_graphNodePath_in_objectPath3981);
            graphNodePath224=graphNodePath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphNodePath224.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "objectPath"

    public static class verb_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // IbmSparql.g:553:1: verb : (v= varOrIRIref | 'a' );
    public final IbmSparqlParser.verb_return verb() throws RecognitionException {
        IbmSparqlParser.verb_return retval = new IbmSparqlParser.verb_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal225=null;
        IbmSparqlParser.varOrIRIref_return v = null;


        XTree char_literal225_tree=null;

        try {
            // IbmSparql.g:554:2: (v= varOrIRIref | 'a' )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==IRI_REF||LA98_0==PNAME_NS||(LA98_0>=VAR1 && LA98_0<=VAR2)||LA98_0==PNAME_LN) ) {
                alt98=1;
            }
            else if ( (LA98_0==252) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // IbmSparql.g:554:6: v= varOrIRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_varOrIRIref_in_verb3998);
                    v=varOrIRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:555:5: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal225=(Token)match(input,252,FOLLOW_252_in_verb4007); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal225_tree = (XTree)adaptor.create(char_literal225);
                    adaptor.addChild(root_0, char_literal225_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class triplesSameSubjectPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesSameSubjectPath"
    // IbmSparql.g:558:1: triplesSameSubjectPath : ( (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmptyPath | (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) );
    public final IbmSparqlParser.triplesSameSubjectPath_return triplesSameSubjectPath() throws RecognitionException {
        IbmSparqlParser.triplesSameSubjectPath_return retval = new IbmSparqlParser.triplesSameSubjectPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        List list_p1=null;
        List list_p2=null;
        IbmSparqlParser.varOrTerm_return s1 = null;

        IbmSparqlParser.triplesNodePath_return s2 = null;

        RuleReturnScope p1 = null;
        RuleReturnScope p2 = null;
        RewriteRuleSubtreeStream stream_triplesNodePath=new RewriteRuleSubtreeStream(adaptor,"rule triplesNodePath");
        RewriteRuleSubtreeStream stream_varOrTerm=new RewriteRuleSubtreeStream(adaptor,"rule varOrTerm");
        RewriteRuleSubtreeStream stream_propertyListPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListPath");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try {
            // IbmSparql.g:559:2: ( (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmptyPath | (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) )
            int alt99=2;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt99=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA99_2 = input.LA(2);

                if ( (LA99_2==CLOSE_SQ_BRACKET) ) {
                    alt99=1;
                }
                else if ( (LA99_2==IRI_REF||LA99_2==PNAME_NS||LA99_2==OPEN_BRACE||(LA99_2>=VAR1 && LA99_2<=VAR2)||LA99_2==PNAME_LN||LA99_2==252||LA99_2==255||LA99_2==258) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);

                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA99_3 = input.LA(2);

                if ( (LA99_3==CLOSE_BRACE) ) {
                    alt99=1;
                }
                else if ( (LA99_3==IRI_REF||LA99_3==PNAME_NS||LA99_3==OPEN_BRACE||LA99_3==INTEGER||LA99_3==OPEN_SQ_BRACKET||(LA99_3>=VAR1 && LA99_3<=VAR2)||(LA99_3>=DECIMAL && LA99_3<=BLANK_NODE_LABEL)) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // IbmSparql.g:559:6: (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] )
                    {
                    // IbmSparql.g:559:6: (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] )
                    // IbmSparql.g:559:7: s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1]
                    {
                    pushFollow(FOLLOW_varOrTerm_in_triplesSameSubjectPath4025);
                    s1=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrTerm.add(s1.getTree());
                    pushFollow(FOLLOW_propertyListNotEmptyPath_in_triplesSameSubjectPath4029);
                    p1=propertyListNotEmptyPath((CommonTree)(s1!=null?((XTree)s1.tree):null), 1);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(p1.getTree());
                    if (list_p1==null) list_p1=new ArrayList();
                    list_p1.add(p1.getTree());


                    }



                    // AST REWRITE
                    // elements: propertyListNotEmptyPath
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 559:78: -> propertyListNotEmptyPath
                    {
                        adaptor.addChild(root_0, stream_propertyListNotEmptyPath.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:560:6: (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] )
                    {
                    // IbmSparql.g:560:6: (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] )
                    // IbmSparql.g:560:7: s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2]
                    {
                    pushFollow(FOLLOW_triplesNodePath_in_triplesSameSubjectPath4049);
                    s2=triplesNodePath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesNodePath.add(s2.getTree());
                    pushFollow(FOLLOW_propertyListPath_in_triplesSameSubjectPath4053);
                    p2=propertyListPath((CommonTree)(s2!=null?((XTree)s2.tree):null), 2);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListPath.add(p2.getTree());
                    if (list_p2==null) list_p2=new ArrayList();
                    list_p2.add(p2.getTree());


                    }



                    // AST REWRITE
                    // elements: s2, p2
                    // token labels: 
                    // rule labels: retval, s2
                    // token list labels: 
                    // rule list labels: p2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_p2=new RewriteRuleSubtreeStream(adaptor,"token p2",list_p2);
                    root_0 = (XTree)adaptor.nil();
                    // 560:79: -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                    {
                        // IbmSparql.g:560:83: ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLE2, "TRIPLE2"), root_1);

                        // IbmSparql.g:560:94: ^( SUBJECT $s2)
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SUBJECT, "SUBJECT"), root_2);

                        adaptor.addChild(root_2, stream_s2.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // IbmSparql.g:560:111: ( $p2)?
                        if ( stream_p2.hasNext() ) {
                            adaptor.addChild(root_1, stream_p2.nextTree());

                        }
                        stream_p2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesSameSubjectPath"

    public static class propertyListNotEmptyPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyListNotEmptyPath"
    // IbmSparql.g:563:1: propertyListNotEmptyPath[CommonTree s, int t] : (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] | p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )* -> objectListPath ( objectList )* ;
    public final IbmSparqlParser.propertyListNotEmptyPath_return propertyListNotEmptyPath(CommonTree s, int t) throws RecognitionException {
        IbmSparqlParser.propertyListNotEmptyPath_return retval = new IbmSparqlParser.propertyListNotEmptyPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token SEMICOLON226=null;
        IbmSparqlParser.verbPath_return p1 = null;

        IbmSparqlParser.objectListPath_return v1 = null;

        IbmSparqlParser.verbSimple_return p2 = null;

        IbmSparqlParser.objectListPath_return v2 = null;

        IbmSparqlParser.verbPath_return p3 = null;

        IbmSparqlParser.objectList_return v3 = null;

        IbmSparqlParser.verbSimple_return p4 = null;

        IbmSparqlParser.objectList_return v4 = null;


        XTree SEMICOLON226_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_verbPath=new RewriteRuleSubtreeStream(adaptor,"rule verbPath");
        RewriteRuleSubtreeStream stream_objectList=new RewriteRuleSubtreeStream(adaptor,"rule objectList");
        RewriteRuleSubtreeStream stream_verbSimple=new RewriteRuleSubtreeStream(adaptor,"rule verbSimple");
        RewriteRuleSubtreeStream stream_objectListPath=new RewriteRuleSubtreeStream(adaptor,"rule objectListPath");
        try {
            // IbmSparql.g:564:2: ( (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] | p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )* -> objectListPath ( objectList )* )
            // IbmSparql.g:564:7: (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] | p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )*
            {
            // IbmSparql.g:564:7: (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] | p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==IRI_REF||LA100_0==PNAME_NS||LA100_0==OPEN_BRACE||LA100_0==PNAME_LN||LA100_0==252||LA100_0==255||LA100_0==258) ) {
                alt100=1;
            }
            else if ( ((LA100_0>=VAR1 && LA100_0<=VAR2)) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }
            switch (alt100) {
                case 1 :
                    // IbmSparql.g:564:9: p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t]
                    {
                    pushFollow(FOLLOW_verbPath_in_propertyListNotEmptyPath4103);
                    p1=verbPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_verbPath.add(p1.getTree());
                    pushFollow(FOLLOW_objectListPath_in_propertyListNotEmptyPath4107);
                    v1=objectListPath(s, (CommonTree)(p1!=null?((XTree)p1.tree):null), t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objectListPath.add(v1.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:565:6: p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t]
                    {
                    pushFollow(FOLLOW_verbSimple_in_propertyListNotEmptyPath4126);
                    p2=verbSimple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_verbSimple.add(p2.getTree());
                    pushFollow(FOLLOW_objectListPath_in_propertyListNotEmptyPath4130);
                    v2=objectListPath(s, (CommonTree)(p2!=null?((XTree)p2.tree):null), t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objectListPath.add(v2.getTree());

                    }
                    break;

            }

            // IbmSparql.g:567:4: ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==SEMICOLON) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // IbmSparql.g:567:6: SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )?
            	    {
            	    SEMICOLON226=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_propertyListNotEmptyPath4146); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON226);

            	    // IbmSparql.g:567:16: ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )?
            	    int alt102=2;
            	    int LA102_0 = input.LA(1);

            	    if ( (LA102_0==IRI_REF||LA102_0==PNAME_NS||LA102_0==OPEN_BRACE||(LA102_0>=VAR1 && LA102_0<=VAR2)||LA102_0==PNAME_LN||LA102_0==252||LA102_0==255||LA102_0==258) ) {
            	        alt102=1;
            	    }
            	    switch (alt102) {
            	        case 1 :
            	            // IbmSparql.g:567:18: (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] )
            	            {
            	            // IbmSparql.g:567:18: (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] )
            	            int alt101=2;
            	            int LA101_0 = input.LA(1);

            	            if ( (LA101_0==IRI_REF||LA101_0==PNAME_NS||LA101_0==OPEN_BRACE||LA101_0==PNAME_LN||LA101_0==252||LA101_0==255||LA101_0==258) ) {
            	                alt101=1;
            	            }
            	            else if ( ((LA101_0>=VAR1 && LA101_0<=VAR2)) ) {
            	                alt101=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 101, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt101) {
            	                case 1 :
            	                    // IbmSparql.g:567:20: p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t]
            	                    {
            	                    pushFollow(FOLLOW_verbPath_in_propertyListNotEmptyPath4154);
            	                    p3=verbPath();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_verbPath.add(p3.getTree());
            	                    pushFollow(FOLLOW_objectList_in_propertyListNotEmptyPath4158);
            	                    v3=objectList(s, (CommonTree)(p3!=null?((XTree)p3.tree):null), t);

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_objectList.add(v3.getTree());

            	                    }
            	                    break;
            	                case 2 :
            	                    // IbmSparql.g:568:21: p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t]
            	                    {
            	                    pushFollow(FOLLOW_verbSimple_in_propertyListNotEmptyPath4186);
            	                    p4=verbSimple();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_verbSimple.add(p4.getTree());
            	                    pushFollow(FOLLOW_objectList_in_propertyListNotEmptyPath4190);
            	                    v4=objectList(s, (CommonTree)(p4!=null?((XTree)p4.tree):null), t);

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_objectList.add(v4.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);



            // AST REWRITE
            // elements: objectList, objectListPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 573:4: -> objectListPath ( objectList )*
            {
                adaptor.addChild(root_0, stream_objectListPath.nextTree());
                // IbmSparql.g:573:23: ( objectList )*
                while ( stream_objectList.hasNext() ) {
                    adaptor.addChild(root_0, stream_objectList.nextTree());

                }
                stream_objectList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyListNotEmptyPath"

    public static class propertyListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyListPath"
    // IbmSparql.g:576:1: propertyListPath[CommonTree s, int t] : ( propertyListNotEmptyPath[$s, $t] )? -> ( propertyListNotEmptyPath )? ;
    public final IbmSparqlParser.propertyListPath_return propertyListPath(CommonTree s, int t) throws RecognitionException {
        IbmSparqlParser.propertyListPath_return retval = new IbmSparqlParser.propertyListPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.propertyListNotEmptyPath_return propertyListNotEmptyPath227 = null;


        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try {
            // IbmSparql.g:577:2: ( ( propertyListNotEmptyPath[$s, $t] )? -> ( propertyListNotEmptyPath )? )
            // IbmSparql.g:577:7: ( propertyListNotEmptyPath[$s, $t] )?
            {
            // IbmSparql.g:577:7: ( propertyListNotEmptyPath[$s, $t] )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==IRI_REF||LA104_0==PNAME_NS||LA104_0==OPEN_BRACE||(LA104_0>=VAR1 && LA104_0<=VAR2)||LA104_0==PNAME_LN||LA104_0==252||LA104_0==255||LA104_0==258) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // IbmSparql.g:577:7: propertyListNotEmptyPath[$s, $t]
                    {
                    pushFollow(FOLLOW_propertyListNotEmptyPath_in_propertyListPath4272);
                    propertyListNotEmptyPath227=propertyListNotEmptyPath(s, t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(propertyListNotEmptyPath227.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: propertyListNotEmptyPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 577:43: -> ( propertyListNotEmptyPath )?
            {
                // IbmSparql.g:577:47: ( propertyListNotEmptyPath )?
                if ( stream_propertyListNotEmptyPath.hasNext() ) {
                    adaptor.addChild(root_0, stream_propertyListNotEmptyPath.nextTree());

                }
                stream_propertyListNotEmptyPath.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyListPath"

    public static class verbPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbPath"
    // IbmSparql.g:580:1: verbPath : path ;
    public final IbmSparqlParser.verbPath_return verbPath() throws RecognitionException {
        IbmSparqlParser.verbPath_return retval = new IbmSparqlParser.verbPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.path_return path228 = null;



        try {
            // IbmSparql.g:581:2: ( path )
            // IbmSparql.g:581:7: path
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_path_in_verbPath4296);
            path228=path();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path228.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbPath"

    public static class verbSimple_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbSimple"
    // IbmSparql.g:584:1: verbSimple : var ;
    public final IbmSparqlParser.verbSimple_return verbSimple() throws RecognitionException {
        IbmSparqlParser.verbSimple_return retval = new IbmSparqlParser.verbSimple_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.var_return var229 = null;



        try {
            // IbmSparql.g:585:2: ( var )
            // IbmSparql.g:585:7: var
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_var_in_verbSimple4310);
            var229=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, var229.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbSimple"

    public static class path_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "path"
    // IbmSparql.g:588:1: path : pathAlternative ;
    public final IbmSparqlParser.path_return path() throws RecognitionException {
        IbmSparqlParser.path_return retval = new IbmSparqlParser.path_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.pathAlternative_return pathAlternative230 = null;



        try {
            // IbmSparql.g:589:2: ( pathAlternative )
            // IbmSparql.g:589:7: pathAlternative
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_pathAlternative_in_path4324);
            pathAlternative230=pathAlternative();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pathAlternative230.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "path"

    public static class pathAlternative_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathAlternative"
    // IbmSparql.g:592:1: pathAlternative : s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1) ;
    public final IbmSparqlParser.pathAlternative_return pathAlternative() throws RecognitionException {
        IbmSparqlParser.pathAlternative_return retval = new IbmSparqlParser.pathAlternative_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal231=null;
        List list_s2=null;
        IbmSparqlParser.pathSequence_return s1 = null;

        RuleReturnScope s2 = null;
        XTree char_literal231_tree=null;
        RewriteRuleTokenStream stream_253=new RewriteRuleTokenStream(adaptor,"token 253");
        RewriteRuleSubtreeStream stream_pathSequence=new RewriteRuleSubtreeStream(adaptor,"rule pathSequence");
        try {
            // IbmSparql.g:593:2: (s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1) )
            // IbmSparql.g:593:7: s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1)
            {
            pushFollow(FOLLOW_pathSequence_in_pathAlternative4340);
            s1=pathSequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathSequence.add(s1.getTree());
            // IbmSparql.g:594:10: ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1)
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==253) ) {
                alt106=1;
            }
            else if ( (LA106_0==IRI_REF||LA106_0==PNAME_NS||LA106_0==OPEN_BRACE||LA106_0==CLOSE_BRACE||LA106_0==INTEGER||LA106_0==OPEN_SQ_BRACKET||(LA106_0>=VAR1 && LA106_0<=VAR2)||(LA106_0>=DECIMAL && LA106_0<=BLANK_NODE_LABEL)) ) {
                alt106=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }
            switch (alt106) {
                case 1 :
                    // IbmSparql.g:594:12: ( '|' s2+= pathSequence )+
                    {
                    // IbmSparql.g:594:12: ( '|' s2+= pathSequence )+
                    int cnt105=0;
                    loop105:
                    do {
                        int alt105=2;
                        int LA105_0 = input.LA(1);

                        if ( (LA105_0==253) ) {
                            alt105=1;
                        }


                        switch (alt105) {
                    	case 1 :
                    	    // IbmSparql.g:594:13: '|' s2+= pathSequence
                    	    {
                    	    char_literal231=(Token)match(input,253,FOLLOW_253_in_pathAlternative4355); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_253.add(char_literal231);

                    	    pushFollow(FOLLOW_pathSequence_in_pathAlternative4359);
                    	    s2=pathSequence();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pathSequence.add(s2.getTree());
                    	    if (list_s2==null) list_s2=new ArrayList();
                    	    list_s2.add(s2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt105 >= 1 ) break loop105;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(105, input);
                                throw eee;
                        }
                        cnt105++;
                    } while (true);



                    // AST REWRITE
                    // elements: s2, s1
                    // token labels: 
                    // rule labels: retval, s1
                    // token list labels: 
                    // rule list labels: s2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"token s2",list_s2);
                    root_0 = (XTree)adaptor.nil();
                    // 594:36: -> ^( ALT $s1 ( $s2)+ )
                    {
                        // IbmSparql.g:594:39: ^( ALT $s1 ( $s2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(ALT, "ALT"), root_1);

                        adaptor.addChild(root_1, stream_s1.nextTree());
                        if ( !(stream_s2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_s2.hasNext() ) {
                            adaptor.addChild(root_1, stream_s2.nextTree());

                        }
                        stream_s2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:595:14: 
                    {

                    // AST REWRITE
                    // elements: s1
                    // token labels: 
                    // rule labels: retval, s1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 595:14: -> $s1
                    {
                        adaptor.addChild(root_0, stream_s1.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathAlternative"

    public static class pathSequence_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathSequence"
    // IbmSparql.g:598:1: pathSequence : s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1) ;
    public final IbmSparqlParser.pathSequence_return pathSequence() throws RecognitionException {
        IbmSparqlParser.pathSequence_return retval = new IbmSparqlParser.pathSequence_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal232=null;
        List list_s2=null;
        IbmSparqlParser.pathEltOrInverse_return s1 = null;

        RuleReturnScope s2 = null;
        XTree char_literal232_tree=null;
        RewriteRuleTokenStream stream_254=new RewriteRuleTokenStream(adaptor,"token 254");
        RewriteRuleSubtreeStream stream_pathEltOrInverse=new RewriteRuleSubtreeStream(adaptor,"rule pathEltOrInverse");
        try {
            // IbmSparql.g:599:2: (s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1) )
            // IbmSparql.g:599:7: s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1)
            {
            pushFollow(FOLLOW_pathEltOrInverse_in_pathSequence4410);
            s1=pathEltOrInverse();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathEltOrInverse.add(s1.getTree());
            // IbmSparql.g:600:9: ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1)
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==254) ) {
                alt108=1;
            }
            else if ( (LA108_0==IRI_REF||LA108_0==PNAME_NS||LA108_0==OPEN_BRACE||LA108_0==CLOSE_BRACE||LA108_0==INTEGER||LA108_0==OPEN_SQ_BRACKET||(LA108_0>=VAR1 && LA108_0<=VAR2)||(LA108_0>=DECIMAL && LA108_0<=BLANK_NODE_LABEL)||LA108_0==253) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // IbmSparql.g:600:11: ( '/' s2+= pathEltOrInverse )+
                    {
                    // IbmSparql.g:600:11: ( '/' s2+= pathEltOrInverse )+
                    int cnt107=0;
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);

                        if ( (LA107_0==254) ) {
                            alt107=1;
                        }


                        switch (alt107) {
                    	case 1 :
                    	    // IbmSparql.g:600:12: '/' s2+= pathEltOrInverse
                    	    {
                    	    char_literal232=(Token)match(input,254,FOLLOW_254_in_pathSequence4424); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_254.add(char_literal232);

                    	    pushFollow(FOLLOW_pathEltOrInverse_in_pathSequence4428);
                    	    s2=pathEltOrInverse();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pathEltOrInverse.add(s2.getTree());
                    	    if (list_s2==null) list_s2=new ArrayList();
                    	    list_s2.add(s2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt107 >= 1 ) break loop107;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(107, input);
                                throw eee;
                        }
                        cnt107++;
                    } while (true);



                    // AST REWRITE
                    // elements: s2, s1
                    // token labels: 
                    // rule labels: retval, s1
                    // token list labels: 
                    // rule list labels: s2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"token s2",list_s2);
                    root_0 = (XTree)adaptor.nil();
                    // 600:39: -> ^( SEQ $s1 ( $s2)+ )
                    {
                        // IbmSparql.g:600:42: ^( SEQ $s1 ( $s2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SEQ, "SEQ"), root_1);

                        adaptor.addChild(root_1, stream_s1.nextTree());
                        if ( !(stream_s2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_s2.hasNext() ) {
                            adaptor.addChild(root_1, stream_s2.nextTree());

                        }
                        stream_s2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:601:13: 
                    {

                    // AST REWRITE
                    // elements: s1
                    // token labels: 
                    // rule labels: retval, s1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 601:13: -> $s1
                    {
                        adaptor.addChild(root_0, stream_s1.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathSequence"

    public static class pathElt_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathElt"
    // IbmSparql.g:604:1: pathElt : pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary ) ;
    public final IbmSparqlParser.pathElt_return pathElt() throws RecognitionException {
        IbmSparqlParser.pathElt_return retval = new IbmSparqlParser.pathElt_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.pathPrimary_return pathPrimary233 = null;

        IbmSparqlParser.pathMod_return pathMod234 = null;


        RewriteRuleSubtreeStream stream_pathMod=new RewriteRuleSubtreeStream(adaptor,"rule pathMod");
        RewriteRuleSubtreeStream stream_pathPrimary=new RewriteRuleSubtreeStream(adaptor,"rule pathPrimary");
        try {
            // IbmSparql.g:605:2: ( pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary ) )
            // IbmSparql.g:605:6: pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary )
            {
            pushFollow(FOLLOW_pathPrimary_in_pathElt4475);
            pathPrimary233=pathPrimary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathPrimary.add(pathPrimary233.getTree());
            // IbmSparql.g:606:9: ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==251||(LA109_0>=256 && LA109_0<=257)) ) {
                alt109=1;
            }
            else if ( (LA109_0==IRI_REF||LA109_0==PNAME_NS||LA109_0==OPEN_BRACE||LA109_0==CLOSE_BRACE||LA109_0==INTEGER||LA109_0==OPEN_SQ_BRACKET||(LA109_0>=VAR1 && LA109_0<=VAR2)||(LA109_0>=DECIMAL && LA109_0<=BLANK_NODE_LABEL)||(LA109_0>=253 && LA109_0<=254)) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // IbmSparql.g:606:11: ( pathMod -> ^( ELT pathPrimary pathMod ) )
                    {
                    // IbmSparql.g:606:11: ( pathMod -> ^( ELT pathPrimary pathMod ) )
                    // IbmSparql.g:606:12: pathMod
                    {
                    pushFollow(FOLLOW_pathMod_in_pathElt4489);
                    pathMod234=pathMod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pathMod.add(pathMod234.getTree());


                    // AST REWRITE
                    // elements: pathPrimary, pathMod
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 606:20: -> ^( ELT pathPrimary pathMod )
                    {
                        // IbmSparql.g:606:23: ^( ELT pathPrimary pathMod )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(ELT, "ELT"), root_1);

                        adaptor.addChild(root_1, stream_pathPrimary.nextTree());
                        adaptor.addChild(root_1, stream_pathMod.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // IbmSparql.g:607:10: 
                    {

                    // AST REWRITE
                    // elements: pathPrimary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 607:10: -> pathPrimary
                    {
                        adaptor.addChild(root_0, stream_pathPrimary.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathElt"

    public static class pathEltOrInverse_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathEltOrInverse"
    // IbmSparql.g:610:1: pathEltOrInverse : ( pathElt | ( '^' pathElt -> ^( INV pathElt ) ) );
    public final IbmSparqlParser.pathEltOrInverse_return pathEltOrInverse() throws RecognitionException {
        IbmSparqlParser.pathEltOrInverse_return retval = new IbmSparqlParser.pathEltOrInverse_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal236=null;
        IbmSparqlParser.pathElt_return pathElt235 = null;

        IbmSparqlParser.pathElt_return pathElt237 = null;


        XTree char_literal236_tree=null;
        RewriteRuleTokenStream stream_255=new RewriteRuleTokenStream(adaptor,"token 255");
        RewriteRuleSubtreeStream stream_pathElt=new RewriteRuleSubtreeStream(adaptor,"rule pathElt");
        try {
            // IbmSparql.g:611:2: ( pathElt | ( '^' pathElt -> ^( INV pathElt ) ) )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==IRI_REF||LA110_0==PNAME_NS||LA110_0==OPEN_BRACE||LA110_0==PNAME_LN||LA110_0==252||LA110_0==258) ) {
                alt110=1;
            }
            else if ( (LA110_0==255) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;
            }
            switch (alt110) {
                case 1 :
                    // IbmSparql.g:611:7: pathElt
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_pathElt_in_pathEltOrInverse4531);
                    pathElt235=pathElt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathElt235.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:611:17: ( '^' pathElt -> ^( INV pathElt ) )
                    {
                    // IbmSparql.g:611:17: ( '^' pathElt -> ^( INV pathElt ) )
                    // IbmSparql.g:611:18: '^' pathElt
                    {
                    char_literal236=(Token)match(input,255,FOLLOW_255_in_pathEltOrInverse4536); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_255.add(char_literal236);

                    pushFollow(FOLLOW_pathElt_in_pathEltOrInverse4538);
                    pathElt237=pathElt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pathElt.add(pathElt237.getTree());


                    // AST REWRITE
                    // elements: pathElt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 611:30: -> ^( INV pathElt )
                    {
                        // IbmSparql.g:611:33: ^( INV pathElt )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_pathElt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathEltOrInverse"

    public static class pathMod_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathMod"
    // IbmSparql.g:614:1: pathMod : ( '*' | '?' | '+' );
    public final IbmSparqlParser.pathMod_return pathMod() throws RecognitionException {
        IbmSparqlParser.pathMod_return retval = new IbmSparqlParser.pathMod_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token set238=null;

        XTree set238_tree=null;

        try {
            // IbmSparql.g:615:2: ( '*' | '?' | '+' )
            // IbmSparql.g:
            {
            root_0 = (XTree)adaptor.nil();

            set238=(Token)input.LT(1);
            if ( input.LA(1)==251||(input.LA(1)>=256 && input.LA(1)<=257) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XTree)adaptor.create(set238));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathMod"

    public static class pathPrimary_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathPrimary"
    // IbmSparql.g:618:1: pathPrimary : ( iRIref | 'a' | '!' pathNegatedPropertySet | OPEN_BRACE path CLOSE_BRACE );
    public final IbmSparqlParser.pathPrimary_return pathPrimary() throws RecognitionException {
        IbmSparqlParser.pathPrimary_return retval = new IbmSparqlParser.pathPrimary_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal240=null;
        Token char_literal241=null;
        Token OPEN_BRACE243=null;
        Token CLOSE_BRACE245=null;
        IbmSparqlParser.iRIref_return iRIref239 = null;

        IbmSparqlParser.pathNegatedPropertySet_return pathNegatedPropertySet242 = null;

        IbmSparqlParser.path_return path244 = null;


        XTree char_literal240_tree=null;
        XTree char_literal241_tree=null;
        XTree OPEN_BRACE243_tree=null;
        XTree CLOSE_BRACE245_tree=null;

        try {
            // IbmSparql.g:619:2: ( iRIref | 'a' | '!' pathNegatedPropertySet | OPEN_BRACE path CLOSE_BRACE )
            int alt111=4;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt111=1;
                }
                break;
            case 252:
                {
                alt111=2;
                }
                break;
            case 258:
                {
                alt111=3;
                }
                break;
            case OPEN_BRACE:
                {
                alt111=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;
            }

            switch (alt111) {
                case 1 :
                    // IbmSparql.g:619:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIref_in_pathPrimary4584);
                    iRIref239=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref239.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:619:16: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal240=(Token)match(input,252,FOLLOW_252_in_pathPrimary4588); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal240_tree = (XTree)adaptor.create(char_literal240);
                    adaptor.addChild(root_0, char_literal240_tree);
                    }

                    }
                    break;
                case 3 :
                    // IbmSparql.g:619:22: '!' pathNegatedPropertySet
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal241=(Token)match(input,258,FOLLOW_258_in_pathPrimary4592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal241_tree = (XTree)adaptor.create(char_literal241);
                    adaptor.addChild(root_0, char_literal241_tree);
                    }
                    pushFollow(FOLLOW_pathNegatedPropertySet_in_pathPrimary4594);
                    pathNegatedPropertySet242=pathNegatedPropertySet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathNegatedPropertySet242.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparql.g:619:51: OPEN_BRACE path CLOSE_BRACE
                    {
                    root_0 = (XTree)adaptor.nil();

                    OPEN_BRACE243=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_pathPrimary4598); if (state.failed) return retval;
                    pushFollow(FOLLOW_path_in_pathPrimary4601);
                    path244=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path244.getTree());
                    CLOSE_BRACE245=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_pathPrimary4603); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathPrimary"

    public static class pathNegatedPropertySet_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathNegatedPropertySet"
    // IbmSparql.g:622:1: pathNegatedPropertySet : ( pathOneInPropertySet | OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE );
    public final IbmSparqlParser.pathNegatedPropertySet_return pathNegatedPropertySet() throws RecognitionException {
        IbmSparqlParser.pathNegatedPropertySet_return retval = new IbmSparqlParser.pathNegatedPropertySet_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE247=null;
        Token char_literal249=null;
        Token CLOSE_BRACE251=null;
        IbmSparqlParser.pathOneInPropertySet_return pathOneInPropertySet246 = null;

        IbmSparqlParser.pathOneInPropertySet_return pathOneInPropertySet248 = null;

        IbmSparqlParser.pathOneInPropertySet_return pathOneInPropertySet250 = null;


        XTree OPEN_BRACE247_tree=null;
        XTree char_literal249_tree=null;
        XTree CLOSE_BRACE251_tree=null;

        try {
            // IbmSparql.g:623:2: ( pathOneInPropertySet | OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==IRI_REF||LA114_0==PNAME_NS||LA114_0==PNAME_LN||LA114_0==252||LA114_0==255) ) {
                alt114=1;
            }
            else if ( (LA114_0==OPEN_BRACE) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // IbmSparql.g:623:7: pathOneInPropertySet
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4618);
                    pathOneInPropertySet246=pathOneInPropertySet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet246.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:623:30: OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE
                    {
                    root_0 = (XTree)adaptor.nil();

                    OPEN_BRACE247=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_pathNegatedPropertySet4622); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OPEN_BRACE247_tree = (XTree)adaptor.create(OPEN_BRACE247);
                    adaptor.addChild(root_0, OPEN_BRACE247_tree);
                    }
                    // IbmSparql.g:623:41: ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==IRI_REF||LA113_0==PNAME_NS||LA113_0==PNAME_LN||LA113_0==252||LA113_0==255) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // IbmSparql.g:623:43: pathOneInPropertySet ( '|' pathOneInPropertySet )*
                            {
                            pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4626);
                            pathOneInPropertySet248=pathOneInPropertySet();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet248.getTree());
                            // IbmSparql.g:623:64: ( '|' pathOneInPropertySet )*
                            loop112:
                            do {
                                int alt112=2;
                                int LA112_0 = input.LA(1);

                                if ( (LA112_0==253) ) {
                                    alt112=1;
                                }


                                switch (alt112) {
                            	case 1 :
                            	    // IbmSparql.g:623:66: '|' pathOneInPropertySet
                            	    {
                            	    char_literal249=(Token)match(input,253,FOLLOW_253_in_pathNegatedPropertySet4630); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal249_tree = (XTree)adaptor.create(char_literal249);
                            	    adaptor.addChild(root_0, char_literal249_tree);
                            	    }
                            	    pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4632);
                            	    pathOneInPropertySet250=pathOneInPropertySet();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet250.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop112;
                                }
                            } while (true);


                            }
                            break;

                    }

                    CLOSE_BRACE251=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_pathNegatedPropertySet4640); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CLOSE_BRACE251_tree = (XTree)adaptor.create(CLOSE_BRACE251);
                    adaptor.addChild(root_0, CLOSE_BRACE251_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathNegatedPropertySet"

    public static class pathOneInPropertySet_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathOneInPropertySet"
    // IbmSparql.g:626:1: pathOneInPropertySet : ( iRIref | 'a' | ( '^' iRIref -> ^( INV iRIref ) ) | ( '^' 'a' -> ^( INV 'a' ) ) );
    public final IbmSparqlParser.pathOneInPropertySet_return pathOneInPropertySet() throws RecognitionException {
        IbmSparqlParser.pathOneInPropertySet_return retval = new IbmSparqlParser.pathOneInPropertySet_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal253=null;
        Token char_literal254=null;
        Token char_literal256=null;
        Token char_literal257=null;
        IbmSparqlParser.iRIref_return iRIref252 = null;

        IbmSparqlParser.iRIref_return iRIref255 = null;


        XTree char_literal253_tree=null;
        XTree char_literal254_tree=null;
        XTree char_literal256_tree=null;
        XTree char_literal257_tree=null;
        RewriteRuleTokenStream stream_252=new RewriteRuleTokenStream(adaptor,"token 252");
        RewriteRuleTokenStream stream_255=new RewriteRuleTokenStream(adaptor,"token 255");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // IbmSparql.g:627:2: ( iRIref | 'a' | ( '^' iRIref -> ^( INV iRIref ) ) | ( '^' 'a' -> ^( INV 'a' ) ) )
            int alt115=4;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt115=1;
                }
                break;
            case 252:
                {
                alt115=2;
                }
                break;
            case 255:
                {
                int LA115_3 = input.LA(2);

                if ( (LA115_3==252) ) {
                    alt115=4;
                }
                else if ( (LA115_3==IRI_REF||LA115_3==PNAME_NS||LA115_3==PNAME_LN) ) {
                    alt115=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 115, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // IbmSparql.g:627:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIref_in_pathOneInPropertySet4654);
                    iRIref252=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref252.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:627:16: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal253=(Token)match(input,252,FOLLOW_252_in_pathOneInPropertySet4658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal253_tree = (XTree)adaptor.create(char_literal253);
                    adaptor.addChild(root_0, char_literal253_tree);
                    }

                    }
                    break;
                case 3 :
                    // IbmSparql.g:627:22: ( '^' iRIref -> ^( INV iRIref ) )
                    {
                    // IbmSparql.g:627:22: ( '^' iRIref -> ^( INV iRIref ) )
                    // IbmSparql.g:627:23: '^' iRIref
                    {
                    char_literal254=(Token)match(input,255,FOLLOW_255_in_pathOneInPropertySet4663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_255.add(char_literal254);

                    pushFollow(FOLLOW_iRIref_in_pathOneInPropertySet4665);
                    iRIref255=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_iRIref.add(iRIref255.getTree());


                    // AST REWRITE
                    // elements: iRIref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 627:34: -> ^( INV iRIref )
                    {
                        // IbmSparql.g:627:37: ^( INV iRIref )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_iRIref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 4 :
                    // IbmSparql.g:627:55: ( '^' 'a' -> ^( INV 'a' ) )
                    {
                    // IbmSparql.g:627:55: ( '^' 'a' -> ^( INV 'a' ) )
                    // IbmSparql.g:627:56: '^' 'a'
                    {
                    char_literal256=(Token)match(input,255,FOLLOW_255_in_pathOneInPropertySet4680); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_255.add(char_literal256);

                    char_literal257=(Token)match(input,252,FOLLOW_252_in_pathOneInPropertySet4682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_252.add(char_literal257);



                    // AST REWRITE
                    // elements: 252
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 627:64: -> ^( INV 'a' )
                    {
                        // IbmSparql.g:627:67: ^( INV 'a' )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_252.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathOneInPropertySet"

    public static class integer_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integer"
    // IbmSparql.g:630:1: integer : INTEGER ;
    public final IbmSparqlParser.integer_return integer() throws RecognitionException {
        IbmSparqlParser.integer_return retval = new IbmSparqlParser.integer_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INTEGER258=null;

        XTree INTEGER258_tree=null;

        try {
            // IbmSparql.g:631:2: ( INTEGER )
            // IbmSparql.g:631:7: INTEGER
            {
            root_0 = (XTree)adaptor.nil();

            INTEGER258=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_integer4705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER258_tree = (XTree)adaptor.create(INTEGER258);
            adaptor.addChild(root_0, INTEGER258_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "integer"

    public static class triplesNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesNode"
    // IbmSparql.g:634:1: triplesNode : (c= collection | p= blankNodePropertyList ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) ;
    public final IbmSparqlParser.triplesNode_return triplesNode() throws RecognitionException {
        IbmSparqlParser.triplesNode_return retval = new IbmSparqlParser.triplesNode_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.collection_return c = null;

        IbmSparqlParser.blankNodePropertyList_return p = null;


        RewriteRuleSubtreeStream stream_blankNodePropertyList=new RewriteRuleSubtreeStream(adaptor,"rule blankNodePropertyList");
        RewriteRuleSubtreeStream stream_collection=new RewriteRuleSubtreeStream(adaptor,"rule collection");
        try {
            // IbmSparql.g:635:2: ( (c= collection | p= blankNodePropertyList ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) )
            // IbmSparql.g:635:7: (c= collection | p= blankNodePropertyList )
            {
            // IbmSparql.g:635:7: (c= collection | p= blankNodePropertyList )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==OPEN_BRACE) ) {
                alt116=1;
            }
            else if ( (LA116_0==OPEN_SQ_BRACKET) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    // IbmSparql.g:635:9: c= collection
                    {
                    pushFollow(FOLLOW_collection_in_triplesNode4723);
                    c=collection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_collection.add(c.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:636:6: p= blankNodePropertyList
                    {
                    pushFollow(FOLLOW_blankNodePropertyList_in_triplesNode4732);
                    p=blankNodePropertyList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_blankNodePropertyList.add(p.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p, c
            // token labels: 
            // rule labels: retval, c, p
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 638:4: -> ^( TRIPLES_NODE ( $c)? ( $p)? )
            {
                // IbmSparql.g:638:7: ^( TRIPLES_NODE ( $c)? ( $p)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLES_NODE, "TRIPLES_NODE"), root_1);

                // IbmSparql.g:638:22: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();
                // IbmSparql.g:638:26: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesNode"

    public static class triplesNodePath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesNodePath"
    // IbmSparql.g:641:1: triplesNodePath : (c= collectionPath | p= blankNodePropertyListPath ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) ;
    public final IbmSparqlParser.triplesNodePath_return triplesNodePath() throws RecognitionException {
        IbmSparqlParser.triplesNodePath_return retval = new IbmSparqlParser.triplesNodePath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.collectionPath_return c = null;

        IbmSparqlParser.blankNodePropertyListPath_return p = null;


        RewriteRuleSubtreeStream stream_blankNodePropertyListPath=new RewriteRuleSubtreeStream(adaptor,"rule blankNodePropertyListPath");
        RewriteRuleSubtreeStream stream_collectionPath=new RewriteRuleSubtreeStream(adaptor,"rule collectionPath");
        try {
            // IbmSparql.g:642:2: ( (c= collectionPath | p= blankNodePropertyListPath ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) )
            // IbmSparql.g:642:7: (c= collectionPath | p= blankNodePropertyListPath )
            {
            // IbmSparql.g:642:7: (c= collectionPath | p= blankNodePropertyListPath )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==OPEN_BRACE) ) {
                alt117=1;
            }
            else if ( (LA117_0==OPEN_SQ_BRACKET) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // IbmSparql.g:642:9: c= collectionPath
                    {
                    pushFollow(FOLLOW_collectionPath_in_triplesNodePath4772);
                    c=collectionPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_collectionPath.add(c.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:643:6: p= blankNodePropertyListPath
                    {
                    pushFollow(FOLLOW_blankNodePropertyListPath_in_triplesNodePath4784);
                    p=blankNodePropertyListPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_blankNodePropertyListPath.add(p.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: c, p
            // token labels: 
            // rule labels: retval, c, p
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 645:4: -> ^( TRIPLES_NODE ( $c)? ( $p)? )
            {
                // IbmSparql.g:645:7: ^( TRIPLES_NODE ( $c)? ( $p)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLES_NODE, "TRIPLES_NODE"), root_1);

                // IbmSparql.g:645:22: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();
                // IbmSparql.g:645:26: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesNodePath"

    public static class blankNodePropertyList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blankNodePropertyList"
    // IbmSparql.g:648:1: blankNodePropertyList : OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) ;
    public final IbmSparqlParser.blankNodePropertyList_return blankNodePropertyList() throws RecognitionException {
        IbmSparqlParser.blankNodePropertyList_return retval = new IbmSparqlParser.blankNodePropertyList_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_SQ_BRACKET259=null;
        Token CLOSE_SQ_BRACKET260=null;
        IbmSparqlParser.propertyListNotEmpty_return p = null;


        XTree OPEN_SQ_BRACKET259_tree=null;
        XTree CLOSE_SQ_BRACKET260_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");
        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        try {
            // IbmSparql.g:649:2: ( OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) )
            // IbmSparql.g:649:7: OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET259=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyList4821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET259);

            pushFollow(FOLLOW_propertyListNotEmpty_in_blankNodePropertyList4825);
            p=propertyListNotEmpty(null, 3);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyListNotEmpty.add(p.getTree());
            CLOSE_SQ_BRACKET260=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyList4828); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET260);



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval, p
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 651:3: -> ^( PROPERTY_LIST $p)
            {
                // IbmSparql.g:651:6: ^( PROPERTY_LIST $p)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST"), root_1);

                adaptor.addChild(root_1, stream_p.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "blankNodePropertyList"

    public static class blankNodePropertyListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blankNodePropertyListPath"
    // IbmSparql.g:654:1: blankNodePropertyListPath : OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) ;
    public final IbmSparqlParser.blankNodePropertyListPath_return blankNodePropertyListPath() throws RecognitionException {
        IbmSparqlParser.blankNodePropertyListPath_return retval = new IbmSparqlParser.blankNodePropertyListPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_SQ_BRACKET261=null;
        Token CLOSE_SQ_BRACKET262=null;
        IbmSparqlParser.propertyListNotEmptyPath_return p = null;


        XTree OPEN_SQ_BRACKET261_tree=null;
        XTree CLOSE_SQ_BRACKET262_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try {
            // IbmSparql.g:655:2: ( OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) )
            // IbmSparql.g:655:7: OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET261=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyListPath4857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET261);

            pushFollow(FOLLOW_propertyListNotEmptyPath_in_blankNodePropertyListPath4861);
            p=propertyListNotEmptyPath(null, 3);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(p.getTree());
            CLOSE_SQ_BRACKET262=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyListPath4864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET262);



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval, p
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 657:3: -> ^( PROPERTY_LIST $p)
            {
                // IbmSparql.g:657:6: ^( PROPERTY_LIST $p)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST"), root_1);

                adaptor.addChild(root_1, stream_p.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "blankNodePropertyListPath"

    public static class collection_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection"
    // IbmSparql.g:660:1: collection : ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) ;
    public final IbmSparqlParser.collection_return collection() throws RecognitionException {
        IbmSparqlParser.collection_return retval = new IbmSparqlParser.collection_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE263=null;
        Token CLOSE_BRACE264=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree OPEN_BRACE263_tree=null;
        XTree CLOSE_BRACE264_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_graphNode=new RewriteRuleSubtreeStream(adaptor,"rule graphNode");
        try {
            // IbmSparql.g:661:2: ( ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) )
            // IbmSparql.g:661:6: ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE )
            {
            // IbmSparql.g:661:6: ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE )
            // IbmSparql.g:661:7: OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE
            {
            OPEN_BRACE263=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collection4893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE263);

            // IbmSparql.g:661:19: (g+= graphNode )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==IRI_REF||LA118_0==PNAME_NS||LA118_0==OPEN_BRACE||LA118_0==INTEGER||LA118_0==OPEN_SQ_BRACKET||(LA118_0>=VAR1 && LA118_0<=VAR2)||(LA118_0>=DECIMAL && LA118_0<=BLANK_NODE_LABEL)) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // IbmSparql.g:661:19: g+= graphNode
            	    {
            	    pushFollow(FOLLOW_graphNode_in_collection4897);
            	    g=graphNode();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_graphNode.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);

            CLOSE_BRACE264=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collection4900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE264);


            }



            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 663:3: -> ^( COLLECTION ( $g)+ )
            {
                // IbmSparql.g:663:7: ^( COLLECTION ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(COLLECTION, "COLLECTION"), root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "collection"

    public static class collectionPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collectionPath"
    // IbmSparql.g:666:1: collectionPath : ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) ;
    public final IbmSparqlParser.collectionPath_return collectionPath() throws RecognitionException {
        IbmSparqlParser.collectionPath_return retval = new IbmSparqlParser.collectionPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE265=null;
        Token CLOSE_BRACE266=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree OPEN_BRACE265_tree=null;
        XTree CLOSE_BRACE266_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_graphNodePath=new RewriteRuleSubtreeStream(adaptor,"rule graphNodePath");
        try {
            // IbmSparql.g:667:2: ( ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) )
            // IbmSparql.g:667:6: ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE )
            {
            // IbmSparql.g:667:6: ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE )
            // IbmSparql.g:667:7: OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE
            {
            OPEN_BRACE265=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collectionPath4932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE265);

            // IbmSparql.g:667:19: (g+= graphNodePath )+
            int cnt119=0;
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==IRI_REF||LA119_0==PNAME_NS||LA119_0==OPEN_BRACE||LA119_0==INTEGER||LA119_0==OPEN_SQ_BRACKET||(LA119_0>=VAR1 && LA119_0<=VAR2)||(LA119_0>=DECIMAL && LA119_0<=BLANK_NODE_LABEL)) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // IbmSparql.g:667:19: g+= graphNodePath
            	    {
            	    pushFollow(FOLLOW_graphNodePath_in_collectionPath4936);
            	    g=graphNodePath();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_graphNodePath.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt119 >= 1 ) break loop119;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(119, input);
                        throw eee;
                }
                cnt119++;
            } while (true);

            CLOSE_BRACE266=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collectionPath4939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE266);


            }



            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 669:3: -> ^( COLLECTION ( $g)+ )
            {
                // IbmSparql.g:669:7: ^( COLLECTION ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(COLLECTION, "COLLECTION"), root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "collectionPath"

    public static class graphNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphNode"
    // IbmSparql.g:672:1: graphNode : ( varOrTerm | triplesNode );
    public final IbmSparqlParser.graphNode_return graphNode() throws RecognitionException {
        IbmSparqlParser.graphNode_return retval = new IbmSparqlParser.graphNode_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.varOrTerm_return varOrTerm267 = null;

        IbmSparqlParser.triplesNode_return triplesNode268 = null;



        try {
            // IbmSparql.g:673:2: ( varOrTerm | triplesNode )
            int alt120=2;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt120=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA120_2 = input.LA(2);

                if ( (LA120_2==CLOSE_SQ_BRACKET) ) {
                    alt120=1;
                }
                else if ( (LA120_2==IRI_REF||LA120_2==PNAME_NS||(LA120_2>=VAR1 && LA120_2<=VAR2)||LA120_2==PNAME_LN||LA120_2==252) ) {
                    alt120=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 2, input);

                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA120_3 = input.LA(2);

                if ( (LA120_3==CLOSE_BRACE) ) {
                    alt120=1;
                }
                else if ( (LA120_3==IRI_REF||LA120_3==PNAME_NS||LA120_3==OPEN_BRACE||LA120_3==INTEGER||LA120_3==OPEN_SQ_BRACKET||(LA120_3>=VAR1 && LA120_3<=VAR2)||(LA120_3>=DECIMAL && LA120_3<=BLANK_NODE_LABEL)) ) {
                    alt120=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }

            switch (alt120) {
                case 1 :
                    // IbmSparql.g:673:7: varOrTerm
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_varOrTerm_in_graphNode4971);
                    varOrTerm267=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrTerm267.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:673:19: triplesNode
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_triplesNode_in_graphNode4975);
                    triplesNode268=triplesNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesNode268.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphNode"

    public static class graphNodePath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphNodePath"
    // IbmSparql.g:676:1: graphNodePath : ( varOrTerm | triplesNodePath );
    public final IbmSparqlParser.graphNodePath_return graphNodePath() throws RecognitionException {
        IbmSparqlParser.graphNodePath_return retval = new IbmSparqlParser.graphNodePath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.varOrTerm_return varOrTerm269 = null;

        IbmSparqlParser.triplesNodePath_return triplesNodePath270 = null;



        try {
            // IbmSparql.g:677:2: ( varOrTerm | triplesNodePath )
            int alt121=2;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt121=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA121_2 = input.LA(2);

                if ( (LA121_2==CLOSE_SQ_BRACKET) ) {
                    alt121=1;
                }
                else if ( (LA121_2==IRI_REF||LA121_2==PNAME_NS||LA121_2==OPEN_BRACE||(LA121_2>=VAR1 && LA121_2<=VAR2)||LA121_2==PNAME_LN||LA121_2==252||LA121_2==255||LA121_2==258) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 2, input);

                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA121_3 = input.LA(2);

                if ( (LA121_3==CLOSE_BRACE) ) {
                    alt121=1;
                }
                else if ( (LA121_3==IRI_REF||LA121_3==PNAME_NS||LA121_3==OPEN_BRACE||LA121_3==INTEGER||LA121_3==OPEN_SQ_BRACKET||(LA121_3>=VAR1 && LA121_3<=VAR2)||(LA121_3>=DECIMAL && LA121_3<=BLANK_NODE_LABEL)) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }

            switch (alt121) {
                case 1 :
                    // IbmSparql.g:677:7: varOrTerm
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_varOrTerm_in_graphNodePath4989);
                    varOrTerm269=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrTerm269.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:677:19: triplesNodePath
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_triplesNodePath_in_graphNodePath4993);
                    triplesNodePath270=triplesNodePath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesNodePath270.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphNodePath"

    public static class varOrTerm_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varOrTerm"
    // IbmSparql.g:681:1: varOrTerm : ( var | graphTerm );
    public final IbmSparqlParser.varOrTerm_return varOrTerm() throws RecognitionException {
        IbmSparqlParser.varOrTerm_return retval = new IbmSparqlParser.varOrTerm_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.var_return var271 = null;

        IbmSparqlParser.graphTerm_return graphTerm272 = null;



        try {
            // IbmSparql.g:682:2: ( var | graphTerm )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( ((LA122_0>=VAR1 && LA122_0<=VAR2)) ) {
                alt122=1;
            }
            else if ( (LA122_0==IRI_REF||LA122_0==PNAME_NS||LA122_0==OPEN_BRACE||LA122_0==INTEGER||LA122_0==OPEN_SQ_BRACKET||(LA122_0>=DECIMAL && LA122_0<=BLANK_NODE_LABEL)) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // IbmSparql.g:682:7: var
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_var_in_varOrTerm5008);
                    var271=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var271.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:682:13: graphTerm
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_graphTerm_in_varOrTerm5012);
                    graphTerm272=graphTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphTerm272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "varOrTerm"

    public static class varOrIRIref_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varOrIRIref"
    // IbmSparql.g:685:1: varOrIRIref : ( var | iRIref );
    public final IbmSparqlParser.varOrIRIref_return varOrIRIref() throws RecognitionException {
        IbmSparqlParser.varOrIRIref_return retval = new IbmSparqlParser.varOrIRIref_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.var_return var273 = null;

        IbmSparqlParser.iRIref_return iRIref274 = null;



        try {
            // IbmSparql.g:686:2: ( var | iRIref )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( ((LA123_0>=VAR1 && LA123_0<=VAR2)) ) {
                alt123=1;
            }
            else if ( (LA123_0==IRI_REF||LA123_0==PNAME_NS||LA123_0==PNAME_LN) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // IbmSparql.g:686:7: var
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_var_in_varOrIRIref5026);
                    var273=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var273.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:686:13: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIref_in_varOrIRIref5030);
                    iRIref274=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref274.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "varOrIRIref"

    public static class var_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "var"
    // IbmSparql.g:689:1: var : (v1= VAR1 -> ^( VAR $v1) | v2= VAR2 -> ^( VAR $v2) );
    public final IbmSparqlParser.var_return var() throws RecognitionException {
        IbmSparqlParser.var_return retval = new IbmSparqlParser.var_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token v1=null;
        Token v2=null;

        XTree v1_tree=null;
        XTree v2_tree=null;
        RewriteRuleTokenStream stream_VAR1=new RewriteRuleTokenStream(adaptor,"token VAR1");
        RewriteRuleTokenStream stream_VAR2=new RewriteRuleTokenStream(adaptor,"token VAR2");

        try {
            // IbmSparql.g:690:2: (v1= VAR1 -> ^( VAR $v1) | v2= VAR2 -> ^( VAR $v2) )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==VAR1) ) {
                alt124=1;
            }
            else if ( (LA124_0==VAR2) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // IbmSparql.g:690:7: v1= VAR1
                    {
                    v1=(Token)match(input,VAR1,FOLLOW_VAR1_in_var5046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VAR1.add(v1);



                    // AST REWRITE
                    // elements: v1
                    // token labels: v1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_v1=new RewriteRuleTokenStream(adaptor,"token v1",v1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 690:18: -> ^( VAR $v1)
                    {
                        // IbmSparql.g:690:22: ^( VAR $v1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VAR, "VAR"), root_1);

                        adaptor.addChild(root_1, stream_v1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:691:7: v2= VAR2
                    {
                    v2=(Token)match(input,VAR2,FOLLOW_VAR2_in_var5069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VAR2.add(v2);



                    // AST REWRITE
                    // elements: v2
                    // token labels: v2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_v2=new RewriteRuleTokenStream(adaptor,"token v2",v2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 691:18: -> ^( VAR $v2)
                    {
                        // IbmSparql.g:691:22: ^( VAR $v2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VAR, "VAR"), root_1);

                        adaptor.addChild(root_1, stream_v2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "var"

    public static class graphTerm_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphTerm"
    // IbmSparql.g:694:1: graphTerm : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | blankNode | nil );
    public final IbmSparqlParser.graphTerm_return graphTerm() throws RecognitionException {
        IbmSparqlParser.graphTerm_return retval = new IbmSparqlParser.graphTerm_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.iRIref_return iRIref275 = null;

        IbmSparqlParser.rDFLiteral_return rDFLiteral276 = null;

        IbmSparqlParser.numericLiteral_return numericLiteral277 = null;

        IbmSparqlParser.booleanLiteral_return booleanLiteral278 = null;

        IbmSparqlParser.blankNode_return blankNode279 = null;

        IbmSparqlParser.nil_return nil280 = null;



        try {
            // IbmSparql.g:695:2: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | blankNode | nil )
            int alt125=6;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt125=1;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt125=2;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt125=3;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt125=4;
                }
                break;
            case OPEN_SQ_BRACKET:
            case BLANK_NODE_LABEL:
                {
                alt125=5;
                }
                break;
            case OPEN_BRACE:
                {
                alt125=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // IbmSparql.g:695:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIref_in_graphTerm5096);
                    iRIref275=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref275.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:695:16: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_rDFLiteral_in_graphTerm5100);
                    rDFLiteral276=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral276.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:695:29: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_graphTerm5104);
                    numericLiteral277=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral277.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparql.g:695:46: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_graphTerm5108);
                    booleanLiteral278=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral278.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparql.g:695:63: blankNode
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_blankNode_in_graphTerm5112);
                    blankNode279=blankNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blankNode279.getTree());

                    }
                    break;
                case 6 :
                    // IbmSparql.g:695:75: nil
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_nil_in_graphTerm5116);
                    nil280=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nil280.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphTerm"

    public static class expression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // IbmSparql.g:698:1: expression : conditionalOrExpression ;
    public final IbmSparqlParser.expression_return expression() throws RecognitionException {
        IbmSparqlParser.expression_return retval = new IbmSparqlParser.expression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.conditionalOrExpression_return conditionalOrExpression281 = null;



        try {
            // IbmSparql.g:699:2: ( conditionalOrExpression )
            // IbmSparql.g:699:7: conditionalOrExpression
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_expression5130);
            conditionalOrExpression281=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalOrExpression281.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // IbmSparql.g:702:1: conditionalOrExpression : c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )* -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ ) -> $c1;
    public final IbmSparqlParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        IbmSparqlParser.conditionalOrExpression_return retval = new IbmSparqlParser.conditionalOrExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token LOGICAL_OR282=null;
        List list_c2=null;
        IbmSparqlParser.conditionalAndExpression_return c1 = null;

        RuleReturnScope c2 = null;
        XTree LOGICAL_OR282_tree=null;
        RewriteRuleTokenStream stream_LOGICAL_OR=new RewriteRuleTokenStream(adaptor,"token LOGICAL_OR");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        boolean isOR=false;
        try {
            // IbmSparql.g:704:2: (c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )* -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ ) -> $c1)
            // IbmSparql.g:704:7: c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )*
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5152);
            c1=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalAndExpression.add(c1.getTree());
            // IbmSparql.g:704:35: ( LOGICAL_OR c2+= conditionalAndExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==LOGICAL_OR) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // IbmSparql.g:704:37: LOGICAL_OR c2+= conditionalAndExpression
            	    {
            	    LOGICAL_OR282=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_conditionalOrExpression5156); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LOGICAL_OR.add(LOGICAL_OR282);

            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5160);
            	    c2=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_conditionalAndExpression.add(c2.getTree());
            	    if (list_c2==null) list_c2=new ArrayList();
            	    list_c2.add(c2.getTree());

            	    if ( state.backtracking==0 ) {
            	      isOR=true;
            	    }

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);



            // AST REWRITE
            // elements: c1, LOGICAL_OR, c2, c1
            // token labels: 
            // rule labels: retval, c1
            // token list labels: 
            // rule list labels: c2
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);
            RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"token c2",list_c2);
            root_0 = (XTree)adaptor.nil();
            // 706:3: -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ )
            if (isOR==true) {
                // IbmSparql.g:706:22: ^( LOGICAL_OR $c1 ( $c2)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_LOGICAL_OR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_c1.nextTree());
                if ( !(stream_c2.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_c2.hasNext() ) {
                    adaptor.addChild(root_1, stream_c2.nextTree());

                }
                stream_c2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 707:3: -> $c1
            {
                adaptor.addChild(root_0, stream_c1.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // IbmSparql.g:710:1: conditionalAndExpression : v1= valueLogical ( LOGICAL_AND v2+= valueLogical )* -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ ) -> $v1;
    public final IbmSparqlParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        IbmSparqlParser.conditionalAndExpression_return retval = new IbmSparqlParser.conditionalAndExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token LOGICAL_AND283=null;
        List list_v2=null;
        IbmSparqlParser.valueLogical_return v1 = null;

        RuleReturnScope v2 = null;
        XTree LOGICAL_AND283_tree=null;
        RewriteRuleTokenStream stream_LOGICAL_AND=new RewriteRuleTokenStream(adaptor,"token LOGICAL_AND");
        RewriteRuleSubtreeStream stream_valueLogical=new RewriteRuleSubtreeStream(adaptor,"rule valueLogical");
        boolean isAnd=false;
        try {
            // IbmSparql.g:712:2: (v1= valueLogical ( LOGICAL_AND v2+= valueLogical )* -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ ) -> $v1)
            // IbmSparql.g:712:7: v1= valueLogical ( LOGICAL_AND v2+= valueLogical )*
            {
            pushFollow(FOLLOW_valueLogical_in_conditionalAndExpression5220);
            v1=valueLogical();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_valueLogical.add(v1.getTree());
            // IbmSparql.g:712:23: ( LOGICAL_AND v2+= valueLogical )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==LOGICAL_AND) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // IbmSparql.g:712:25: LOGICAL_AND v2+= valueLogical
            	    {
            	    LOGICAL_AND283=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_conditionalAndExpression5224); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LOGICAL_AND.add(LOGICAL_AND283);

            	    pushFollow(FOLLOW_valueLogical_in_conditionalAndExpression5228);
            	    v2=valueLogical();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_valueLogical.add(v2.getTree());
            	    if (list_v2==null) list_v2=new ArrayList();
            	    list_v2.add(v2.getTree());

            	    if ( state.backtracking==0 ) {
            	      isAnd=true;
            	    }

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);



            // AST REWRITE
            // elements: v1, v1, LOGICAL_AND, v2
            // token labels: 
            // rule labels: v1, retval
            // token list labels: 
            // rule list labels: v2
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v1=new RewriteRuleSubtreeStream(adaptor,"rule v1",v1!=null?v1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v2=new RewriteRuleSubtreeStream(adaptor,"token v2",list_v2);
            root_0 = (XTree)adaptor.nil();
            // 714:3: -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ )
            if (isAnd==true) {
                // IbmSparql.g:714:23: ^( LOGICAL_AND $v1 ( $v2)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_LOGICAL_AND.nextNode(), root_1);

                adaptor.addChild(root_1, stream_v1.nextTree());
                if ( !(stream_v2.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_v2.hasNext() ) {
                    adaptor.addChild(root_1, stream_v2.nextTree());

                }
                stream_v2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 715:3: -> $v1
            {
                adaptor.addChild(root_0, stream_v1.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class valueLogical_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "valueLogical"
    // IbmSparql.g:718:1: valueLogical : relationalExpression ;
    public final IbmSparqlParser.valueLogical_return valueLogical() throws RecognitionException {
        IbmSparqlParser.valueLogical_return retval = new IbmSparqlParser.valueLogical_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.relationalExpression_return relationalExpression284 = null;



        try {
            // IbmSparql.g:719:2: ( relationalExpression )
            // IbmSparql.g:719:7: relationalExpression
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_valueLogical5279);
            relationalExpression284=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression284.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "valueLogical"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // IbmSparql.g:722:1: relationalExpression : n1= numericExpression ( '=' n2= numericExpression | '!=' n3= numericExpression | LT n4= numericExpression | '>' n5= numericExpression | LTE n6= numericExpression | '>=' n7= numericExpression | IN e1= expressionList | NOT IN e2= expressionList )? ;
    public final IbmSparqlParser.relationalExpression_return relationalExpression() throws RecognitionException {
        IbmSparqlParser.relationalExpression_return retval = new IbmSparqlParser.relationalExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal285=null;
        Token string_literal286=null;
        Token LT287=null;
        Token char_literal288=null;
        Token LTE289=null;
        Token string_literal290=null;
        Token IN291=null;
        Token NOT292=null;
        Token IN293=null;
        IbmSparqlParser.numericExpression_return n1 = null;

        IbmSparqlParser.numericExpression_return n2 = null;

        IbmSparqlParser.numericExpression_return n3 = null;

        IbmSparqlParser.numericExpression_return n4 = null;

        IbmSparqlParser.numericExpression_return n5 = null;

        IbmSparqlParser.numericExpression_return n6 = null;

        IbmSparqlParser.numericExpression_return n7 = null;

        IbmSparqlParser.expressionList_return e1 = null;

        IbmSparqlParser.expressionList_return e2 = null;


        XTree char_literal285_tree=null;
        XTree string_literal286_tree=null;
        XTree LT287_tree=null;
        XTree char_literal288_tree=null;
        XTree LTE289_tree=null;
        XTree string_literal290_tree=null;
        XTree IN291_tree=null;
        XTree NOT292_tree=null;
        XTree IN293_tree=null;

        try {
            // IbmSparql.g:723:2: (n1= numericExpression ( '=' n2= numericExpression | '!=' n3= numericExpression | LT n4= numericExpression | '>' n5= numericExpression | LTE n6= numericExpression | '>=' n7= numericExpression | IN e1= expressionList | NOT IN e2= expressionList )? )
            // IbmSparql.g:723:7: n1= numericExpression ( '=' n2= numericExpression | '!=' n3= numericExpression | LT n4= numericExpression | '>' n5= numericExpression | LTE n6= numericExpression | '>=' n7= numericExpression | IN e1= expressionList | NOT IN e2= expressionList )?
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_numericExpression_in_relationalExpression5295);
            n1=numericExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n1.getTree());
            // IbmSparql.g:723:28: ( '=' n2= numericExpression | '!=' n3= numericExpression | LT n4= numericExpression | '>' n5= numericExpression | LTE n6= numericExpression | '>=' n7= numericExpression | IN e1= expressionList | NOT IN e2= expressionList )?
            int alt128=9;
            switch ( input.LA(1) ) {
                case 259:
                    {
                    alt128=1;
                    }
                    break;
                case 260:
                    {
                    alt128=2;
                    }
                    break;
                case LT:
                    {
                    alt128=3;
                    }
                    break;
                case 261:
                    {
                    alt128=4;
                    }
                    break;
                case LTE:
                    {
                    alt128=5;
                    }
                    break;
                case 262:
                    {
                    alt128=6;
                    }
                    break;
                case IN:
                    {
                    alt128=7;
                    }
                    break;
                case NOT:
                    {
                    alt128=8;
                    }
                    break;
            }

            switch (alt128) {
                case 1 :
                    // IbmSparql.g:723:30: '=' n2= numericExpression
                    {
                    char_literal285=(Token)match(input,259,FOLLOW_259_in_relationalExpression5299); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal285_tree = (XTree)adaptor.create(char_literal285);
                    root_0 = (XTree)adaptor.becomeRoot(char_literal285_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5306);
                    n2=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n2.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:724:15: '!=' n3= numericExpression
                    {
                    string_literal286=(Token)match(input,260,FOLLOW_260_in_relationalExpression5322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal286_tree = (XTree)adaptor.create(string_literal286);
                    root_0 = (XTree)adaptor.becomeRoot(string_literal286_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5328);
                    n3=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n3.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:725:15: LT n4= numericExpression
                    {
                    LT287=(Token)match(input,LT,FOLLOW_LT_in_relationalExpression5347); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LT287_tree = (XTree)adaptor.create(LT287);
                    root_0 = (XTree)adaptor.becomeRoot(LT287_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5354);
                    n4=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n4.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparql.g:726:15: '>' n5= numericExpression
                    {
                    char_literal288=(Token)match(input,261,FOLLOW_261_in_relationalExpression5373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal288_tree = (XTree)adaptor.create(char_literal288);
                    root_0 = (XTree)adaptor.becomeRoot(char_literal288_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5380);
                    n5=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n5.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparql.g:727:15: LTE n6= numericExpression
                    {
                    LTE289=(Token)match(input,LTE,FOLLOW_LTE_in_relationalExpression5399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LTE289_tree = (XTree)adaptor.create(LTE289);
                    root_0 = (XTree)adaptor.becomeRoot(LTE289_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5405);
                    n6=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n6.getTree());

                    }
                    break;
                case 6 :
                    // IbmSparql.g:728:15: '>=' n7= numericExpression
                    {
                    string_literal290=(Token)match(input,262,FOLLOW_262_in_relationalExpression5424); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal290_tree = (XTree)adaptor.create(string_literal290);
                    root_0 = (XTree)adaptor.becomeRoot(string_literal290_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5430);
                    n7=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n7.getTree());

                    }
                    break;
                case 7 :
                    // IbmSparql.g:729:15: IN e1= expressionList
                    {
                    IN291=(Token)match(input,IN,FOLLOW_IN_in_relationalExpression5449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN291_tree = (XTree)adaptor.create(IN291);
                    root_0 = (XTree)adaptor.becomeRoot(IN291_tree, root_0);
                    }
                    pushFollow(FOLLOW_expressionList_in_relationalExpression5455);
                    e1=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());

                    }
                    break;
                case 8 :
                    // IbmSparql.g:730:15: NOT IN e2= expressionList
                    {
                    NOT292=(Token)match(input,NOT,FOLLOW_NOT_in_relationalExpression5479); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT292_tree = (XTree)adaptor.create(NOT292);
                    root_0 = (XTree)adaptor.becomeRoot(NOT292_tree, root_0);
                    }
                    IN293=(Token)match(input,IN,FOLLOW_IN_in_relationalExpression5482); if (state.failed) return retval;
                    pushFollow(FOLLOW_expressionList_in_relationalExpression5488);
                    e2=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class numericExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericExpression"
    // IbmSparql.g:734:1: numericExpression : additiveExpression ;
    public final IbmSparqlParser.numericExpression_return numericExpression() throws RecognitionException {
        IbmSparqlParser.numericExpression_return retval = new IbmSparqlParser.numericExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.additiveExpression_return additiveExpression294 = null;



        try {
            // IbmSparql.g:735:2: ( additiveExpression )
            // IbmSparql.g:735:6: additiveExpression
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_numericExpression5554);
            additiveExpression294=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression294.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // IbmSparql.g:738:1: additiveExpression : (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) | litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) | litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )* ;
    public final IbmSparqlParser.additiveExpression_return additiveExpression() throws RecognitionException {
        IbmSparqlParser.additiveExpression_return retval = new IbmSparqlParser.additiveExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token op1=null;
        Token op2=null;
        Token char_literal295=null;
        Token char_literal296=null;
        Token char_literal297=null;
        Token char_literal298=null;
        Token char_literal299=null;
        Token char_literal300=null;
        IbmSparqlParser.multiplicativeExpression_return lhs = null;

        IbmSparqlParser.multiplicativeExpression_return rhs1 = null;

        IbmSparqlParser.multiplicativeExpression_return rhs2 = null;

        IbmSparqlParser.numericLiteralPositive_return litp = null;

        IbmSparqlParser.multiplicativeExpression_return rhs3 = null;

        IbmSparqlParser.numericLiteralNegative_return litn = null;

        IbmSparqlParser.multiplicativeExpression_return rhs4 = null;


        XTree op1_tree=null;
        XTree op2_tree=null;
        XTree char_literal295_tree=null;
        XTree char_literal296_tree=null;
        XTree char_literal297_tree=null;
        XTree char_literal298_tree=null;
        XTree char_literal299_tree=null;
        XTree char_literal300_tree=null;
        RewriteRuleTokenStream stream_263=new RewriteRuleTokenStream(adaptor,"token 263");
        RewriteRuleTokenStream stream_251=new RewriteRuleTokenStream(adaptor,"token 251");
        RewriteRuleTokenStream stream_257=new RewriteRuleTokenStream(adaptor,"token 257");
        RewriteRuleTokenStream stream_254=new RewriteRuleTokenStream(adaptor,"token 254");
        RewriteRuleSubtreeStream stream_numericLiteralNegative=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteralNegative");
        RewriteRuleSubtreeStream stream_numericLiteralPositive=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteralPositive");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try {
            // IbmSparql.g:739:2: ( (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) | litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) | litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )* )
            // IbmSparql.g:739:6: (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) | litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) | litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )*
            {
            // IbmSparql.g:739:6: (lhs= multiplicativeExpression -> $lhs)
            // IbmSparql.g:739:7: lhs= multiplicativeExpression
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5574);
            lhs=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(lhs.getTree());


            // AST REWRITE
            // elements: lhs
            // token labels: 
            // rule labels: retval, lhs
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 739:36: -> $lhs
            {
                adaptor.addChild(root_0, stream_lhs.nextTree());

            }

            retval.tree = root_0;}
            }

            // IbmSparql.g:740:10: ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) | litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) | litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )*
            loop133:
            do {
                int alt133=5;
                switch ( input.LA(1) ) {
                case 257:
                    {
                    alt133=1;
                    }
                    break;
                case 263:
                    {
                    alt133=2;
                    }
                    break;
                case INTEGER_POSITIVE:
                case DECIMAL_POSITIVE:
                case DOUBLE_POSITIVE:
                    {
                    alt133=3;
                    }
                    break;
                case INTEGER_NEGATIVE:
                case DECIMAL_NEGATIVE:
                case DOUBLE_NEGATIVE:
                    {
                    alt133=4;
                    }
                    break;

                }

                switch (alt133) {
            	case 1 :
            	    // IbmSparql.g:740:12: '+' rhs1= multiplicativeExpression
            	    {
            	    char_literal295=(Token)match(input,257,FOLLOW_257_in_additiveExpression5593); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_257.add(char_literal295);

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5597);
            	    rhs1=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs1.getTree());


            	    // AST REWRITE
            	    // elements: 257, rhs1, additiveExpression
            	    // token labels: 
            	    // rule labels: retval, rhs1
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_rhs1=new RewriteRuleSubtreeStream(adaptor,"rule rhs1",rhs1!=null?rhs1.tree:null);

            	    root_0 = (XTree)adaptor.nil();
            	    // 740:46: -> ^( '+' $additiveExpression $rhs1)
            	    {
            	        // IbmSparql.g:740:49: ^( '+' $additiveExpression $rhs1)
            	        {
            	        XTree root_1 = (XTree)adaptor.nil();
            	        root_1 = (XTree)adaptor.becomeRoot(stream_257.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_rhs1.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 2 :
            	    // IbmSparql.g:741:12: '-' rhs2= multiplicativeExpression
            	    {
            	    char_literal296=(Token)match(input,263,FOLLOW_263_in_additiveExpression5622); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_263.add(char_literal296);

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5626);
            	    rhs2=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs2.getTree());


            	    // AST REWRITE
            	    // elements: 263, additiveExpression, rhs2
            	    // token labels: 
            	    // rule labels: retval, rhs2
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_rhs2=new RewriteRuleSubtreeStream(adaptor,"rule rhs2",rhs2!=null?rhs2.tree:null);

            	    root_0 = (XTree)adaptor.nil();
            	    // 741:46: -> ^( '-' $additiveExpression $rhs2)
            	    {
            	        // IbmSparql.g:741:49: ^( '-' $additiveExpression $rhs2)
            	        {
            	        XTree root_1 = (XTree)adaptor.nil();
            	        root_1 = (XTree)adaptor.becomeRoot(stream_263.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_rhs2.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 3 :
            	    // IbmSparql.g:742:12: litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) )
            	    {
            	    pushFollow(FOLLOW_numericLiteralPositive_in_additiveExpression5653);
            	    litp=numericLiteralPositive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericLiteralPositive.add(litp.getTree());
            	    // IbmSparql.g:743:13: (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) )
            	    int alt130=2;
            	    int LA130_0 = input.LA(1);

            	    if ( (LA130_0==251||LA130_0==254) ) {
            	        alt130=1;
            	    }
            	    else if ( (LA130_0==LTE||(LA130_0>=AS && LA130_0<=CLOSE_BRACE)||LA130_0==SEMICOLON||LA130_0==COMMA||(LA130_0>=LOGICAL_OR && LA130_0<=NOT)||(LA130_0>=INTEGER_POSITIVE && LA130_0<=DOUBLE_NEGATIVE)||LA130_0==257||(LA130_0>=259 && LA130_0<=263)) ) {
            	        alt130=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 130, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt130) {
            	        case 1 :
            	            // IbmSparql.g:743:15: op1= ( '*' | '/' ) rhs3= multiplicativeExpression
            	            {
            	            // IbmSparql.g:743:19: ( '*' | '/' )
            	            int alt129=2;
            	            int LA129_0 = input.LA(1);

            	            if ( (LA129_0==251) ) {
            	                alt129=1;
            	            }
            	            else if ( (LA129_0==254) ) {
            	                alt129=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 129, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt129) {
            	                case 1 :
            	                    // IbmSparql.g:743:20: '*'
            	                    {
            	                    char_literal297=(Token)match(input,251,FOLLOW_251_in_additiveExpression5673); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_251.add(char_literal297);


            	                    }
            	                    break;
            	                case 2 :
            	                    // IbmSparql.g:743:24: '/'
            	                    {
            	                    char_literal298=(Token)match(input,254,FOLLOW_254_in_additiveExpression5675); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_254.add(char_literal298);


            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5680);
            	            rhs3=multiplicativeExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs3.getTree());


            	            // AST REWRITE
            	            // elements: op1, rhs3, additiveExpression, litp
            	            // token labels: op1
            	            // rule labels: rhs3, retval, litp
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_op1=new RewriteRuleTokenStream(adaptor,"token op1",op1);
            	            RewriteRuleSubtreeStream stream_rhs3=new RewriteRuleSubtreeStream(adaptor,"rule rhs3",rhs3!=null?rhs3.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	            RewriteRuleSubtreeStream stream_litp=new RewriteRuleSubtreeStream(adaptor,"rule litp",litp!=null?litp.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 744:15: -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) )
            	            {
            	                // IbmSparql.g:744:18: ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) )
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BROKEN_PLUS, "BROKEN_PLUS"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                // IbmSparql.g:744:52: ^( $op1 $litp $rhs3)
            	                {
            	                XTree root_2 = (XTree)adaptor.nil();
            	                root_2 = (XTree)adaptor.becomeRoot(stream_op1.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_litp.nextTree());
            	                adaptor.addChild(root_2, stream_rhs3.nextTree());

            	                adaptor.addChild(root_1, root_2);
            	                }

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 2 :
            	            // IbmSparql.g:746:15: 
            	            {

            	            // AST REWRITE
            	            // elements: litp, additiveExpression
            	            // token labels: 
            	            // rule labels: retval, litp
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	            RewriteRuleSubtreeStream stream_litp=new RewriteRuleSubtreeStream(adaptor,"rule litp",litp!=null?litp.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 746:15: -> ^( BROKEN_PLUS $additiveExpression $litp)
            	            {
            	                // IbmSparql.g:746:18: ^( BROKEN_PLUS $additiveExpression $litp)
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BROKEN_PLUS, "BROKEN_PLUS"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_litp.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // IbmSparql.g:748:12: litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) )
            	    {
            	    pushFollow(FOLLOW_numericLiteralNegative_in_additiveExpression5783);
            	    litn=numericLiteralNegative();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericLiteralNegative.add(litn.getTree());
            	    // IbmSparql.g:749:13: (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) )
            	    int alt132=2;
            	    int LA132_0 = input.LA(1);

            	    if ( (LA132_0==251||LA132_0==254) ) {
            	        alt132=1;
            	    }
            	    else if ( (LA132_0==LTE||(LA132_0>=AS && LA132_0<=CLOSE_BRACE)||LA132_0==SEMICOLON||LA132_0==COMMA||(LA132_0>=LOGICAL_OR && LA132_0<=NOT)||(LA132_0>=INTEGER_POSITIVE && LA132_0<=DOUBLE_NEGATIVE)||LA132_0==257||(LA132_0>=259 && LA132_0<=263)) ) {
            	        alt132=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 132, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt132) {
            	        case 1 :
            	            // IbmSparql.g:749:15: op2= ( '*' | '/' ) rhs4= multiplicativeExpression
            	            {
            	            // IbmSparql.g:749:19: ( '*' | '/' )
            	            int alt131=2;
            	            int LA131_0 = input.LA(1);

            	            if ( (LA131_0==251) ) {
            	                alt131=1;
            	            }
            	            else if ( (LA131_0==254) ) {
            	                alt131=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 131, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt131) {
            	                case 1 :
            	                    // IbmSparql.g:749:20: '*'
            	                    {
            	                    char_literal299=(Token)match(input,251,FOLLOW_251_in_additiveExpression5803); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_251.add(char_literal299);


            	                    }
            	                    break;
            	                case 2 :
            	                    // IbmSparql.g:749:24: '/'
            	                    {
            	                    char_literal300=(Token)match(input,254,FOLLOW_254_in_additiveExpression5805); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_254.add(char_literal300);


            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5810);
            	            rhs4=multiplicativeExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs4.getTree());


            	            // AST REWRITE
            	            // elements: litn, rhs4, op2, additiveExpression
            	            // token labels: op2
            	            // rule labels: rhs4, litn, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_op2=new RewriteRuleTokenStream(adaptor,"token op2",op2);
            	            RewriteRuleSubtreeStream stream_rhs4=new RewriteRuleSubtreeStream(adaptor,"rule rhs4",rhs4!=null?rhs4.tree:null);
            	            RewriteRuleSubtreeStream stream_litn=new RewriteRuleSubtreeStream(adaptor,"rule litn",litn!=null?litn.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 750:15: -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) )
            	            {
            	                // IbmSparql.g:750:18: ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) )
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BROKEN_MINUS, "BROKEN_MINUS"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                // IbmSparql.g:750:53: ^( $op2 $litn $rhs4)
            	                {
            	                XTree root_2 = (XTree)adaptor.nil();
            	                root_2 = (XTree)adaptor.becomeRoot(stream_op2.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_litn.nextTree());
            	                adaptor.addChild(root_2, stream_rhs4.nextTree());

            	                adaptor.addChild(root_1, root_2);
            	                }

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 2 :
            	            // IbmSparql.g:752:15: 
            	            {

            	            // AST REWRITE
            	            // elements: additiveExpression, litn
            	            // token labels: 
            	            // rule labels: litn, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_litn=new RewriteRuleSubtreeStream(adaptor,"rule litn",litn!=null?litn.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 752:15: -> ^( BROKEN_MINUS $additiveExpression $litn)
            	            {
            	                // IbmSparql.g:752:18: ^( BROKEN_MINUS $additiveExpression $litn)
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BROKEN_MINUS, "BROKEN_MINUS"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_litn.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // IbmSparql.g:757:1: multiplicativeExpression : unaryExpression ( '*' unaryExpression | '/' unaryExpression )* ;
    public final IbmSparqlParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        IbmSparqlParser.multiplicativeExpression_return retval = new IbmSparqlParser.multiplicativeExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal302=null;
        Token char_literal304=null;
        IbmSparqlParser.unaryExpression_return unaryExpression301 = null;

        IbmSparqlParser.unaryExpression_return unaryExpression303 = null;

        IbmSparqlParser.unaryExpression_return unaryExpression305 = null;


        XTree char_literal302_tree=null;
        XTree char_literal304_tree=null;

        try {
            // IbmSparql.g:758:2: ( unaryExpression ( '*' unaryExpression | '/' unaryExpression )* )
            // IbmSparql.g:758:6: unaryExpression ( '*' unaryExpression | '/' unaryExpression )*
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5927);
            unaryExpression301=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression301.getTree());
            // IbmSparql.g:758:23: ( '*' unaryExpression | '/' unaryExpression )*
            loop134:
            do {
                int alt134=3;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==251) ) {
                    alt134=1;
                }
                else if ( (LA134_0==254) ) {
                    alt134=2;
                }


                switch (alt134) {
            	case 1 :
            	    // IbmSparql.g:758:25: '*' unaryExpression
            	    {
            	    char_literal302=(Token)match(input,251,FOLLOW_251_in_multiplicativeExpression5932); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal302_tree = (XTree)adaptor.create(char_literal302);
            	    root_0 = (XTree)adaptor.becomeRoot(char_literal302_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5935);
            	    unaryExpression303=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression303.getTree());

            	    }
            	    break;
            	case 2 :
            	    // IbmSparql.g:759:10: '/' unaryExpression
            	    {
            	    char_literal304=(Token)match(input,254,FOLLOW_254_in_multiplicativeExpression5947); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal304_tree = (XTree)adaptor.create(char_literal304);
            	    root_0 = (XTree)adaptor.becomeRoot(char_literal304_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5950);
            	    unaryExpression305=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression305.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // IbmSparql.g:763:1: unaryExpression : ( '!' primaryExpression | '+' primaryExpression | '-' primaryExpression | primaryExpression );
    public final IbmSparqlParser.unaryExpression_return unaryExpression() throws RecognitionException {
        IbmSparqlParser.unaryExpression_return retval = new IbmSparqlParser.unaryExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal306=null;
        Token char_literal308=null;
        Token char_literal310=null;
        IbmSparqlParser.primaryExpression_return primaryExpression307 = null;

        IbmSparqlParser.primaryExpression_return primaryExpression309 = null;

        IbmSparqlParser.primaryExpression_return primaryExpression311 = null;

        IbmSparqlParser.primaryExpression_return primaryExpression312 = null;


        XTree char_literal306_tree=null;
        XTree char_literal308_tree=null;
        XTree char_literal310_tree=null;

        try {
            // IbmSparql.g:764:2: ( '!' primaryExpression | '+' primaryExpression | '-' primaryExpression | primaryExpression )
            int alt135=4;
            switch ( input.LA(1) ) {
            case 258:
                {
                alt135=1;
                }
                break;
            case 257:
                {
                alt135=2;
                }
                break;
            case 263:
                {
                alt135=3;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case OPEN_BRACE:
            case INTEGER:
            case VAR1:
            case VAR2:
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case UUID:
            case STRUUID:
            case MD5:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
            case COUNT:
            case SUM:
            case MIN:
            case MAX:
            case AVG:
            case SAMPLE:
            case GROUP_CONCAT:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
                {
                alt135=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }

            switch (alt135) {
                case 1 :
                    // IbmSparql.g:764:4: '!' primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal306=(Token)match(input,258,FOLLOW_258_in_unaryExpression5976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal306_tree = (XTree)adaptor.create(char_literal306);
                    root_0 = (XTree)adaptor.becomeRoot(char_literal306_tree, root_0);
                    }
                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression5979);
                    primaryExpression307=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression307.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:765:5: '+' primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal308=(Token)match(input,257,FOLLOW_257_in_unaryExpression5985); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal308_tree = (XTree)adaptor.create(char_literal308);
                    root_0 = (XTree)adaptor.becomeRoot(char_literal308_tree, root_0);
                    }
                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression5988);
                    primaryExpression309=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression309.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:766:5: '-' primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal310=(Token)match(input,263,FOLLOW_263_in_unaryExpression5994); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal310_tree = (XTree)adaptor.create(char_literal310);
                    root_0 = (XTree)adaptor.becomeRoot(char_literal310_tree, root_0);
                    }
                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression5997);
                    primaryExpression311=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression311.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparql.g:767:5: primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6003);
                    primaryExpression312=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression312.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class primaryExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpression"
    // IbmSparql.g:770:1: primaryExpression : ( brackettedExpression | builtInCall | iRIrefOrFunction | rDFLiteral | numericLiteral | booleanLiteral | var | aggregate );
    public final IbmSparqlParser.primaryExpression_return primaryExpression() throws RecognitionException {
        IbmSparqlParser.primaryExpression_return retval = new IbmSparqlParser.primaryExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.brackettedExpression_return brackettedExpression313 = null;

        IbmSparqlParser.builtInCall_return builtInCall314 = null;

        IbmSparqlParser.iRIrefOrFunction_return iRIrefOrFunction315 = null;

        IbmSparqlParser.rDFLiteral_return rDFLiteral316 = null;

        IbmSparqlParser.numericLiteral_return numericLiteral317 = null;

        IbmSparqlParser.booleanLiteral_return booleanLiteral318 = null;

        IbmSparqlParser.var_return var319 = null;

        IbmSparqlParser.aggregate_return aggregate320 = null;



        try {
            // IbmSparql.g:771:2: ( brackettedExpression | builtInCall | iRIrefOrFunction | rDFLiteral | numericLiteral | booleanLiteral | var | aggregate )
            int alt136=8;
            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt136=1;
                }
                break;
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case UUID:
            case STRUUID:
            case MD5:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
                {
                alt136=2;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt136=3;
                }
                break;
            case STRING_LITERAL1:
            case STRING_LITERAL2:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt136=4;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt136=5;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt136=6;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt136=7;
                }
                break;
            case COUNT:
            case SUM:
            case MIN:
            case MAX:
            case AVG:
            case SAMPLE:
            case GROUP_CONCAT:
                {
                alt136=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }

            switch (alt136) {
                case 1 :
                    // IbmSparql.g:771:6: brackettedExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_brackettedExpression_in_primaryExpression6020);
                    brackettedExpression313=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression313.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:772:5: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_builtInCall_in_primaryExpression6027);
                    builtInCall314=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall314.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:773:5: iRIrefOrFunction
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIrefOrFunction_in_primaryExpression6034);
                    iRIrefOrFunction315=iRIrefOrFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIrefOrFunction315.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparql.g:774:5: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_rDFLiteral_in_primaryExpression6041);
                    rDFLiteral316=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral316.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparql.g:775:5: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_primaryExpression6048);
                    numericLiteral317=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral317.getTree());

                    }
                    break;
                case 6 :
                    // IbmSparql.g:776:5: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_primaryExpression6055);
                    booleanLiteral318=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral318.getTree());

                    }
                    break;
                case 7 :
                    // IbmSparql.g:777:5: var
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_var_in_primaryExpression6062);
                    var319=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var319.getTree());

                    }
                    break;
                case 8 :
                    // IbmSparql.g:778:5: aggregate
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_aggregate_in_primaryExpression6069);
                    aggregate320=aggregate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregate320.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"

    public static class brackettedExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackettedExpression"
    // IbmSparql.g:781:1: brackettedExpression : ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE ) -> ^( EXPRESSION $e) ;
    public final IbmSparqlParser.brackettedExpression_return brackettedExpression() throws RecognitionException {
        IbmSparqlParser.brackettedExpression_return retval = new IbmSparqlParser.brackettedExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE321=null;
        Token CLOSE_BRACE322=null;
        IbmSparqlParser.expression_return e = null;


        XTree OPEN_BRACE321_tree=null;
        XTree CLOSE_BRACE322_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // IbmSparql.g:782:2: ( ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE ) -> ^( EXPRESSION $e) )
            // IbmSparql.g:782:6: ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE )
            {
            // IbmSparql.g:782:6: ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE )
            // IbmSparql.g:782:36: OPEN_BRACE e= expression CLOSE_BRACE
            {
            OPEN_BRACE321=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_brackettedExpression6099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE321);

            pushFollow(FOLLOW_expression_in_brackettedExpression6103);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());
            CLOSE_BRACE322=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_brackettedExpression6105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE322);


            }



            // AST REWRITE
            // elements: e
            // token labels: 
            // rule labels: retval, e
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 784:3: -> ^( EXPRESSION $e)
            {
                // IbmSparql.g:784:7: ^( EXPRESSION $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(EXPRESSION, "EXPRESSION"), root_1);

                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "brackettedExpression"

    public static class builtInCall_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtInCall"
    // IbmSparql.g:787:1: builtInCall : ( STR OPEN_BRACE e1= expression CLOSE_BRACE -> ^( STR $e1) | LANG OPEN_BRACE e2= expression CLOSE_BRACE -> ^( LANG $e2) | LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE -> ^( LANGMATCHES $e3 $e4) | DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE -> ^( DATATYPE $e5) | BOUND OPEN_BRACE v= var CLOSE_BRACE -> ^( BOUND $v) | IRI OPEN_BRACE e51= expression CLOSE_BRACE -> ^( IRI $e51) | URI OPEN_BRACE e6= expression CLOSE_BRACE -> ^( URI $e6) | BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil ) -> ^( BNODE ( $e7)? ) | RAND nil -> ^( RAND NIL ) | ABS OPEN_BRACE e8= expression CLOSE_BRACE -> ^( ABS $e8) | CEIL OPEN_BRACE e9= expression CLOSE_BRACE -> ^( CEIL $e9) | FLOOR OPEN_BRACE e10= expression CLOSE_BRACE -> ^( FLOOR $e10) | ROUND OPEN_BRACE e11= expression CLOSE_BRACE -> ^( ROUND $e11) | CONCAT e12= expressionList -> ^( CONCAT $e12) | s= substringExpression -> $s | STRLEN OPEN_BRACE e13= expression CLOSE_BRACE -> ^( STRLEN $e13) | strReplaceExpression | UCASE OPEN_BRACE e14= expression CLOSE_BRACE -> ^( UCASE $e14) | LCASE OPEN_BRACE e15= expression CLOSE_BRACE -> ^( LCASE $e15) | ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE -> ^( ENCODE_FOR_URI $e16) | CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE -> ^( CONTAINS $e17 $e18) | STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE -> ^( STRSTARTS $e19 $e20) | STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRENDS $e21 $e22) | STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRBEFORE $e21 $e22) | STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRAFTER $e21 $e22) | YEAR OPEN_BRACE e23= expression CLOSE_BRACE -> ^( YEAR $e23) | MONTH OPEN_BRACE e24= expression CLOSE_BRACE -> ^( MONTH $e24) | DAY OPEN_BRACE e25= expression CLOSE_BRACE -> ^( DAY $e25) | HOURS OPEN_BRACE e26= expression CLOSE_BRACE -> ^( HOURS $e26) | MINUTES OPEN_BRACE e27= expression CLOSE_BRACE -> ^( MINUTES $e27) | SECONDS OPEN_BRACE e28= expression CLOSE_BRACE -> ^( SECONDS $e28) | TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE -> ^( TIMEZONE $e29) | TZ OPEN_BRACE e30= expression CLOSE_BRACE -> ^( TZ $e30) | NOW nil -> NOW | UUID nil -> UUID | STRUUID nil -> STRUUID | MD5 OPEN_BRACE e31= expression CLOSE_BRACE -> ^( MD5 $e31) | SHA1 OPEN_BRACE e32= expression CLOSE_BRACE -> ^( SHA1 $e32) | SHA224 OPEN_BRACE e33= expression CLOSE_BRACE -> ^( SHA224 $e33) | SHA256 OPEN_BRACE e34= expression CLOSE_BRACE -> ^( SHA256 $e34) | SHA384 OPEN_BRACE e35= expression CLOSE_BRACE -> ^( SHA384 $e35) | SHA512 OPEN_BRACE e36= expression CLOSE_BRACE -> ^( SHA512 $e36) | COALESCE e37= expressionList -> ^( COALESCE $e37) | IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE -> ^( IF $e38 $e39 $e40) | STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE -> ^( STRLANG $e41 $e42) | STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE -> ^( STRDT $e43 $e44) | SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE -> ^( SAMETERM $e45 $e46) | ISIRI OPEN_BRACE e47= expression CLOSE_BRACE -> ^( ISIRI $e47) | ISURI OPEN_BRACE e48= expression CLOSE_BRACE -> ^( ISURI $e48) | ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE -> ^( ISBLANK $e52) | ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE -> ^( ISLITERAL $e49) | ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE -> ^( ISNUMERIC $e50) | regexExpression | existsFunc | notExistsFunc );
    public final IbmSparqlParser.builtInCall_return builtInCall() throws RecognitionException {
        IbmSparqlParser.builtInCall_return retval = new IbmSparqlParser.builtInCall_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token STR323=null;
        Token OPEN_BRACE324=null;
        Token CLOSE_BRACE325=null;
        Token LANG326=null;
        Token OPEN_BRACE327=null;
        Token CLOSE_BRACE328=null;
        Token LANGMATCHES329=null;
        Token OPEN_BRACE330=null;
        Token COMMA331=null;
        Token CLOSE_BRACE332=null;
        Token DATATYPE333=null;
        Token OPEN_BRACE334=null;
        Token CLOSE_BRACE335=null;
        Token BOUND336=null;
        Token OPEN_BRACE337=null;
        Token CLOSE_BRACE338=null;
        Token IRI339=null;
        Token OPEN_BRACE340=null;
        Token CLOSE_BRACE341=null;
        Token URI342=null;
        Token OPEN_BRACE343=null;
        Token CLOSE_BRACE344=null;
        Token BNODE345=null;
        Token OPEN_BRACE346=null;
        Token CLOSE_BRACE347=null;
        Token RAND349=null;
        Token ABS351=null;
        Token OPEN_BRACE352=null;
        Token CLOSE_BRACE353=null;
        Token CEIL354=null;
        Token OPEN_BRACE355=null;
        Token CLOSE_BRACE356=null;
        Token FLOOR357=null;
        Token OPEN_BRACE358=null;
        Token CLOSE_BRACE359=null;
        Token ROUND360=null;
        Token OPEN_BRACE361=null;
        Token CLOSE_BRACE362=null;
        Token CONCAT363=null;
        Token STRLEN364=null;
        Token OPEN_BRACE365=null;
        Token CLOSE_BRACE366=null;
        Token UCASE368=null;
        Token OPEN_BRACE369=null;
        Token CLOSE_BRACE370=null;
        Token LCASE371=null;
        Token OPEN_BRACE372=null;
        Token CLOSE_BRACE373=null;
        Token ENCODE_FOR_URI374=null;
        Token OPEN_BRACE375=null;
        Token CLOSE_BRACE376=null;
        Token CONTAINS377=null;
        Token OPEN_BRACE378=null;
        Token COMMA379=null;
        Token CLOSE_BRACE380=null;
        Token STRSTARTS381=null;
        Token OPEN_BRACE382=null;
        Token COMMA383=null;
        Token CLOSE_BRACE384=null;
        Token STRENDS385=null;
        Token OPEN_BRACE386=null;
        Token COMMA387=null;
        Token CLOSE_BRACE388=null;
        Token STRBEFORE389=null;
        Token OPEN_BRACE390=null;
        Token COMMA391=null;
        Token CLOSE_BRACE392=null;
        Token STRAFTER393=null;
        Token OPEN_BRACE394=null;
        Token COMMA395=null;
        Token CLOSE_BRACE396=null;
        Token YEAR397=null;
        Token OPEN_BRACE398=null;
        Token CLOSE_BRACE399=null;
        Token MONTH400=null;
        Token OPEN_BRACE401=null;
        Token CLOSE_BRACE402=null;
        Token DAY403=null;
        Token OPEN_BRACE404=null;
        Token CLOSE_BRACE405=null;
        Token HOURS406=null;
        Token OPEN_BRACE407=null;
        Token CLOSE_BRACE408=null;
        Token MINUTES409=null;
        Token OPEN_BRACE410=null;
        Token CLOSE_BRACE411=null;
        Token SECONDS412=null;
        Token OPEN_BRACE413=null;
        Token CLOSE_BRACE414=null;
        Token TIMEZONE415=null;
        Token OPEN_BRACE416=null;
        Token CLOSE_BRACE417=null;
        Token TZ418=null;
        Token OPEN_BRACE419=null;
        Token CLOSE_BRACE420=null;
        Token NOW421=null;
        Token UUID423=null;
        Token STRUUID425=null;
        Token MD5427=null;
        Token OPEN_BRACE428=null;
        Token CLOSE_BRACE429=null;
        Token SHA1430=null;
        Token OPEN_BRACE431=null;
        Token CLOSE_BRACE432=null;
        Token SHA224433=null;
        Token OPEN_BRACE434=null;
        Token CLOSE_BRACE435=null;
        Token SHA256436=null;
        Token OPEN_BRACE437=null;
        Token CLOSE_BRACE438=null;
        Token SHA384439=null;
        Token OPEN_BRACE440=null;
        Token CLOSE_BRACE441=null;
        Token SHA512442=null;
        Token OPEN_BRACE443=null;
        Token CLOSE_BRACE444=null;
        Token COALESCE445=null;
        Token IF446=null;
        Token OPEN_BRACE447=null;
        Token COMMA448=null;
        Token COMMA449=null;
        Token CLOSE_BRACE450=null;
        Token STRLANG451=null;
        Token OPEN_BRACE452=null;
        Token COMMA453=null;
        Token CLOSE_BRACE454=null;
        Token STRDT455=null;
        Token OPEN_BRACE456=null;
        Token COMMA457=null;
        Token CLOSE_BRACE458=null;
        Token SAMETERM459=null;
        Token OPEN_BRACE460=null;
        Token COMMA461=null;
        Token CLOSE_BRACE462=null;
        Token ISIRI463=null;
        Token OPEN_BRACE464=null;
        Token CLOSE_BRACE465=null;
        Token ISURI466=null;
        Token OPEN_BRACE467=null;
        Token CLOSE_BRACE468=null;
        Token ISBLANK469=null;
        Token OPEN_BRACE470=null;
        Token CLOSE_BRACE471=null;
        Token ISLITERAL472=null;
        Token OPEN_BRACE473=null;
        Token CLOSE_BRACE474=null;
        Token ISNUMERIC475=null;
        Token OPEN_BRACE476=null;
        Token CLOSE_BRACE477=null;
        IbmSparqlParser.expression_return e1 = null;

        IbmSparqlParser.expression_return e2 = null;

        IbmSparqlParser.expression_return e3 = null;

        IbmSparqlParser.expression_return e4 = null;

        IbmSparqlParser.expression_return e5 = null;

        IbmSparqlParser.var_return v = null;

        IbmSparqlParser.expression_return e51 = null;

        IbmSparqlParser.expression_return e6 = null;

        IbmSparqlParser.expression_return e7 = null;

        IbmSparqlParser.expression_return e8 = null;

        IbmSparqlParser.expression_return e9 = null;

        IbmSparqlParser.expression_return e10 = null;

        IbmSparqlParser.expression_return e11 = null;

        IbmSparqlParser.expressionList_return e12 = null;

        IbmSparqlParser.substringExpression_return s = null;

        IbmSparqlParser.expression_return e13 = null;

        IbmSparqlParser.expression_return e14 = null;

        IbmSparqlParser.expression_return e15 = null;

        IbmSparqlParser.expression_return e16 = null;

        IbmSparqlParser.expression_return e17 = null;

        IbmSparqlParser.expression_return e18 = null;

        IbmSparqlParser.expression_return e19 = null;

        IbmSparqlParser.expression_return e20 = null;

        IbmSparqlParser.expression_return e21 = null;

        IbmSparqlParser.expression_return e22 = null;

        IbmSparqlParser.expression_return e23 = null;

        IbmSparqlParser.expression_return e24 = null;

        IbmSparqlParser.expression_return e25 = null;

        IbmSparqlParser.expression_return e26 = null;

        IbmSparqlParser.expression_return e27 = null;

        IbmSparqlParser.expression_return e28 = null;

        IbmSparqlParser.expression_return e29 = null;

        IbmSparqlParser.expression_return e30 = null;

        IbmSparqlParser.expression_return e31 = null;

        IbmSparqlParser.expression_return e32 = null;

        IbmSparqlParser.expression_return e33 = null;

        IbmSparqlParser.expression_return e34 = null;

        IbmSparqlParser.expression_return e35 = null;

        IbmSparqlParser.expression_return e36 = null;

        IbmSparqlParser.expressionList_return e37 = null;

        IbmSparqlParser.expression_return e38 = null;

        IbmSparqlParser.expression_return e39 = null;

        IbmSparqlParser.expression_return e40 = null;

        IbmSparqlParser.expression_return e41 = null;

        IbmSparqlParser.expression_return e42 = null;

        IbmSparqlParser.expression_return e43 = null;

        IbmSparqlParser.expression_return e44 = null;

        IbmSparqlParser.expression_return e45 = null;

        IbmSparqlParser.expression_return e46 = null;

        IbmSparqlParser.expression_return e47 = null;

        IbmSparqlParser.expression_return e48 = null;

        IbmSparqlParser.expression_return e52 = null;

        IbmSparqlParser.expression_return e49 = null;

        IbmSparqlParser.expression_return e50 = null;

        IbmSparqlParser.nil_return nil348 = null;

        IbmSparqlParser.nil_return nil350 = null;

        IbmSparqlParser.strReplaceExpression_return strReplaceExpression367 = null;

        IbmSparqlParser.nil_return nil422 = null;

        IbmSparqlParser.nil_return nil424 = null;

        IbmSparqlParser.nil_return nil426 = null;

        IbmSparqlParser.regexExpression_return regexExpression478 = null;

        IbmSparqlParser.existsFunc_return existsFunc479 = null;

        IbmSparqlParser.notExistsFunc_return notExistsFunc480 = null;


        XTree STR323_tree=null;
        XTree OPEN_BRACE324_tree=null;
        XTree CLOSE_BRACE325_tree=null;
        XTree LANG326_tree=null;
        XTree OPEN_BRACE327_tree=null;
        XTree CLOSE_BRACE328_tree=null;
        XTree LANGMATCHES329_tree=null;
        XTree OPEN_BRACE330_tree=null;
        XTree COMMA331_tree=null;
        XTree CLOSE_BRACE332_tree=null;
        XTree DATATYPE333_tree=null;
        XTree OPEN_BRACE334_tree=null;
        XTree CLOSE_BRACE335_tree=null;
        XTree BOUND336_tree=null;
        XTree OPEN_BRACE337_tree=null;
        XTree CLOSE_BRACE338_tree=null;
        XTree IRI339_tree=null;
        XTree OPEN_BRACE340_tree=null;
        XTree CLOSE_BRACE341_tree=null;
        XTree URI342_tree=null;
        XTree OPEN_BRACE343_tree=null;
        XTree CLOSE_BRACE344_tree=null;
        XTree BNODE345_tree=null;
        XTree OPEN_BRACE346_tree=null;
        XTree CLOSE_BRACE347_tree=null;
        XTree RAND349_tree=null;
        XTree ABS351_tree=null;
        XTree OPEN_BRACE352_tree=null;
        XTree CLOSE_BRACE353_tree=null;
        XTree CEIL354_tree=null;
        XTree OPEN_BRACE355_tree=null;
        XTree CLOSE_BRACE356_tree=null;
        XTree FLOOR357_tree=null;
        XTree OPEN_BRACE358_tree=null;
        XTree CLOSE_BRACE359_tree=null;
        XTree ROUND360_tree=null;
        XTree OPEN_BRACE361_tree=null;
        XTree CLOSE_BRACE362_tree=null;
        XTree CONCAT363_tree=null;
        XTree STRLEN364_tree=null;
        XTree OPEN_BRACE365_tree=null;
        XTree CLOSE_BRACE366_tree=null;
        XTree UCASE368_tree=null;
        XTree OPEN_BRACE369_tree=null;
        XTree CLOSE_BRACE370_tree=null;
        XTree LCASE371_tree=null;
        XTree OPEN_BRACE372_tree=null;
        XTree CLOSE_BRACE373_tree=null;
        XTree ENCODE_FOR_URI374_tree=null;
        XTree OPEN_BRACE375_tree=null;
        XTree CLOSE_BRACE376_tree=null;
        XTree CONTAINS377_tree=null;
        XTree OPEN_BRACE378_tree=null;
        XTree COMMA379_tree=null;
        XTree CLOSE_BRACE380_tree=null;
        XTree STRSTARTS381_tree=null;
        XTree OPEN_BRACE382_tree=null;
        XTree COMMA383_tree=null;
        XTree CLOSE_BRACE384_tree=null;
        XTree STRENDS385_tree=null;
        XTree OPEN_BRACE386_tree=null;
        XTree COMMA387_tree=null;
        XTree CLOSE_BRACE388_tree=null;
        XTree STRBEFORE389_tree=null;
        XTree OPEN_BRACE390_tree=null;
        XTree COMMA391_tree=null;
        XTree CLOSE_BRACE392_tree=null;
        XTree STRAFTER393_tree=null;
        XTree OPEN_BRACE394_tree=null;
        XTree COMMA395_tree=null;
        XTree CLOSE_BRACE396_tree=null;
        XTree YEAR397_tree=null;
        XTree OPEN_BRACE398_tree=null;
        XTree CLOSE_BRACE399_tree=null;
        XTree MONTH400_tree=null;
        XTree OPEN_BRACE401_tree=null;
        XTree CLOSE_BRACE402_tree=null;
        XTree DAY403_tree=null;
        XTree OPEN_BRACE404_tree=null;
        XTree CLOSE_BRACE405_tree=null;
        XTree HOURS406_tree=null;
        XTree OPEN_BRACE407_tree=null;
        XTree CLOSE_BRACE408_tree=null;
        XTree MINUTES409_tree=null;
        XTree OPEN_BRACE410_tree=null;
        XTree CLOSE_BRACE411_tree=null;
        XTree SECONDS412_tree=null;
        XTree OPEN_BRACE413_tree=null;
        XTree CLOSE_BRACE414_tree=null;
        XTree TIMEZONE415_tree=null;
        XTree OPEN_BRACE416_tree=null;
        XTree CLOSE_BRACE417_tree=null;
        XTree TZ418_tree=null;
        XTree OPEN_BRACE419_tree=null;
        XTree CLOSE_BRACE420_tree=null;
        XTree NOW421_tree=null;
        XTree UUID423_tree=null;
        XTree STRUUID425_tree=null;
        XTree MD5427_tree=null;
        XTree OPEN_BRACE428_tree=null;
        XTree CLOSE_BRACE429_tree=null;
        XTree SHA1430_tree=null;
        XTree OPEN_BRACE431_tree=null;
        XTree CLOSE_BRACE432_tree=null;
        XTree SHA224433_tree=null;
        XTree OPEN_BRACE434_tree=null;
        XTree CLOSE_BRACE435_tree=null;
        XTree SHA256436_tree=null;
        XTree OPEN_BRACE437_tree=null;
        XTree CLOSE_BRACE438_tree=null;
        XTree SHA384439_tree=null;
        XTree OPEN_BRACE440_tree=null;
        XTree CLOSE_BRACE441_tree=null;
        XTree SHA512442_tree=null;
        XTree OPEN_BRACE443_tree=null;
        XTree CLOSE_BRACE444_tree=null;
        XTree COALESCE445_tree=null;
        XTree IF446_tree=null;
        XTree OPEN_BRACE447_tree=null;
        XTree COMMA448_tree=null;
        XTree COMMA449_tree=null;
        XTree CLOSE_BRACE450_tree=null;
        XTree STRLANG451_tree=null;
        XTree OPEN_BRACE452_tree=null;
        XTree COMMA453_tree=null;
        XTree CLOSE_BRACE454_tree=null;
        XTree STRDT455_tree=null;
        XTree OPEN_BRACE456_tree=null;
        XTree COMMA457_tree=null;
        XTree CLOSE_BRACE458_tree=null;
        XTree SAMETERM459_tree=null;
        XTree OPEN_BRACE460_tree=null;
        XTree COMMA461_tree=null;
        XTree CLOSE_BRACE462_tree=null;
        XTree ISIRI463_tree=null;
        XTree OPEN_BRACE464_tree=null;
        XTree CLOSE_BRACE465_tree=null;
        XTree ISURI466_tree=null;
        XTree OPEN_BRACE467_tree=null;
        XTree CLOSE_BRACE468_tree=null;
        XTree ISBLANK469_tree=null;
        XTree OPEN_BRACE470_tree=null;
        XTree CLOSE_BRACE471_tree=null;
        XTree ISLITERAL472_tree=null;
        XTree OPEN_BRACE473_tree=null;
        XTree CLOSE_BRACE474_tree=null;
        XTree ISNUMERIC475_tree=null;
        XTree OPEN_BRACE476_tree=null;
        XTree CLOSE_BRACE477_tree=null;
        RewriteRuleTokenStream stream_SHA256=new RewriteRuleTokenStream(adaptor,"token SHA256");
        RewriteRuleTokenStream stream_YEAR=new RewriteRuleTokenStream(adaptor,"token YEAR");
        RewriteRuleTokenStream stream_UUID=new RewriteRuleTokenStream(adaptor,"token UUID");
        RewriteRuleTokenStream stream_TIMEZONE=new RewriteRuleTokenStream(adaptor,"token TIMEZONE");
        RewriteRuleTokenStream stream_CONTAINS=new RewriteRuleTokenStream(adaptor,"token CONTAINS");
        RewriteRuleTokenStream stream_STRENDS=new RewriteRuleTokenStream(adaptor,"token STRENDS");
        RewriteRuleTokenStream stream_LCASE=new RewriteRuleTokenStream(adaptor,"token LCASE");
        RewriteRuleTokenStream stream_BNODE=new RewriteRuleTokenStream(adaptor,"token BNODE");
        RewriteRuleTokenStream stream_SHA512=new RewriteRuleTokenStream(adaptor,"token SHA512");
        RewriteRuleTokenStream stream_SECONDS=new RewriteRuleTokenStream(adaptor,"token SECONDS");
        RewriteRuleTokenStream stream_NOW=new RewriteRuleTokenStream(adaptor,"token NOW");
        RewriteRuleTokenStream stream_DAY=new RewriteRuleTokenStream(adaptor,"token DAY");
        RewriteRuleTokenStream stream_SHA224=new RewriteRuleTokenStream(adaptor,"token SHA224");
        RewriteRuleTokenStream stream_STRAFTER=new RewriteRuleTokenStream(adaptor,"token STRAFTER");
        RewriteRuleTokenStream stream_STRLEN=new RewriteRuleTokenStream(adaptor,"token STRLEN");
        RewriteRuleTokenStream stream_MONTH=new RewriteRuleTokenStream(adaptor,"token MONTH");
        RewriteRuleTokenStream stream_ENCODE_FOR_URI=new RewriteRuleTokenStream(adaptor,"token ENCODE_FOR_URI");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_ISURI=new RewriteRuleTokenStream(adaptor,"token ISURI");
        RewriteRuleTokenStream stream_STR=new RewriteRuleTokenStream(adaptor,"token STR");
        RewriteRuleTokenStream stream_ISLITERAL=new RewriteRuleTokenStream(adaptor,"token ISLITERAL");
        RewriteRuleTokenStream stream_STRDT=new RewriteRuleTokenStream(adaptor,"token STRDT");
        RewriteRuleTokenStream stream_SAMETERM=new RewriteRuleTokenStream(adaptor,"token SAMETERM");
        RewriteRuleTokenStream stream_MD5=new RewriteRuleTokenStream(adaptor,"token MD5");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RAND=new RewriteRuleTokenStream(adaptor,"token RAND");
        RewriteRuleTokenStream stream_IRI=new RewriteRuleTokenStream(adaptor,"token IRI");
        RewriteRuleTokenStream stream_LANGMATCHES=new RewriteRuleTokenStream(adaptor,"token LANGMATCHES");
        RewriteRuleTokenStream stream_TZ=new RewriteRuleTokenStream(adaptor,"token TZ");
        RewriteRuleTokenStream stream_STRLANG=new RewriteRuleTokenStream(adaptor,"token STRLANG");
        RewriteRuleTokenStream stream_BOUND=new RewriteRuleTokenStream(adaptor,"token BOUND");
        RewriteRuleTokenStream stream_ISIRI=new RewriteRuleTokenStream(adaptor,"token ISIRI");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_ISNUMERIC=new RewriteRuleTokenStream(adaptor,"token ISNUMERIC");
        RewriteRuleTokenStream stream_CONCAT=new RewriteRuleTokenStream(adaptor,"token CONCAT");
        RewriteRuleTokenStream stream_STRSTARTS=new RewriteRuleTokenStream(adaptor,"token STRSTARTS");
        RewriteRuleTokenStream stream_STRBEFORE=new RewriteRuleTokenStream(adaptor,"token STRBEFORE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_SHA1=new RewriteRuleTokenStream(adaptor,"token SHA1");
        RewriteRuleTokenStream stream_FLOOR=new RewriteRuleTokenStream(adaptor,"token FLOOR");
        RewriteRuleTokenStream stream_ISBLANK=new RewriteRuleTokenStream(adaptor,"token ISBLANK");
        RewriteRuleTokenStream stream_UCASE=new RewriteRuleTokenStream(adaptor,"token UCASE");
        RewriteRuleTokenStream stream_URI=new RewriteRuleTokenStream(adaptor,"token URI");
        RewriteRuleTokenStream stream_ABS=new RewriteRuleTokenStream(adaptor,"token ABS");
        RewriteRuleTokenStream stream_MINUTES=new RewriteRuleTokenStream(adaptor,"token MINUTES");
        RewriteRuleTokenStream stream_STRUUID=new RewriteRuleTokenStream(adaptor,"token STRUUID");
        RewriteRuleTokenStream stream_ROUND=new RewriteRuleTokenStream(adaptor,"token ROUND");
        RewriteRuleTokenStream stream_CEIL=new RewriteRuleTokenStream(adaptor,"token CEIL");
        RewriteRuleTokenStream stream_DATATYPE=new RewriteRuleTokenStream(adaptor,"token DATATYPE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_SHA384=new RewriteRuleTokenStream(adaptor,"token SHA384");
        RewriteRuleTokenStream stream_HOURS=new RewriteRuleTokenStream(adaptor,"token HOURS");
        RewriteRuleTokenStream stream_LANG=new RewriteRuleTokenStream(adaptor,"token LANG");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_substringExpression=new RewriteRuleSubtreeStream(adaptor,"rule substringExpression");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try {
            // IbmSparql.g:788:2: ( STR OPEN_BRACE e1= expression CLOSE_BRACE -> ^( STR $e1) | LANG OPEN_BRACE e2= expression CLOSE_BRACE -> ^( LANG $e2) | LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE -> ^( LANGMATCHES $e3 $e4) | DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE -> ^( DATATYPE $e5) | BOUND OPEN_BRACE v= var CLOSE_BRACE -> ^( BOUND $v) | IRI OPEN_BRACE e51= expression CLOSE_BRACE -> ^( IRI $e51) | URI OPEN_BRACE e6= expression CLOSE_BRACE -> ^( URI $e6) | BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil ) -> ^( BNODE ( $e7)? ) | RAND nil -> ^( RAND NIL ) | ABS OPEN_BRACE e8= expression CLOSE_BRACE -> ^( ABS $e8) | CEIL OPEN_BRACE e9= expression CLOSE_BRACE -> ^( CEIL $e9) | FLOOR OPEN_BRACE e10= expression CLOSE_BRACE -> ^( FLOOR $e10) | ROUND OPEN_BRACE e11= expression CLOSE_BRACE -> ^( ROUND $e11) | CONCAT e12= expressionList -> ^( CONCAT $e12) | s= substringExpression -> $s | STRLEN OPEN_BRACE e13= expression CLOSE_BRACE -> ^( STRLEN $e13) | strReplaceExpression | UCASE OPEN_BRACE e14= expression CLOSE_BRACE -> ^( UCASE $e14) | LCASE OPEN_BRACE e15= expression CLOSE_BRACE -> ^( LCASE $e15) | ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE -> ^( ENCODE_FOR_URI $e16) | CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE -> ^( CONTAINS $e17 $e18) | STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE -> ^( STRSTARTS $e19 $e20) | STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRENDS $e21 $e22) | STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRBEFORE $e21 $e22) | STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRAFTER $e21 $e22) | YEAR OPEN_BRACE e23= expression CLOSE_BRACE -> ^( YEAR $e23) | MONTH OPEN_BRACE e24= expression CLOSE_BRACE -> ^( MONTH $e24) | DAY OPEN_BRACE e25= expression CLOSE_BRACE -> ^( DAY $e25) | HOURS OPEN_BRACE e26= expression CLOSE_BRACE -> ^( HOURS $e26) | MINUTES OPEN_BRACE e27= expression CLOSE_BRACE -> ^( MINUTES $e27) | SECONDS OPEN_BRACE e28= expression CLOSE_BRACE -> ^( SECONDS $e28) | TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE -> ^( TIMEZONE $e29) | TZ OPEN_BRACE e30= expression CLOSE_BRACE -> ^( TZ $e30) | NOW nil -> NOW | UUID nil -> UUID | STRUUID nil -> STRUUID | MD5 OPEN_BRACE e31= expression CLOSE_BRACE -> ^( MD5 $e31) | SHA1 OPEN_BRACE e32= expression CLOSE_BRACE -> ^( SHA1 $e32) | SHA224 OPEN_BRACE e33= expression CLOSE_BRACE -> ^( SHA224 $e33) | SHA256 OPEN_BRACE e34= expression CLOSE_BRACE -> ^( SHA256 $e34) | SHA384 OPEN_BRACE e35= expression CLOSE_BRACE -> ^( SHA384 $e35) | SHA512 OPEN_BRACE e36= expression CLOSE_BRACE -> ^( SHA512 $e36) | COALESCE e37= expressionList -> ^( COALESCE $e37) | IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE -> ^( IF $e38 $e39 $e40) | STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE -> ^( STRLANG $e41 $e42) | STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE -> ^( STRDT $e43 $e44) | SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE -> ^( SAMETERM $e45 $e46) | ISIRI OPEN_BRACE e47= expression CLOSE_BRACE -> ^( ISIRI $e47) | ISURI OPEN_BRACE e48= expression CLOSE_BRACE -> ^( ISURI $e48) | ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE -> ^( ISBLANK $e52) | ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE -> ^( ISLITERAL $e49) | ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE -> ^( ISNUMERIC $e50) | regexExpression | existsFunc | notExistsFunc )
            int alt138=55;
            switch ( input.LA(1) ) {
            case STR:
                {
                alt138=1;
                }
                break;
            case LANG:
                {
                alt138=2;
                }
                break;
            case LANGMATCHES:
                {
                alt138=3;
                }
                break;
            case DATATYPE:
                {
                alt138=4;
                }
                break;
            case BOUND:
                {
                alt138=5;
                }
                break;
            case IRI:
                {
                alt138=6;
                }
                break;
            case URI:
                {
                alt138=7;
                }
                break;
            case BNODE:
                {
                alt138=8;
                }
                break;
            case RAND:
                {
                alt138=9;
                }
                break;
            case ABS:
                {
                alt138=10;
                }
                break;
            case CEIL:
                {
                alt138=11;
                }
                break;
            case FLOOR:
                {
                alt138=12;
                }
                break;
            case ROUND:
                {
                alt138=13;
                }
                break;
            case CONCAT:
                {
                alt138=14;
                }
                break;
            case SUBSTR:
                {
                alt138=15;
                }
                break;
            case STRLEN:
                {
                alt138=16;
                }
                break;
            case REPLACE:
                {
                alt138=17;
                }
                break;
            case UCASE:
                {
                alt138=18;
                }
                break;
            case LCASE:
                {
                alt138=19;
                }
                break;
            case ENCODE_FOR_URI:
                {
                alt138=20;
                }
                break;
            case CONTAINS:
                {
                alt138=21;
                }
                break;
            case STRSTARTS:
                {
                alt138=22;
                }
                break;
            case STRENDS:
                {
                alt138=23;
                }
                break;
            case STRBEFORE:
                {
                alt138=24;
                }
                break;
            case STRAFTER:
                {
                alt138=25;
                }
                break;
            case YEAR:
                {
                alt138=26;
                }
                break;
            case MONTH:
                {
                alt138=27;
                }
                break;
            case DAY:
                {
                alt138=28;
                }
                break;
            case HOURS:
                {
                alt138=29;
                }
                break;
            case MINUTES:
                {
                alt138=30;
                }
                break;
            case SECONDS:
                {
                alt138=31;
                }
                break;
            case TIMEZONE:
                {
                alt138=32;
                }
                break;
            case TZ:
                {
                alt138=33;
                }
                break;
            case NOW:
                {
                alt138=34;
                }
                break;
            case UUID:
                {
                alt138=35;
                }
                break;
            case STRUUID:
                {
                alt138=36;
                }
                break;
            case MD5:
                {
                alt138=37;
                }
                break;
            case SHA1:
                {
                alt138=38;
                }
                break;
            case SHA224:
                {
                alt138=39;
                }
                break;
            case SHA256:
                {
                alt138=40;
                }
                break;
            case SHA384:
                {
                alt138=41;
                }
                break;
            case SHA512:
                {
                alt138=42;
                }
                break;
            case COALESCE:
                {
                alt138=43;
                }
                break;
            case IF:
                {
                alt138=44;
                }
                break;
            case STRLANG:
                {
                alt138=45;
                }
                break;
            case STRDT:
                {
                alt138=46;
                }
                break;
            case SAMETERM:
                {
                alt138=47;
                }
                break;
            case ISIRI:
                {
                alt138=48;
                }
                break;
            case ISURI:
                {
                alt138=49;
                }
                break;
            case ISBLANK:
                {
                alt138=50;
                }
                break;
            case ISLITERAL:
                {
                alt138=51;
                }
                break;
            case ISNUMERIC:
                {
                alt138=52;
                }
                break;
            case REGEX:
                {
                alt138=53;
                }
                break;
            case EXISTS:
                {
                alt138=54;
                }
                break;
            case NOT:
                {
                alt138=55;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // IbmSparql.g:788:4: STR OPEN_BRACE e1= expression CLOSE_BRACE
                    {
                    STR323=(Token)match(input,STR,FOLLOW_STR_in_builtInCall6140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STR.add(STR323);

                    OPEN_BRACE324=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE324);

                    pushFollow(FOLLOW_expression_in_builtInCall6146);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
                    CLOSE_BRACE325=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE325);



                    // AST REWRITE
                    // elements: STR, e1
                    // token labels: 
                    // rule labels: retval, e1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 788:60: -> ^( STR $e1)
                    {
                        // IbmSparql.g:788:64: ^( STR $e1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STR.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:789:4: LANG OPEN_BRACE e2= expression CLOSE_BRACE
                    {
                    LANG326=(Token)match(input,LANG,FOLLOW_LANG_in_builtInCall6180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LANG.add(LANG326);

                    OPEN_BRACE327=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE327);

                    pushFollow(FOLLOW_expression_in_builtInCall6186);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    CLOSE_BRACE328=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE328);



                    // AST REWRITE
                    // elements: LANG, e2
                    // token labels: 
                    // rule labels: retval, e2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 789:60: -> ^( LANG $e2)
                    {
                        // IbmSparql.g:789:64: ^( LANG $e2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_LANG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparql.g:790:4: LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE
                    {
                    LANGMATCHES329=(Token)match(input,LANGMATCHES,FOLLOW_LANGMATCHES_in_builtInCall6219); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LANGMATCHES.add(LANGMATCHES329);

                    OPEN_BRACE330=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE330);

                    pushFollow(FOLLOW_expression_in_builtInCall6225);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());
                    COMMA331=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA331);

                    pushFollow(FOLLOW_expression_in_builtInCall6231);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());
                    CLOSE_BRACE332=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE332);



                    // AST REWRITE
                    // elements: LANGMATCHES, e4, e3
                    // token labels: 
                    // rule labels: e3, e4, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
                    RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 790:78: -> ^( LANGMATCHES $e3 $e4)
                    {
                        // IbmSparql.g:790:82: ^( LANGMATCHES $e3 $e4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_LANGMATCHES.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e3.nextTree());
                        adaptor.addChild(root_1, stream_e4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // IbmSparql.g:791:4: DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE
                    {
                    DATATYPE333=(Token)match(input,DATATYPE,FOLLOW_DATATYPE_in_builtInCall6258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DATATYPE.add(DATATYPE333);

                    OPEN_BRACE334=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6260); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE334);

                    pushFollow(FOLLOW_expression_in_builtInCall6264);
                    e5=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e5.getTree());
                    CLOSE_BRACE335=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6266); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE335);



                    // AST REWRITE
                    // elements: DATATYPE, e5
                    // token labels: 
                    // rule labels: retval, e5
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e5=new RewriteRuleSubtreeStream(adaptor,"rule e5",e5!=null?e5.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 791:60: -> ^( DATATYPE $e5)
                    {
                        // IbmSparql.g:791:64: ^( DATATYPE $e5)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_DATATYPE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e5.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // IbmSparql.g:792:4: BOUND OPEN_BRACE v= var CLOSE_BRACE
                    {
                    BOUND336=(Token)match(input,BOUND,FOLLOW_BOUND_in_builtInCall6293); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOUND.add(BOUND336);

                    OPEN_BRACE337=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6295); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE337);

                    pushFollow(FOLLOW_var_in_builtInCall6299);
                    v=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_var.add(v.getTree());
                    CLOSE_BRACE338=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE338);



                    // AST REWRITE
                    // elements: v, BOUND
                    // token labels: 
                    // rule labels: v, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 792:60: -> ^( BOUND $v)
                    {
                        // IbmSparql.g:792:64: ^( BOUND $v)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_BOUND.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_v.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // IbmSparql.g:793:4: IRI OPEN_BRACE e51= expression CLOSE_BRACE
                    {
                    IRI339=(Token)match(input,IRI,FOLLOW_IRI_in_builtInCall6339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRI.add(IRI339);

                    OPEN_BRACE340=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE340);

                    pushFollow(FOLLOW_expression_in_builtInCall6345);
                    e51=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e51.getTree());
                    CLOSE_BRACE341=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE341);



                    // AST REWRITE
                    // elements: IRI, e51
                    // token labels: 
                    // rule labels: retval, e51
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e51=new RewriteRuleSubtreeStream(adaptor,"rule e51",e51!=null?e51.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 793:60: -> ^( IRI $e51)
                    {
                        // IbmSparql.g:793:64: ^( IRI $e51)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_IRI.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e51.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // IbmSparql.g:794:4: URI OPEN_BRACE e6= expression CLOSE_BRACE
                    {
                    URI342=(Token)match(input,URI,FOLLOW_URI_in_builtInCall6378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_URI.add(URI342);

                    OPEN_BRACE343=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6380); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE343);

                    pushFollow(FOLLOW_expression_in_builtInCall6384);
                    e6=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e6.getTree());
                    CLOSE_BRACE344=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE344);



                    // AST REWRITE
                    // elements: URI, e6
                    // token labels: 
                    // rule labels: retval, e6
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e6=new RewriteRuleSubtreeStream(adaptor,"rule e6",e6!=null?e6.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 794:60: -> ^( URI $e6)
                    {
                        // IbmSparql.g:794:64: ^( URI $e6)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_URI.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e6.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // IbmSparql.g:795:4: BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil )
                    {
                    BNODE345=(Token)match(input,BNODE,FOLLOW_BNODE_in_builtInCall6418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BNODE.add(BNODE345);

                    // IbmSparql.g:795:10: ( OPEN_BRACE e7= expression CLOSE_BRACE | nil )
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==OPEN_BRACE) ) {
                        int LA137_1 = input.LA(2);

                        if ( (LA137_1==CLOSE_BRACE) ) {
                            alt137=2;
                        }
                        else if ( (LA137_1==IRI_REF||LA137_1==PNAME_NS||LA137_1==OPEN_BRACE||LA137_1==INTEGER||(LA137_1>=VAR1 && LA137_1<=VAR2)||(LA137_1>=NOT && LA137_1<=GROUP_CONCAT)||(LA137_1>=DECIMAL && LA137_1<=PNAME_LN)||(LA137_1>=257 && LA137_1<=258)||LA137_1==263) ) {
                            alt137=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 137, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 137, 0, input);

                        throw nvae;
                    }
                    switch (alt137) {
                        case 1 :
                            // IbmSparql.g:795:12: OPEN_BRACE e7= expression CLOSE_BRACE
                            {
                            OPEN_BRACE346=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6422); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE346);

                            pushFollow(FOLLOW_expression_in_builtInCall6426);
                            e7=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(e7.getTree());
                            CLOSE_BRACE347=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6428); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE347);


                            }
                            break;
                        case 2 :
                            // IbmSparql.g:795:51: nil
                            {
                            pushFollow(FOLLOW_nil_in_builtInCall6432);
                            nil348=nil();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nil.add(nil348.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: e7, BNODE
                    // token labels: 
                    // rule labels: retval, e7
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e7=new RewriteRuleSubtreeStream(adaptor,"rule e7",e7!=null?e7.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 795:60: -> ^( BNODE ( $e7)? )
                    {
                        // IbmSparql.g:795:64: ^( BNODE ( $e7)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_BNODE.nextNode(), root_1);

                        // IbmSparql.g:795:73: ( $e7)?
                        if ( stream_e7.hasNext() ) {
                            adaptor.addChild(root_1, stream_e7.nextTree());

                        }
                        stream_e7.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // IbmSparql.g:796:4: RAND nil
                    {
                    RAND349=(Token)match(input,RAND,FOLLOW_RAND_in_builtInCall6455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RAND.add(RAND349);

                    pushFollow(FOLLOW_nil_in_builtInCall6457);
                    nil350=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil350.getTree());


                    // AST REWRITE
                    // elements: RAND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 796:60: -> ^( RAND NIL )
                    {
                        // IbmSparql.g:796:64: ^( RAND NIL )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_RAND.nextNode(), root_1);

                        adaptor.addChild(root_1, (XTree)adaptor.create(NIL, "NIL"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // IbmSparql.g:797:4: ABS OPEN_BRACE e8= expression CLOSE_BRACE
                    {
                    ABS351=(Token)match(input,ABS,FOLLOW_ABS_in_builtInCall6520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ABS.add(ABS351);

                    OPEN_BRACE352=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE352);

                    pushFollow(FOLLOW_expression_in_builtInCall6526);
                    e8=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e8.getTree());
                    CLOSE_BRACE353=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE353);



                    // AST REWRITE
                    // elements: e8, ABS
                    // token labels: 
                    // rule labels: retval, e8
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e8=new RewriteRuleSubtreeStream(adaptor,"rule e8",e8!=null?e8.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 797:60: -> ^( ABS $e8)
                    {
                        // IbmSparql.g:797:64: ^( ABS $e8)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ABS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e8.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // IbmSparql.g:798:4: CEIL OPEN_BRACE e9= expression CLOSE_BRACE
                    {
                    CEIL354=(Token)match(input,CEIL,FOLLOW_CEIL_in_builtInCall6560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CEIL.add(CEIL354);

                    OPEN_BRACE355=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE355);

                    pushFollow(FOLLOW_expression_in_builtInCall6566);
                    e9=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e9.getTree());
                    CLOSE_BRACE356=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE356);



                    // AST REWRITE
                    // elements: CEIL, e9
                    // token labels: 
                    // rule labels: retval, e9
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e9=new RewriteRuleSubtreeStream(adaptor,"rule e9",e9!=null?e9.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 798:60: -> ^( CEIL $e9)
                    {
                        // IbmSparql.g:798:64: ^( CEIL $e9)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_CEIL.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e9.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // IbmSparql.g:799:4: FLOOR OPEN_BRACE e10= expression CLOSE_BRACE
                    {
                    FLOOR357=(Token)match(input,FLOOR,FOLLOW_FLOOR_in_builtInCall6599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FLOOR.add(FLOOR357);

                    OPEN_BRACE358=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE358);

                    pushFollow(FOLLOW_expression_in_builtInCall6605);
                    e10=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e10.getTree());
                    CLOSE_BRACE359=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE359);



                    // AST REWRITE
                    // elements: e10, FLOOR
                    // token labels: 
                    // rule labels: retval, e10
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e10=new RewriteRuleSubtreeStream(adaptor,"rule e10",e10!=null?e10.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 799:60: -> ^( FLOOR $e10)
                    {
                        // IbmSparql.g:799:64: ^( FLOOR $e10)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_FLOOR.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e10.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // IbmSparql.g:800:4: ROUND OPEN_BRACE e11= expression CLOSE_BRACE
                    {
                    ROUND360=(Token)match(input,ROUND,FOLLOW_ROUND_in_builtInCall6636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND.add(ROUND360);

                    OPEN_BRACE361=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6638); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE361);

                    pushFollow(FOLLOW_expression_in_builtInCall6642);
                    e11=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e11.getTree());
                    CLOSE_BRACE362=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6644); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE362);



                    // AST REWRITE
                    // elements: e11, ROUND
                    // token labels: 
                    // rule labels: retval, e11
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e11=new RewriteRuleSubtreeStream(adaptor,"rule e11",e11!=null?e11.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 800:60: -> ^( ROUND $e11)
                    {
                        // IbmSparql.g:800:64: ^( ROUND $e11)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ROUND.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e11.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // IbmSparql.g:801:4: CONCAT e12= expressionList
                    {
                    CONCAT363=(Token)match(input,CONCAT,FOLLOW_CONCAT_in_builtInCall6673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONCAT.add(CONCAT363);

                    pushFollow(FOLLOW_expressionList_in_builtInCall6677);
                    e12=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(e12.getTree());


                    // AST REWRITE
                    // elements: e12, CONCAT
                    // token labels: 
                    // rule labels: retval, e12
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e12=new RewriteRuleSubtreeStream(adaptor,"rule e12",e12!=null?e12.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 801:60: -> ^( CONCAT $e12)
                    {
                        // IbmSparql.g:801:64: ^( CONCAT $e12)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_CONCAT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e12.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // IbmSparql.g:802:4: s= substringExpression
                    {
                    pushFollow(FOLLOW_substringExpression_in_builtInCall6726);
                    s=substringExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substringExpression.add(s.getTree());


                    // AST REWRITE
                    // elements: s
                    // token labels: 
                    // rule labels: retval, s
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 802:60: -> $s
                    {
                        adaptor.addChild(root_0, stream_s.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // IbmSparql.g:803:4: STRLEN OPEN_BRACE e13= expression CLOSE_BRACE
                    {
                    STRLEN364=(Token)match(input,STRLEN,FOLLOW_STRLEN_in_builtInCall6771); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRLEN.add(STRLEN364);

                    OPEN_BRACE365=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE365);

                    pushFollow(FOLLOW_expression_in_builtInCall6777);
                    e13=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e13.getTree());
                    CLOSE_BRACE366=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6779); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE366);



                    // AST REWRITE
                    // elements: e13, STRLEN
                    // token labels: 
                    // rule labels: retval, e13
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e13=new RewriteRuleSubtreeStream(adaptor,"rule e13",e13!=null?e13.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 803:60: -> ^( STRLEN $e13)
                    {
                        // IbmSparql.g:803:64: ^( STRLEN $e13)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRLEN.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e13.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 17 :
                    // IbmSparql.g:804:7: strReplaceExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_strReplaceExpression_in_builtInCall6810);
                    strReplaceExpression367=strReplaceExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, strReplaceExpression367.getTree());

                    }
                    break;
                case 18 :
                    // IbmSparql.g:805:4: UCASE OPEN_BRACE e14= expression CLOSE_BRACE
                    {
                    UCASE368=(Token)match(input,UCASE,FOLLOW_UCASE_in_builtInCall6815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UCASE.add(UCASE368);

                    OPEN_BRACE369=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6817); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE369);

                    pushFollow(FOLLOW_expression_in_builtInCall6821);
                    e14=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e14.getTree());
                    CLOSE_BRACE370=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE370);



                    // AST REWRITE
                    // elements: e14, UCASE
                    // token labels: 
                    // rule labels: retval, e14
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e14=new RewriteRuleSubtreeStream(adaptor,"rule e14",e14!=null?e14.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 805:60: -> ^( UCASE $e14)
                    {
                        // IbmSparql.g:805:64: ^( UCASE $e14)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_UCASE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e14.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    // IbmSparql.g:806:4: LCASE OPEN_BRACE e15= expression CLOSE_BRACE
                    {
                    LCASE371=(Token)match(input,LCASE,FOLLOW_LCASE_in_builtInCall6852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCASE.add(LCASE371);

                    OPEN_BRACE372=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE372);

                    pushFollow(FOLLOW_expression_in_builtInCall6858);
                    e15=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e15.getTree());
                    CLOSE_BRACE373=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE373);



                    // AST REWRITE
                    // elements: e15, LCASE
                    // token labels: 
                    // rule labels: retval, e15
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e15=new RewriteRuleSubtreeStream(adaptor,"rule e15",e15!=null?e15.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 806:60: -> ^( LCASE $e15)
                    {
                        // IbmSparql.g:806:64: ^( LCASE $e15)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_LCASE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e15.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 20 :
                    // IbmSparql.g:807:4: ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE
                    {
                    ENCODE_FOR_URI374=(Token)match(input,ENCODE_FOR_URI,FOLLOW_ENCODE_FOR_URI_in_builtInCall6889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ENCODE_FOR_URI.add(ENCODE_FOR_URI374);

                    OPEN_BRACE375=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE375);

                    pushFollow(FOLLOW_expression_in_builtInCall6895);
                    e16=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e16.getTree());
                    CLOSE_BRACE376=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6897); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE376);



                    // AST REWRITE
                    // elements: ENCODE_FOR_URI, e16
                    // token labels: 
                    // rule labels: retval, e16
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e16=new RewriteRuleSubtreeStream(adaptor,"rule e16",e16!=null?e16.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 807:60: -> ^( ENCODE_FOR_URI $e16)
                    {
                        // IbmSparql.g:807:64: ^( ENCODE_FOR_URI $e16)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ENCODE_FOR_URI.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e16.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 21 :
                    // IbmSparql.g:808:4: CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE
                    {
                    CONTAINS377=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_builtInCall6917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTAINS.add(CONTAINS377);

                    OPEN_BRACE378=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE378);

                    pushFollow(FOLLOW_expression_in_builtInCall6923);
                    e17=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e17.getTree());
                    COMMA379=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA379);

                    pushFollow(FOLLOW_expression_in_builtInCall6929);
                    e18=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e18.getTree());
                    CLOSE_BRACE380=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE380);



                    // AST REWRITE
                    // elements: CONTAINS, e17, e18
                    // token labels: 
                    // rule labels: retval, e18, e17
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e18=new RewriteRuleSubtreeStream(adaptor,"rule e18",e18!=null?e18.tree:null);
                    RewriteRuleSubtreeStream stream_e17=new RewriteRuleSubtreeStream(adaptor,"rule e17",e17!=null?e17.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 808:78: -> ^( CONTAINS $e17 $e18)
                    {
                        // IbmSparql.g:808:82: ^( CONTAINS $e17 $e18)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_CONTAINS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e17.nextTree());
                        adaptor.addChild(root_1, stream_e18.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 22 :
                    // IbmSparql.g:809:4: STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE
                    {
                    STRSTARTS381=(Token)match(input,STRSTARTS,FOLLOW_STRSTARTS_in_builtInCall6957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRSTARTS.add(STRSTARTS381);

                    OPEN_BRACE382=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE382);

                    pushFollow(FOLLOW_expression_in_builtInCall6963);
                    e19=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e19.getTree());
                    COMMA383=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA383);

                    pushFollow(FOLLOW_expression_in_builtInCall6969);
                    e20=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e20.getTree());
                    CLOSE_BRACE384=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE384);



                    // AST REWRITE
                    // elements: STRSTARTS, e20, e19
                    // token labels: 
                    // rule labels: retval, e19, e20
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e19=new RewriteRuleSubtreeStream(adaptor,"rule e19",e19!=null?e19.tree:null);
                    RewriteRuleSubtreeStream stream_e20=new RewriteRuleSubtreeStream(adaptor,"rule e20",e20!=null?e20.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 809:78: -> ^( STRSTARTS $e19 $e20)
                    {
                        // IbmSparql.g:809:82: ^( STRSTARTS $e19 $e20)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRSTARTS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e19.nextTree());
                        adaptor.addChild(root_1, stream_e20.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 23 :
                    // IbmSparql.g:810:4: STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRENDS385=(Token)match(input,STRENDS,FOLLOW_STRENDS_in_builtInCall6996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRENDS.add(STRENDS385);

                    OPEN_BRACE386=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE386);

                    pushFollow(FOLLOW_expression_in_builtInCall7002);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());
                    COMMA387=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA387);

                    pushFollow(FOLLOW_expression_in_builtInCall7008);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());
                    CLOSE_BRACE388=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE388);



                    // AST REWRITE
                    // elements: STRENDS, e22, e21
                    // token labels: 
                    // rule labels: retval, e22, e21
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 810:78: -> ^( STRENDS $e21 $e22)
                    {
                        // IbmSparql.g:810:82: ^( STRENDS $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRENDS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());
                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 24 :
                    // IbmSparql.g:811:4: STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRBEFORE389=(Token)match(input,STRBEFORE,FOLLOW_STRBEFORE_in_builtInCall7037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRBEFORE.add(STRBEFORE389);

                    OPEN_BRACE390=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE390);

                    pushFollow(FOLLOW_expression_in_builtInCall7043);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());
                    COMMA391=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA391);

                    pushFollow(FOLLOW_expression_in_builtInCall7049);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());
                    CLOSE_BRACE392=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE392);



                    // AST REWRITE
                    // elements: e22, e21, STRBEFORE
                    // token labels: 
                    // rule labels: retval, e22, e21
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 811:80: -> ^( STRBEFORE $e21 $e22)
                    {
                        // IbmSparql.g:811:84: ^( STRBEFORE $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRBEFORE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());
                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 25 :
                    // IbmSparql.g:812:4: STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRAFTER393=(Token)match(input,STRAFTER,FOLLOW_STRAFTER_in_builtInCall7078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRAFTER.add(STRAFTER393);

                    OPEN_BRACE394=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE394);

                    pushFollow(FOLLOW_expression_in_builtInCall7084);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());
                    COMMA395=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA395);

                    pushFollow(FOLLOW_expression_in_builtInCall7090);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());
                    CLOSE_BRACE396=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE396);



                    // AST REWRITE
                    // elements: e22, STRAFTER, e21
                    // token labels: 
                    // rule labels: retval, e22, e21
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 812:79: -> ^( STRAFTER $e21 $e22)
                    {
                        // IbmSparql.g:812:83: ^( STRAFTER $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRAFTER.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());
                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 26 :
                    // IbmSparql.g:813:4: YEAR OPEN_BRACE e23= expression CLOSE_BRACE
                    {
                    YEAR397=(Token)match(input,YEAR,FOLLOW_YEAR_in_builtInCall7119); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_YEAR.add(YEAR397);

                    OPEN_BRACE398=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7121); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE398);

                    pushFollow(FOLLOW_expression_in_builtInCall7125);
                    e23=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e23.getTree());
                    CLOSE_BRACE399=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE399);



                    // AST REWRITE
                    // elements: e23, YEAR
                    // token labels: 
                    // rule labels: retval, e23
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e23=new RewriteRuleSubtreeStream(adaptor,"rule e23",e23!=null?e23.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 813:60: -> ^( YEAR $e23)
                    {
                        // IbmSparql.g:813:64: ^( YEAR $e23)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_YEAR.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e23.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 27 :
                    // IbmSparql.g:814:4: MONTH OPEN_BRACE e24= expression CLOSE_BRACE
                    {
                    MONTH400=(Token)match(input,MONTH,FOLLOW_MONTH_in_builtInCall7157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MONTH.add(MONTH400);

                    OPEN_BRACE401=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7159); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE401);

                    pushFollow(FOLLOW_expression_in_builtInCall7163);
                    e24=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e24.getTree());
                    CLOSE_BRACE402=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE402);



                    // AST REWRITE
                    // elements: MONTH, e24
                    // token labels: 
                    // rule labels: retval, e24
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e24=new RewriteRuleSubtreeStream(adaptor,"rule e24",e24!=null?e24.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 814:60: -> ^( MONTH $e24)
                    {
                        // IbmSparql.g:814:64: ^( MONTH $e24)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_MONTH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e24.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 28 :
                    // IbmSparql.g:815:4: DAY OPEN_BRACE e25= expression CLOSE_BRACE
                    {
                    DAY403=(Token)match(input,DAY,FOLLOW_DAY_in_builtInCall7194); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DAY.add(DAY403);

                    OPEN_BRACE404=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE404);

                    pushFollow(FOLLOW_expression_in_builtInCall7200);
                    e25=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e25.getTree());
                    CLOSE_BRACE405=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE405);



                    // AST REWRITE
                    // elements: DAY, e25
                    // token labels: 
                    // rule labels: retval, e25
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e25=new RewriteRuleSubtreeStream(adaptor,"rule e25",e25!=null?e25.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 815:60: -> ^( DAY $e25)
                    {
                        // IbmSparql.g:815:64: ^( DAY $e25)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_DAY.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e25.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 29 :
                    // IbmSparql.g:816:4: HOURS OPEN_BRACE e26= expression CLOSE_BRACE
                    {
                    HOURS406=(Token)match(input,HOURS,FOLLOW_HOURS_in_builtInCall7233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HOURS.add(HOURS406);

                    OPEN_BRACE407=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE407);

                    pushFollow(FOLLOW_expression_in_builtInCall7239);
                    e26=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e26.getTree());
                    CLOSE_BRACE408=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE408);



                    // AST REWRITE
                    // elements: e26, HOURS
                    // token labels: 
                    // rule labels: retval, e26
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e26=new RewriteRuleSubtreeStream(adaptor,"rule e26",e26!=null?e26.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 816:60: -> ^( HOURS $e26)
                    {
                        // IbmSparql.g:816:64: ^( HOURS $e26)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_HOURS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e26.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 30 :
                    // IbmSparql.g:817:4: MINUTES OPEN_BRACE e27= expression CLOSE_BRACE
                    {
                    MINUTES409=(Token)match(input,MINUTES,FOLLOW_MINUTES_in_builtInCall7270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUTES.add(MINUTES409);

                    OPEN_BRACE410=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7272); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE410);

                    pushFollow(FOLLOW_expression_in_builtInCall7276);
                    e27=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e27.getTree());
                    CLOSE_BRACE411=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE411);



                    // AST REWRITE
                    // elements: e27, MINUTES
                    // token labels: 
                    // rule labels: retval, e27
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e27=new RewriteRuleSubtreeStream(adaptor,"rule e27",e27!=null?e27.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 817:60: -> ^( MINUTES $e27)
                    {
                        // IbmSparql.g:817:64: ^( MINUTES $e27)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_MINUTES.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e27.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 31 :
                    // IbmSparql.g:818:4: SECONDS OPEN_BRACE e28= expression CLOSE_BRACE
                    {
                    SECONDS412=(Token)match(input,SECONDS,FOLLOW_SECONDS_in_builtInCall7305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SECONDS.add(SECONDS412);

                    OPEN_BRACE413=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE413);

                    pushFollow(FOLLOW_expression_in_builtInCall7311);
                    e28=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e28.getTree());
                    CLOSE_BRACE414=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7313); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE414);



                    // AST REWRITE
                    // elements: e28, SECONDS
                    // token labels: 
                    // rule labels: retval, e28
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e28=new RewriteRuleSubtreeStream(adaptor,"rule e28",e28!=null?e28.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 818:60: -> ^( SECONDS $e28)
                    {
                        // IbmSparql.g:818:64: ^( SECONDS $e28)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SECONDS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e28.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 32 :
                    // IbmSparql.g:819:4: TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE
                    {
                    TIMEZONE415=(Token)match(input,TIMEZONE,FOLLOW_TIMEZONE_in_builtInCall7340); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEZONE.add(TIMEZONE415);

                    OPEN_BRACE416=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE416);

                    pushFollow(FOLLOW_expression_in_builtInCall7346);
                    e29=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e29.getTree());
                    CLOSE_BRACE417=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE417);



                    // AST REWRITE
                    // elements: TIMEZONE, e29
                    // token labels: 
                    // rule labels: e29, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e29=new RewriteRuleSubtreeStream(adaptor,"rule e29",e29!=null?e29.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 819:60: -> ^( TIMEZONE $e29)
                    {
                        // IbmSparql.g:819:64: ^( TIMEZONE $e29)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_TIMEZONE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e29.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 33 :
                    // IbmSparql.g:820:4: TZ OPEN_BRACE e30= expression CLOSE_BRACE
                    {
                    TZ418=(Token)match(input,TZ,FOLLOW_TZ_in_builtInCall7374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TZ.add(TZ418);

                    OPEN_BRACE419=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE419);

                    pushFollow(FOLLOW_expression_in_builtInCall7380);
                    e30=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e30.getTree());
                    CLOSE_BRACE420=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE420);



                    // AST REWRITE
                    // elements: TZ, e30
                    // token labels: 
                    // rule labels: e30, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e30=new RewriteRuleSubtreeStream(adaptor,"rule e30",e30!=null?e30.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 820:60: -> ^( TZ $e30)
                    {
                        // IbmSparql.g:820:64: ^( TZ $e30)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_TZ.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e30.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 34 :
                    // IbmSparql.g:821:4: NOW nil
                    {
                    NOW421=(Token)match(input,NOW,FOLLOW_NOW_in_builtInCall7414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOW.add(NOW421);

                    pushFollow(FOLLOW_nil_in_builtInCall7416);
                    nil422=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil422.getTree());


                    // AST REWRITE
                    // elements: NOW
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 821:12: -> NOW
                    {
                        adaptor.addChild(root_0, stream_NOW.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 35 :
                    // IbmSparql.g:822:4: UUID nil
                    {
                    UUID423=(Token)match(input,UUID,FOLLOW_UUID_in_builtInCall7425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UUID.add(UUID423);

                    pushFollow(FOLLOW_nil_in_builtInCall7427);
                    nil424=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil424.getTree());


                    // AST REWRITE
                    // elements: UUID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 822:13: -> UUID
                    {
                        adaptor.addChild(root_0, stream_UUID.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 36 :
                    // IbmSparql.g:823:4: STRUUID nil
                    {
                    STRUUID425=(Token)match(input,STRUUID,FOLLOW_STRUUID_in_builtInCall7436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRUUID.add(STRUUID425);

                    pushFollow(FOLLOW_nil_in_builtInCall7438);
                    nil426=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil426.getTree());


                    // AST REWRITE
                    // elements: STRUUID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 823:16: -> STRUUID
                    {
                        adaptor.addChild(root_0, stream_STRUUID.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 37 :
                    // IbmSparql.g:824:4: MD5 OPEN_BRACE e31= expression CLOSE_BRACE
                    {
                    MD5427=(Token)match(input,MD5,FOLLOW_MD5_in_builtInCall7447); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MD5.add(MD5427);

                    OPEN_BRACE428=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE428);

                    pushFollow(FOLLOW_expression_in_builtInCall7453);
                    e31=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e31.getTree());
                    CLOSE_BRACE429=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE429);



                    // AST REWRITE
                    // elements: e31, MD5
                    // token labels: 
                    // rule labels: e31, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e31=new RewriteRuleSubtreeStream(adaptor,"rule e31",e31!=null?e31.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 824:60: -> ^( MD5 $e31)
                    {
                        // IbmSparql.g:824:64: ^( MD5 $e31)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_MD5.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e31.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 38 :
                    // IbmSparql.g:825:4: SHA1 OPEN_BRACE e32= expression CLOSE_BRACE
                    {
                    SHA1430=(Token)match(input,SHA1,FOLLOW_SHA1_in_builtInCall7486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA1.add(SHA1430);

                    OPEN_BRACE431=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE431);

                    pushFollow(FOLLOW_expression_in_builtInCall7492);
                    e32=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e32.getTree());
                    CLOSE_BRACE432=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE432);



                    // AST REWRITE
                    // elements: SHA1, e32
                    // token labels: 
                    // rule labels: retval, e32
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e32=new RewriteRuleSubtreeStream(adaptor,"rule e32",e32!=null?e32.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 825:60: -> ^( SHA1 $e32)
                    {
                        // IbmSparql.g:825:64: ^( SHA1 $e32)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SHA1.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e32.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 39 :
                    // IbmSparql.g:826:4: SHA224 OPEN_BRACE e33= expression CLOSE_BRACE
                    {
                    SHA224433=(Token)match(input,SHA224,FOLLOW_SHA224_in_builtInCall7524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA224.add(SHA224433);

                    OPEN_BRACE434=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE434);

                    pushFollow(FOLLOW_expression_in_builtInCall7530);
                    e33=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e33.getTree());
                    CLOSE_BRACE435=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE435);



                    // AST REWRITE
                    // elements: e33, SHA224
                    // token labels: 
                    // rule labels: retval, e33
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e33=new RewriteRuleSubtreeStream(adaptor,"rule e33",e33!=null?e33.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 826:60: -> ^( SHA224 $e33)
                    {
                        // IbmSparql.g:826:64: ^( SHA224 $e33)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SHA224.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e33.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 40 :
                    // IbmSparql.g:827:4: SHA256 OPEN_BRACE e34= expression CLOSE_BRACE
                    {
                    SHA256436=(Token)match(input,SHA256,FOLLOW_SHA256_in_builtInCall7560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA256.add(SHA256436);

                    OPEN_BRACE437=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE437);

                    pushFollow(FOLLOW_expression_in_builtInCall7566);
                    e34=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e34.getTree());
                    CLOSE_BRACE438=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE438);



                    // AST REWRITE
                    // elements: SHA256, e34
                    // token labels: 
                    // rule labels: retval, e34
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e34=new RewriteRuleSubtreeStream(adaptor,"rule e34",e34!=null?e34.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 827:60: -> ^( SHA256 $e34)
                    {
                        // IbmSparql.g:827:64: ^( SHA256 $e34)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SHA256.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e34.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 41 :
                    // IbmSparql.g:828:4: SHA384 OPEN_BRACE e35= expression CLOSE_BRACE
                    {
                    SHA384439=(Token)match(input,SHA384,FOLLOW_SHA384_in_builtInCall7596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA384.add(SHA384439);

                    OPEN_BRACE440=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE440);

                    pushFollow(FOLLOW_expression_in_builtInCall7602);
                    e35=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e35.getTree());
                    CLOSE_BRACE441=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE441);



                    // AST REWRITE
                    // elements: e35, SHA384
                    // token labels: 
                    // rule labels: retval, e35
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e35=new RewriteRuleSubtreeStream(adaptor,"rule e35",e35!=null?e35.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 828:60: -> ^( SHA384 $e35)
                    {
                        // IbmSparql.g:828:64: ^( SHA384 $e35)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SHA384.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e35.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 42 :
                    // IbmSparql.g:829:4: SHA512 OPEN_BRACE e36= expression CLOSE_BRACE
                    {
                    SHA512442=(Token)match(input,SHA512,FOLLOW_SHA512_in_builtInCall7632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA512.add(SHA512442);

                    OPEN_BRACE443=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE443);

                    pushFollow(FOLLOW_expression_in_builtInCall7638);
                    e36=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e36.getTree());
                    CLOSE_BRACE444=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7640); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE444);



                    // AST REWRITE
                    // elements: e36, SHA512
                    // token labels: 
                    // rule labels: retval, e36
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e36=new RewriteRuleSubtreeStream(adaptor,"rule e36",e36!=null?e36.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 829:60: -> ^( SHA512 $e36)
                    {
                        // IbmSparql.g:829:64: ^( SHA512 $e36)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SHA512.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e36.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 43 :
                    // IbmSparql.g:830:4: COALESCE e37= expressionList
                    {
                    COALESCE445=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtInCall7668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE445);

                    pushFollow(FOLLOW_expressionList_in_builtInCall7672);
                    e37=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(e37.getTree());


                    // AST REWRITE
                    // elements: e37, COALESCE
                    // token labels: 
                    // rule labels: retval, e37
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e37=new RewriteRuleSubtreeStream(adaptor,"rule e37",e37!=null?e37.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 830:60: -> ^( COALESCE $e37)
                    {
                        // IbmSparql.g:830:64: ^( COALESCE $e37)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_COALESCE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e37.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 44 :
                    // IbmSparql.g:831:4: IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE
                    {
                    IF446=(Token)match(input,IF,FOLLOW_IF_in_builtInCall7717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(IF446);

                    OPEN_BRACE447=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE447);

                    pushFollow(FOLLOW_expression_in_builtInCall7723);
                    e38=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e38.getTree());
                    COMMA448=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA448);

                    pushFollow(FOLLOW_expression_in_builtInCall7729);
                    e39=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e39.getTree());
                    COMMA449=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA449);

                    pushFollow(FOLLOW_expression_in_builtInCall7735);
                    e40=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e40.getTree());
                    CLOSE_BRACE450=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE450);



                    // AST REWRITE
                    // elements: e40, e38, IF, e39
                    // token labels: 
                    // rule labels: e40, retval, e38, e39
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e40=new RewriteRuleSubtreeStream(adaptor,"rule e40",e40!=null?e40.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e38=new RewriteRuleSubtreeStream(adaptor,"rule e38",e38!=null?e38.tree:null);
                    RewriteRuleSubtreeStream stream_e39=new RewriteRuleSubtreeStream(adaptor,"rule e39",e39!=null?e39.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 831:90: -> ^( IF $e38 $e39 $e40)
                    {
                        // IbmSparql.g:831:94: ^( IF $e38 $e39 $e40)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e38.nextTree());
                        adaptor.addChild(root_1, stream_e39.nextTree());
                        adaptor.addChild(root_1, stream_e40.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 45 :
                    // IbmSparql.g:832:4: STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE
                    {
                    STRLANG451=(Token)match(input,STRLANG,FOLLOW_STRLANG_in_builtInCall7763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRLANG.add(STRLANG451);

                    OPEN_BRACE452=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE452);

                    pushFollow(FOLLOW_expression_in_builtInCall7769);
                    e41=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e41.getTree());
                    COMMA453=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7771); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA453);

                    pushFollow(FOLLOW_expression_in_builtInCall7775);
                    e42=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e42.getTree());
                    CLOSE_BRACE454=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE454);



                    // AST REWRITE
                    // elements: e42, e41, STRLANG
                    // token labels: 
                    // rule labels: retval, e41, e42
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e41=new RewriteRuleSubtreeStream(adaptor,"rule e41",e41!=null?e41.tree:null);
                    RewriteRuleSubtreeStream stream_e42=new RewriteRuleSubtreeStream(adaptor,"rule e42",e42!=null?e42.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 832:90: -> ^( STRLANG $e41 $e42)
                    {
                        // IbmSparql.g:832:94: ^( STRLANG $e41 $e42)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRLANG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e41.nextTree());
                        adaptor.addChild(root_1, stream_e42.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 46 :
                    // IbmSparql.g:833:4: STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE
                    {
                    STRDT455=(Token)match(input,STRDT,FOLLOW_STRDT_in_builtInCall7816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRDT.add(STRDT455);

                    OPEN_BRACE456=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7818); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE456);

                    pushFollow(FOLLOW_expression_in_builtInCall7822);
                    e43=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e43.getTree());
                    COMMA457=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA457);

                    pushFollow(FOLLOW_expression_in_builtInCall7828);
                    e44=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e44.getTree());
                    CLOSE_BRACE458=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE458);



                    // AST REWRITE
                    // elements: e43, e44, STRDT
                    // token labels: 
                    // rule labels: retval, e43, e44
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e43=new RewriteRuleSubtreeStream(adaptor,"rule e43",e43!=null?e43.tree:null);
                    RewriteRuleSubtreeStream stream_e44=new RewriteRuleSubtreeStream(adaptor,"rule e44",e44!=null?e44.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 833:90: -> ^( STRDT $e43 $e44)
                    {
                        // IbmSparql.g:833:94: ^( STRDT $e43 $e44)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRDT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e43.nextTree());
                        adaptor.addChild(root_1, stream_e44.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 47 :
                    // IbmSparql.g:834:4: SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE
                    {
                    SAMETERM459=(Token)match(input,SAMETERM,FOLLOW_SAMETERM_in_builtInCall7871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SAMETERM.add(SAMETERM459);

                    OPEN_BRACE460=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7873); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE460);

                    pushFollow(FOLLOW_expression_in_builtInCall7877);
                    e45=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e45.getTree());
                    COMMA461=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA461);

                    pushFollow(FOLLOW_expression_in_builtInCall7883);
                    e46=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e46.getTree());
                    CLOSE_BRACE462=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7885); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE462);



                    // AST REWRITE
                    // elements: SAMETERM, e45, e46
                    // token labels: 
                    // rule labels: retval, e45, e46
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e45=new RewriteRuleSubtreeStream(adaptor,"rule e45",e45!=null?e45.tree:null);
                    RewriteRuleSubtreeStream stream_e46=new RewriteRuleSubtreeStream(adaptor,"rule e46",e46!=null?e46.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 834:90: -> ^( SAMETERM $e45 $e46)
                    {
                        // IbmSparql.g:834:94: ^( SAMETERM $e45 $e46)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SAMETERM.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e45.nextTree());
                        adaptor.addChild(root_1, stream_e46.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 48 :
                    // IbmSparql.g:835:4: ISIRI OPEN_BRACE e47= expression CLOSE_BRACE
                    {
                    ISIRI463=(Token)match(input,ISIRI,FOLLOW_ISIRI_in_builtInCall7923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISIRI.add(ISIRI463);

                    OPEN_BRACE464=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE464);

                    pushFollow(FOLLOW_expression_in_builtInCall7929);
                    e47=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e47.getTree());
                    CLOSE_BRACE465=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE465);



                    // AST REWRITE
                    // elements: e47, ISIRI
                    // token labels: 
                    // rule labels: retval, e47
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e47=new RewriteRuleSubtreeStream(adaptor,"rule e47",e47!=null?e47.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 835:60: -> ^( ISIRI $e47)
                    {
                        // IbmSparql.g:835:64: ^( ISIRI $e47)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ISIRI.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e47.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 49 :
                    // IbmSparql.g:836:4: ISURI OPEN_BRACE e48= expression CLOSE_BRACE
                    {
                    ISURI466=(Token)match(input,ISURI,FOLLOW_ISURI_in_builtInCall7960); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISURI.add(ISURI466);

                    OPEN_BRACE467=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE467);

                    pushFollow(FOLLOW_expression_in_builtInCall7966);
                    e48=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e48.getTree());
                    CLOSE_BRACE468=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE468);



                    // AST REWRITE
                    // elements: e48, ISURI
                    // token labels: 
                    // rule labels: retval, e48
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e48=new RewriteRuleSubtreeStream(adaptor,"rule e48",e48!=null?e48.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 836:60: -> ^( ISURI $e48)
                    {
                        // IbmSparql.g:836:64: ^( ISURI $e48)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ISURI.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e48.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 50 :
                    // IbmSparql.g:837:4: ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE
                    {
                    ISBLANK469=(Token)match(input,ISBLANK,FOLLOW_ISBLANK_in_builtInCall7997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISBLANK.add(ISBLANK469);

                    OPEN_BRACE470=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE470);

                    pushFollow(FOLLOW_expression_in_builtInCall8003);
                    e52=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e52.getTree());
                    CLOSE_BRACE471=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE471);



                    // AST REWRITE
                    // elements: e52, ISBLANK
                    // token labels: 
                    // rule labels: retval, e52
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e52=new RewriteRuleSubtreeStream(adaptor,"rule e52",e52!=null?e52.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 837:60: -> ^( ISBLANK $e52)
                    {
                        // IbmSparql.g:837:64: ^( ISBLANK $e52)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ISBLANK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e52.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 51 :
                    // IbmSparql.g:838:4: ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE
                    {
                    ISLITERAL472=(Token)match(input,ISLITERAL,FOLLOW_ISLITERAL_in_builtInCall8032); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISLITERAL.add(ISLITERAL472);

                    OPEN_BRACE473=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE473);

                    pushFollow(FOLLOW_expression_in_builtInCall8038);
                    e49=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e49.getTree());
                    CLOSE_BRACE474=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE474);



                    // AST REWRITE
                    // elements: ISLITERAL, e49
                    // token labels: 
                    // rule labels: retval, e49
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e49=new RewriteRuleSubtreeStream(adaptor,"rule e49",e49!=null?e49.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 838:60: -> ^( ISLITERAL $e49)
                    {
                        // IbmSparql.g:838:64: ^( ISLITERAL $e49)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ISLITERAL.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e49.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 52 :
                    // IbmSparql.g:839:4: ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE
                    {
                    ISNUMERIC475=(Token)match(input,ISNUMERIC,FOLLOW_ISNUMERIC_in_builtInCall8065); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISNUMERIC.add(ISNUMERIC475);

                    OPEN_BRACE476=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE476);

                    pushFollow(FOLLOW_expression_in_builtInCall8071);
                    e50=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e50.getTree());
                    CLOSE_BRACE477=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE477);



                    // AST REWRITE
                    // elements: ISNUMERIC, e50
                    // token labels: 
                    // rule labels: retval, e50
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e50=new RewriteRuleSubtreeStream(adaptor,"rule e50",e50!=null?e50.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 839:60: -> ^( ISNUMERIC $e50)
                    {
                        // IbmSparql.g:839:64: ^( ISNUMERIC $e50)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ISNUMERIC.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e50.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 53 :
                    // IbmSparql.g:840:4: regexExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_regexExpression_in_builtInCall8098);
                    regexExpression478=regexExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regexExpression478.getTree());

                    }
                    break;
                case 54 :
                    // IbmSparql.g:841:4: existsFunc
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_existsFunc_in_builtInCall8103);
                    existsFunc479=existsFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsFunc479.getTree());

                    }
                    break;
                case 55 :
                    // IbmSparql.g:842:4: notExistsFunc
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_notExistsFunc_in_builtInCall8108);
                    notExistsFunc480=notExistsFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, notExistsFunc480.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtInCall"

    public static class regexExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regexExpression"
    // IbmSparql.g:845:1: regexExpression : REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( REGEX $e1 $e2 ( $e3)? ) ;
    public final IbmSparqlParser.regexExpression_return regexExpression() throws RecognitionException {
        IbmSparqlParser.regexExpression_return retval = new IbmSparqlParser.regexExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token REGEX481=null;
        Token OPEN_BRACE482=null;
        Token COMMA483=null;
        Token COMMA484=null;
        Token CLOSE_BRACE485=null;
        IbmSparqlParser.expression_return e1 = null;

        IbmSparqlParser.expression_return e2 = null;

        IbmSparqlParser.expression_return e3 = null;


        XTree REGEX481_tree=null;
        XTree OPEN_BRACE482_tree=null;
        XTree COMMA483_tree=null;
        XTree COMMA484_tree=null;
        XTree CLOSE_BRACE485_tree=null;
        RewriteRuleTokenStream stream_REGEX=new RewriteRuleTokenStream(adaptor,"token REGEX");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // IbmSparql.g:846:2: ( REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( REGEX $e1 $e2 ( $e3)? ) )
            // IbmSparql.g:846:4: REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE
            {
            REGEX481=(Token)match(input,REGEX,FOLLOW_REGEX_in_regexExpression8125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGEX.add(REGEX481);

            OPEN_BRACE482=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_regexExpression8127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE482);

            pushFollow(FOLLOW_expression_in_regexExpression8131);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
            COMMA483=(Token)match(input,COMMA,FOLLOW_COMMA_in_regexExpression8133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA483);

            pushFollow(FOLLOW_expression_in_regexExpression8137);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
            // IbmSparql.g:846:55: ( COMMA e3= expression )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==COMMA) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // IbmSparql.g:846:57: COMMA e3= expression
                    {
                    COMMA484=(Token)match(input,COMMA,FOLLOW_COMMA_in_regexExpression8141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA484);

                    pushFollow(FOLLOW_expression_in_regexExpression8145);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    }
                    break;

            }

            CLOSE_BRACE485=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_regexExpression8150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE485);



            // AST REWRITE
            // elements: REGEX, e2, e3, e1
            // token labels: 
            // rule labels: e3, retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 848:3: -> ^( REGEX $e1 $e2 ( $e3)? )
            {
                // IbmSparql.g:848:7: ^( REGEX $e1 $e2 ( $e3)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_REGEX.nextNode(), root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());
                adaptor.addChild(root_1, stream_e2.nextTree());
                // IbmSparql.g:848:27: ( $e3)?
                if ( stream_e3.hasNext() ) {
                    adaptor.addChild(root_1, stream_e3.nextTree());

                }
                stream_e3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "regexExpression"

    public static class substringExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substringExpression"
    // IbmSparql.g:851:1: substringExpression : SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( SUBSTR $e1 $e2 ( $e3)? ) ;
    public final IbmSparqlParser.substringExpression_return substringExpression() throws RecognitionException {
        IbmSparqlParser.substringExpression_return retval = new IbmSparqlParser.substringExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token SUBSTR486=null;
        Token OPEN_BRACE487=null;
        Token COMMA488=null;
        Token COMMA489=null;
        Token CLOSE_BRACE490=null;
        IbmSparqlParser.expression_return e1 = null;

        IbmSparqlParser.expression_return e2 = null;

        IbmSparqlParser.expression_return e3 = null;


        XTree SUBSTR486_tree=null;
        XTree OPEN_BRACE487_tree=null;
        XTree COMMA488_tree=null;
        XTree COMMA489_tree=null;
        XTree CLOSE_BRACE490_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_SUBSTR=new RewriteRuleTokenStream(adaptor,"token SUBSTR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // IbmSparql.g:852:2: ( SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( SUBSTR $e1 $e2 ( $e3)? ) )
            // IbmSparql.g:852:6: SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE
            {
            SUBSTR486=(Token)match(input,SUBSTR,FOLLOW_SUBSTR_in_substringExpression8193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SUBSTR.add(SUBSTR486);

            OPEN_BRACE487=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_substringExpression8195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE487);

            pushFollow(FOLLOW_expression_in_substringExpression8199);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
            COMMA488=(Token)match(input,COMMA,FOLLOW_COMMA_in_substringExpression8201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA488);

            pushFollow(FOLLOW_expression_in_substringExpression8205);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
            // IbmSparql.g:852:58: ( COMMA e3= expression )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==COMMA) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // IbmSparql.g:852:60: COMMA e3= expression
                    {
                    COMMA489=(Token)match(input,COMMA,FOLLOW_COMMA_in_substringExpression8209); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA489);

                    pushFollow(FOLLOW_expression_in_substringExpression8213);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    }
                    break;

            }

            CLOSE_BRACE490=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_substringExpression8218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE490);



            // AST REWRITE
            // elements: e3, e2, SUBSTR, e1
            // token labels: 
            // rule labels: e3, retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 854:3: -> ^( SUBSTR $e1 $e2 ( $e3)? )
            {
                // IbmSparql.g:854:7: ^( SUBSTR $e1 $e2 ( $e3)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_SUBSTR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());
                adaptor.addChild(root_1, stream_e2.nextTree());
                // IbmSparql.g:854:28: ( $e3)?
                if ( stream_e3.hasNext() ) {
                    adaptor.addChild(root_1, stream_e3.nextTree());

                }
                stream_e3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "substringExpression"

    public static class strReplaceExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "strReplaceExpression"
    // IbmSparql.g:857:1: strReplaceExpression : REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE -> ^( REPLACE $e1 $e2 $e3 ( $e4)? ) ;
    public final IbmSparqlParser.strReplaceExpression_return strReplaceExpression() throws RecognitionException {
        IbmSparqlParser.strReplaceExpression_return retval = new IbmSparqlParser.strReplaceExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token REPLACE491=null;
        Token OPEN_BRACE492=null;
        Token COMMA493=null;
        Token COMMA494=null;
        Token COMMA495=null;
        Token CLOSE_BRACE496=null;
        IbmSparqlParser.expression_return e1 = null;

        IbmSparqlParser.expression_return e2 = null;

        IbmSparqlParser.expression_return e3 = null;

        IbmSparqlParser.expression_return e4 = null;


        XTree REPLACE491_tree=null;
        XTree OPEN_BRACE492_tree=null;
        XTree COMMA493_tree=null;
        XTree COMMA494_tree=null;
        XTree COMMA495_tree=null;
        XTree CLOSE_BRACE496_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_REPLACE=new RewriteRuleTokenStream(adaptor,"token REPLACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // IbmSparql.g:858:5: ( REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE -> ^( REPLACE $e1 $e2 $e3 ( $e4)? ) )
            // IbmSparql.g:858:9: REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE
            {
            REPLACE491=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_strReplaceExpression8260); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REPLACE.add(REPLACE491);

            OPEN_BRACE492=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_strReplaceExpression8262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE492);

            pushFollow(FOLLOW_expression_in_strReplaceExpression8266);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
            COMMA493=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8268); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA493);

            pushFollow(FOLLOW_expression_in_strReplaceExpression8272);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
            COMMA494=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA494);

            pushFollow(FOLLOW_expression_in_strReplaceExpression8278);
            e3=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e3.getTree());
            // IbmSparql.g:858:82: ( COMMA e4= expression )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==COMMA) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // IbmSparql.g:858:83: COMMA e4= expression
                    {
                    COMMA495=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA495);

                    pushFollow(FOLLOW_expression_in_strReplaceExpression8285);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());

                    }
                    break;

            }

            CLOSE_BRACE496=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_strReplaceExpression8289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE496);



            // AST REWRITE
            // elements: e3, e1, e2, e4, REPLACE
            // token labels: 
            // rule labels: e3, e4, retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 859:9: -> ^( REPLACE $e1 $e2 $e3 ( $e4)? )
            {
                // IbmSparql.g:859:12: ^( REPLACE $e1 $e2 $e3 ( $e4)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_REPLACE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());
                adaptor.addChild(root_1, stream_e2.nextTree());
                adaptor.addChild(root_1, stream_e3.nextTree());
                // IbmSparql.g:859:36: ( $e4)?
                if ( stream_e4.hasNext() ) {
                    adaptor.addChild(root_1, stream_e4.nextTree());

                }
                stream_e4.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "strReplaceExpression"

    public static class existsFunc_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsFunc"
    // IbmSparql.g:862:1: existsFunc : EXISTS g= groupGraphPattern -> ^( EXISTS $g) ;
    public final IbmSparqlParser.existsFunc_return existsFunc() throws RecognitionException {
        IbmSparqlParser.existsFunc_return retval = new IbmSparqlParser.existsFunc_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token EXISTS497=null;
        IbmSparqlParser.groupGraphPattern_return g = null;


        XTree EXISTS497_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparql.g:863:2: ( EXISTS g= groupGraphPattern -> ^( EXISTS $g) )
            // IbmSparql.g:863:6: EXISTS g= groupGraphPattern
            {
            EXISTS497=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsFunc8338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS497);

            pushFollow(FOLLOW_groupGraphPattern_in_existsFunc8342);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());


            // AST REWRITE
            // elements: g, EXISTS
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 865:3: -> ^( EXISTS $g)
            {
                // IbmSparql.g:865:7: ^( EXISTS $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_EXISTS.nextNode(), root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsFunc"

    public static class notExistsFunc_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "notExistsFunc"
    // IbmSparql.g:868:1: notExistsFunc : NOT EXISTS g= groupGraphPattern -> ^( NOT_EXISTS $g) ;
    public final IbmSparqlParser.notExistsFunc_return notExistsFunc() throws RecognitionException {
        IbmSparqlParser.notExistsFunc_return retval = new IbmSparqlParser.notExistsFunc_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token NOT498=null;
        Token EXISTS499=null;
        IbmSparqlParser.groupGraphPattern_return g = null;


        XTree NOT498_tree=null;
        XTree EXISTS499_tree=null;
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparql.g:869:2: ( NOT EXISTS g= groupGraphPattern -> ^( NOT_EXISTS $g) )
            // IbmSparql.g:869:6: NOT EXISTS g= groupGraphPattern
            {
            NOT498=(Token)match(input,NOT,FOLLOW_NOT_in_notExistsFunc8376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT.add(NOT498);

            EXISTS499=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_notExistsFunc8378); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS499);

            pushFollow(FOLLOW_groupGraphPattern_in_notExistsFunc8382);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());


            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 871:3: -> ^( NOT_EXISTS $g)
            {
                // IbmSparql.g:871:7: ^( NOT_EXISTS $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(NOT_EXISTS, "NOT_EXISTS"), root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "notExistsFunc"

    public static class aggregate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aggregate"
    // IbmSparql.g:874:1: aggregate : ( COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' | e1= expression ) CLOSE_BRACE -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? ) | SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE -> ^( SUM ( $d2)? $e2) | MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE -> ^( MIN ( $d3)? $e3) | MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE -> ^( MAX ( $d4)? $e4) | AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE -> ^( AVG ( $d5)? $e5) | SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE -> ^( SAMPLE ( $d6)? $e6) | GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? ) );
    public final IbmSparqlParser.aggregate_return aggregate() throws RecognitionException {
        IbmSparqlParser.aggregate_return retval = new IbmSparqlParser.aggregate_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token d1=null;
        Token d2=null;
        Token d3=null;
        Token d4=null;
        Token d5=null;
        Token d6=null;
        Token d7=null;
        Token COUNT500=null;
        Token OPEN_BRACE501=null;
        Token char_literal502=null;
        Token CLOSE_BRACE503=null;
        Token SUM504=null;
        Token OPEN_BRACE505=null;
        Token CLOSE_BRACE506=null;
        Token MIN507=null;
        Token OPEN_BRACE508=null;
        Token CLOSE_BRACE509=null;
        Token MAX510=null;
        Token OPEN_BRACE511=null;
        Token CLOSE_BRACE512=null;
        Token AVG513=null;
        Token OPEN_BRACE514=null;
        Token CLOSE_BRACE515=null;
        Token SAMPLE516=null;
        Token OPEN_BRACE517=null;
        Token CLOSE_BRACE518=null;
        Token GROUP_CONCAT519=null;
        Token OPEN_BRACE520=null;
        Token SEMICOLON521=null;
        Token SEPARATOR522=null;
        Token char_literal523=null;
        Token CLOSE_BRACE524=null;
        IbmSparqlParser.expression_return e1 = null;

        IbmSparqlParser.expression_return e2 = null;

        IbmSparqlParser.expression_return e3 = null;

        IbmSparqlParser.expression_return e4 = null;

        IbmSparqlParser.expression_return e5 = null;

        IbmSparqlParser.expression_return e6 = null;

        IbmSparqlParser.expression_return e7 = null;

        IbmSparqlParser.string_return s = null;


        XTree d1_tree=null;
        XTree d2_tree=null;
        XTree d3_tree=null;
        XTree d4_tree=null;
        XTree d5_tree=null;
        XTree d6_tree=null;
        XTree d7_tree=null;
        XTree COUNT500_tree=null;
        XTree OPEN_BRACE501_tree=null;
        XTree char_literal502_tree=null;
        XTree CLOSE_BRACE503_tree=null;
        XTree SUM504_tree=null;
        XTree OPEN_BRACE505_tree=null;
        XTree CLOSE_BRACE506_tree=null;
        XTree MIN507_tree=null;
        XTree OPEN_BRACE508_tree=null;
        XTree CLOSE_BRACE509_tree=null;
        XTree MAX510_tree=null;
        XTree OPEN_BRACE511_tree=null;
        XTree CLOSE_BRACE512_tree=null;
        XTree AVG513_tree=null;
        XTree OPEN_BRACE514_tree=null;
        XTree CLOSE_BRACE515_tree=null;
        XTree SAMPLE516_tree=null;
        XTree OPEN_BRACE517_tree=null;
        XTree CLOSE_BRACE518_tree=null;
        XTree GROUP_CONCAT519_tree=null;
        XTree OPEN_BRACE520_tree=null;
        XTree SEMICOLON521_tree=null;
        XTree SEPARATOR522_tree=null;
        XTree char_literal523_tree=null;
        XTree CLOSE_BRACE524_tree=null;
        RewriteRuleTokenStream stream_251=new RewriteRuleTokenStream(adaptor,"token 251");
        RewriteRuleTokenStream stream_SAMPLE=new RewriteRuleTokenStream(adaptor,"token SAMPLE");
        RewriteRuleTokenStream stream_AVG=new RewriteRuleTokenStream(adaptor,"token AVG");
        RewriteRuleTokenStream stream_GROUP_CONCAT=new RewriteRuleTokenStream(adaptor,"token GROUP_CONCAT");
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_COUNT=new RewriteRuleTokenStream(adaptor,"token COUNT");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_SUM=new RewriteRuleTokenStream(adaptor,"token SUM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_259=new RewriteRuleTokenStream(adaptor,"token 259");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
        try {
            // IbmSparql.g:875:2: ( COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' | e1= expression ) CLOSE_BRACE -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? ) | SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE -> ^( SUM ( $d2)? $e2) | MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE -> ^( MIN ( $d3)? $e3) | MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE -> ^( MAX ( $d4)? $e4) | AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE -> ^( AVG ( $d5)? $e5) | SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE -> ^( SAMPLE ( $d6)? $e6) | GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? ) )
            int alt151=7;
            switch ( input.LA(1) ) {
            case COUNT:
                {
                alt151=1;
                }
                break;
            case SUM:
                {
                alt151=2;
                }
                break;
            case MIN:
                {
                alt151=3;
                }
                break;
            case MAX:
                {
                alt151=4;
                }
                break;
            case AVG:
                {
                alt151=5;
                }
                break;
            case SAMPLE:
                {
                alt151=6;
                }
                break;
            case GROUP_CONCAT:
                {
                alt151=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // IbmSparql.g:875:4: COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' | e1= expression ) CLOSE_BRACE
                    {
                    COUNT500=(Token)match(input,COUNT,FOLLOW_COUNT_in_aggregate8414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COUNT.add(COUNT500);

                    OPEN_BRACE501=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE501);

                    // IbmSparql.g:875:23: (d1= DISTINCT )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==DISTINCT) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // IbmSparql.g:875:23: d1= DISTINCT
                            {
                            d1=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8420); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d1);


                            }
                            break;

                    }

                    // IbmSparql.g:875:34: ( '*' | e1= expression )
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==251) ) {
                        alt143=1;
                    }
                    else if ( (LA143_0==IRI_REF||LA143_0==PNAME_NS||LA143_0==OPEN_BRACE||LA143_0==INTEGER||(LA143_0>=VAR1 && LA143_0<=VAR2)||(LA143_0>=NOT && LA143_0<=GROUP_CONCAT)||(LA143_0>=DECIMAL && LA143_0<=PNAME_LN)||(LA143_0>=257 && LA143_0<=258)||LA143_0==263) ) {
                        alt143=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 143, 0, input);

                        throw nvae;
                    }
                    switch (alt143) {
                        case 1 :
                            // IbmSparql.g:875:36: '*'
                            {
                            char_literal502=(Token)match(input,251,FOLLOW_251_in_aggregate8425); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_251.add(char_literal502);


                            }
                            break;
                        case 2 :
                            // IbmSparql.g:875:42: e1= expression
                            {
                            pushFollow(FOLLOW_expression_in_aggregate8431);
                            e1=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

                            }
                            break;

                    }

                    CLOSE_BRACE503=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE503);



                    // AST REWRITE
                    // elements: 251, e1, COUNT, d1
                    // token labels: d1
                    // rule labels: retval, e1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d1=new RewriteRuleTokenStream(adaptor,"token d1",d1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 875:74: -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? )
                    {
                        // IbmSparql.g:875:78: ^( COUNT ( $d1)? ( '*' )? ( $e1)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_COUNT.nextNode(), root_1);

                        // IbmSparql.g:875:88: ( $d1)?
                        if ( stream_d1.hasNext() ) {
                            adaptor.addChild(root_1, stream_d1.nextNode());

                        }
                        stream_d1.reset();
                        // IbmSparql.g:875:94: ( '*' )?
                        if ( stream_251.hasNext() ) {
                            adaptor.addChild(root_1, stream_251.nextNode());

                        }
                        stream_251.reset();
                        // IbmSparql.g:875:100: ( $e1)?
                        if ( stream_e1.hasNext() ) {
                            adaptor.addChild(root_1, stream_e1.nextTree());

                        }
                        stream_e1.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:876:4: SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE
                    {
                    SUM504=(Token)match(input,SUM,FOLLOW_SUM_in_aggregate8467); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUM.add(SUM504);

                    OPEN_BRACE505=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE505);

                    // IbmSparql.g:876:21: (d2= DISTINCT )?
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==DISTINCT) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            // IbmSparql.g:876:21: d2= DISTINCT
                            {
                            d2=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8473); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d2);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8478);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    CLOSE_BRACE506=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE506);



                    // AST REWRITE
                    // elements: e2, SUM, d2
                    // token labels: d2
                    // rule labels: retval, e2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d2=new RewriteRuleTokenStream(adaptor,"token d2",d2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 876:61: -> ^( SUM ( $d2)? $e2)
                    {
                        // IbmSparql.g:876:65: ^( SUM ( $d2)? $e2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SUM.nextNode(), root_1);

                        // IbmSparql.g:876:72: ( $d2)?
                        if ( stream_d2.hasNext() ) {
                            adaptor.addChild(root_1, stream_d2.nextNode());

                        }
                        stream_d2.reset();
                        adaptor.addChild(root_1, stream_e2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparql.g:877:4: MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE
                    {
                    MIN507=(Token)match(input,MIN,FOLLOW_MIN_in_aggregate8504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN507);

                    OPEN_BRACE508=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE508);

                    // IbmSparql.g:877:21: (d3= DISTINCT )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==DISTINCT) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // IbmSparql.g:877:21: d3= DISTINCT
                            {
                            d3=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8510); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d3);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8515);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());
                    CLOSE_BRACE509=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE509);



                    // AST REWRITE
                    // elements: e3, d3, MIN
                    // token labels: d3
                    // rule labels: e3, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d3=new RewriteRuleTokenStream(adaptor,"token d3",d3);
                    RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 877:61: -> ^( MIN ( $d3)? $e3)
                    {
                        // IbmSparql.g:877:65: ^( MIN ( $d3)? $e3)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_MIN.nextNode(), root_1);

                        // IbmSparql.g:877:72: ( $d3)?
                        if ( stream_d3.hasNext() ) {
                            adaptor.addChild(root_1, stream_d3.nextNode());

                        }
                        stream_d3.reset();
                        adaptor.addChild(root_1, stream_e3.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // IbmSparql.g:878:4: MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE
                    {
                    MAX510=(Token)match(input,MAX,FOLLOW_MAX_in_aggregate8541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(MAX510);

                    OPEN_BRACE511=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8543); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE511);

                    // IbmSparql.g:878:21: (d4= DISTINCT )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==DISTINCT) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // IbmSparql.g:878:21: d4= DISTINCT
                            {
                            d4=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8547); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d4);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8552);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());
                    CLOSE_BRACE512=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE512);



                    // AST REWRITE
                    // elements: e4, d4, MAX
                    // token labels: d4
                    // rule labels: e4, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d4=new RewriteRuleTokenStream(adaptor,"token d4",d4);
                    RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 878:61: -> ^( MAX ( $d4)? $e4)
                    {
                        // IbmSparql.g:878:65: ^( MAX ( $d4)? $e4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_MAX.nextNode(), root_1);

                        // IbmSparql.g:878:72: ( $d4)?
                        if ( stream_d4.hasNext() ) {
                            adaptor.addChild(root_1, stream_d4.nextNode());

                        }
                        stream_d4.reset();
                        adaptor.addChild(root_1, stream_e4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // IbmSparql.g:879:4: AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE
                    {
                    AVG513=(Token)match(input,AVG,FOLLOW_AVG_in_aggregate8578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AVG.add(AVG513);

                    OPEN_BRACE514=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE514);

                    // IbmSparql.g:879:21: (d5= DISTINCT )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==DISTINCT) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // IbmSparql.g:879:21: d5= DISTINCT
                            {
                            d5=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8584); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d5);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8589);
                    e5=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e5.getTree());
                    CLOSE_BRACE515=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE515);



                    // AST REWRITE
                    // elements: AVG, d5, e5
                    // token labels: d5
                    // rule labels: retval, e5
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d5=new RewriteRuleTokenStream(adaptor,"token d5",d5);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e5=new RewriteRuleSubtreeStream(adaptor,"rule e5",e5!=null?e5.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 879:61: -> ^( AVG ( $d5)? $e5)
                    {
                        // IbmSparql.g:879:65: ^( AVG ( $d5)? $e5)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_AVG.nextNode(), root_1);

                        // IbmSparql.g:879:72: ( $d5)?
                        if ( stream_d5.hasNext() ) {
                            adaptor.addChild(root_1, stream_d5.nextNode());

                        }
                        stream_d5.reset();
                        adaptor.addChild(root_1, stream_e5.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // IbmSparql.g:880:4: SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE
                    {
                    SAMPLE516=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_aggregate8615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SAMPLE.add(SAMPLE516);

                    OPEN_BRACE517=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8617); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE517);

                    // IbmSparql.g:880:24: (d6= DISTINCT )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==DISTINCT) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // IbmSparql.g:880:24: d6= DISTINCT
                            {
                            d6=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8621); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d6);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8626);
                    e6=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e6.getTree());
                    CLOSE_BRACE518=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE518);



                    // AST REWRITE
                    // elements: SAMPLE, d6, e6
                    // token labels: d6
                    // rule labels: retval, e6
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d6=new RewriteRuleTokenStream(adaptor,"token d6",d6);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e6=new RewriteRuleSubtreeStream(adaptor,"rule e6",e6!=null?e6.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 880:61: -> ^( SAMPLE ( $d6)? $e6)
                    {
                        // IbmSparql.g:880:65: ^( SAMPLE ( $d6)? $e6)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SAMPLE.nextNode(), root_1);

                        // IbmSparql.g:880:75: ( $d6)?
                        if ( stream_d6.hasNext() ) {
                            adaptor.addChild(root_1, stream_d6.nextNode());

                        }
                        stream_d6.reset();
                        adaptor.addChild(root_1, stream_e6.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // IbmSparql.g:881:4: GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE
                    {
                    GROUP_CONCAT519=(Token)match(input,GROUP_CONCAT,FOLLOW_GROUP_CONCAT_in_aggregate8649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP_CONCAT.add(GROUP_CONCAT519);

                    OPEN_BRACE520=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE520);

                    // IbmSparql.g:881:30: (d7= DISTINCT )?
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==DISTINCT) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            // IbmSparql.g:881:30: d7= DISTINCT
                            {
                            d7=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8655); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d7);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8660);
                    e7=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e7.getTree());
                    // IbmSparql.g:881:55: ( SEMICOLON SEPARATOR '=' s= string )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==SEMICOLON) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // IbmSparql.g:881:57: SEMICOLON SEPARATOR '=' s= string
                            {
                            SEMICOLON521=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_aggregate8664); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON521);

                            SEPARATOR522=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_aggregate8666); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR522);

                            char_literal523=(Token)match(input,259,FOLLOW_259_in_aggregate8668); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_259.add(char_literal523);

                            pushFollow(FOLLOW_string_in_aggregate8672);
                            s=string();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_string.add(s.getTree());

                            }
                            break;

                    }

                    CLOSE_BRACE524=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE524);



                    // AST REWRITE
                    // elements: d7, e7, s, GROUP_CONCAT, SEPARATOR
                    // token labels: d7
                    // rule labels: retval, s, e7
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d7=new RewriteRuleTokenStream(adaptor,"token d7",d7);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
                    RewriteRuleSubtreeStream stream_e7=new RewriteRuleSubtreeStream(adaptor,"rule e7",e7!=null?e7.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 882:3: -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? )
                    {
                        // IbmSparql.g:882:7: ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_GROUP_CONCAT.nextNode(), root_1);

                        // IbmSparql.g:882:23: ( $d7)?
                        if ( stream_d7.hasNext() ) {
                            adaptor.addChild(root_1, stream_d7.nextNode());

                        }
                        stream_d7.reset();
                        adaptor.addChild(root_1, stream_e7.nextTree());
                        // IbmSparql.g:882:33: ( ^( SEPARATOR $s) )?
                        if ( stream_s.hasNext()||stream_SEPARATOR.hasNext() ) {
                            // IbmSparql.g:882:33: ^( SEPARATOR $s)
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot(stream_SEPARATOR.nextNode(), root_2);

                            adaptor.addChild(root_2, stream_s.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_s.reset();
                        stream_SEPARATOR.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "aggregate"

    public static class iRIrefOrFunction_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iRIrefOrFunction"
    // IbmSparql.g:885:1: iRIrefOrFunction : i= iRIref (a= argList )? -> {f==false}? $i -> ^( FUNCTION $i ( $a)? ) ;
    public final IbmSparqlParser.iRIrefOrFunction_return iRIrefOrFunction() throws RecognitionException {
        IbmSparqlParser.iRIrefOrFunction_return retval = new IbmSparqlParser.iRIrefOrFunction_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.iRIref_return i = null;

        IbmSparqlParser.argList_return a = null;


        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
         
        		boolean f=false;
        	
        try {
            // IbmSparql.g:889:2: (i= iRIref (a= argList )? -> {f==false}? $i -> ^( FUNCTION $i ( $a)? ) )
            // IbmSparql.g:889:6: i= iRIref (a= argList )?
            {
            pushFollow(FOLLOW_iRIref_in_iRIrefOrFunction8730);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());
            // IbmSparql.g:889:15: (a= argList )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==OPEN_BRACE) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // IbmSparql.g:889:16: a= argList
                    {
                    pushFollow(FOLLOW_argList_in_iRIrefOrFunction8735);
                    a=argList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_argList.add(a.getTree());
                    if ( state.backtracking==0 ) {
                      f=true;
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: a, i, i
            // token labels: 
            // rule labels: retval, a, i
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 891:3: -> {f==false}? $i
            if (f==false) {
                adaptor.addChild(root_0, stream_i.nextTree());

            }
            else // 892:3: -> ^( FUNCTION $i ( $a)? )
            {
                // IbmSparql.g:892:7: ^( FUNCTION $i ( $a)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_i.nextTree());
                // IbmSparql.g:892:24: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "iRIrefOrFunction"

    public static class rDFLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rDFLiteral"
    // IbmSparql.g:895:1: rDFLiteral : string ( LANGTAG | ( '^^' iRIref ) )? ;
    public final IbmSparqlParser.rDFLiteral_return rDFLiteral() throws RecognitionException {
        IbmSparqlParser.rDFLiteral_return retval = new IbmSparqlParser.rDFLiteral_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token LANGTAG526=null;
        Token string_literal527=null;
        IbmSparqlParser.string_return string525 = null;

        IbmSparqlParser.iRIref_return iRIref528 = null;


        XTree LANGTAG526_tree=null;
        XTree string_literal527_tree=null;

        try {
            // IbmSparql.g:896:2: ( string ( LANGTAG | ( '^^' iRIref ) )? )
            // IbmSparql.g:896:6: string ( LANGTAG | ( '^^' iRIref ) )?
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_string_in_rDFLiteral8790);
            string525=string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string525.getTree());
            // IbmSparql.g:896:13: ( LANGTAG | ( '^^' iRIref ) )?
            int alt153=3;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LANGTAG) ) {
                alt153=1;
            }
            else if ( (LA153_0==264) ) {
                alt153=2;
            }
            switch (alt153) {
                case 1 :
                    // IbmSparql.g:896:15: LANGTAG
                    {
                    LANGTAG526=(Token)match(input,LANGTAG,FOLLOW_LANGTAG_in_rDFLiteral8794); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LANGTAG526_tree = (XTree)adaptor.create(LANGTAG526);
                    adaptor.addChild(root_0, LANGTAG526_tree);
                    }

                    }
                    break;
                case 2 :
                    // IbmSparql.g:896:25: ( '^^' iRIref )
                    {
                    // IbmSparql.g:896:25: ( '^^' iRIref )
                    // IbmSparql.g:896:27: '^^' iRIref
                    {
                    string_literal527=(Token)match(input,264,FOLLOW_264_in_rDFLiteral8800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal527_tree = (XTree)adaptor.create(string_literal527);
                    adaptor.addChild(root_0, string_literal527_tree);
                    }
                    pushFollow(FOLLOW_iRIref_in_rDFLiteral8802);
                    iRIref528=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref528.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "rDFLiteral"

    public static class numericLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteral"
    // IbmSparql.g:899:1: numericLiteral : ( numericLiteralUnsigned | numericLiteralPositive | numericLiteralNegative );
    public final IbmSparqlParser.numericLiteral_return numericLiteral() throws RecognitionException {
        IbmSparqlParser.numericLiteral_return retval = new IbmSparqlParser.numericLiteral_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlParser.numericLiteralUnsigned_return numericLiteralUnsigned529 = null;

        IbmSparqlParser.numericLiteralPositive_return numericLiteralPositive530 = null;

        IbmSparqlParser.numericLiteralNegative_return numericLiteralNegative531 = null;



        try {
            // IbmSparql.g:900:2: ( numericLiteralUnsigned | numericLiteralPositive | numericLiteralNegative )
            int alt154=3;
            switch ( input.LA(1) ) {
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
                {
                alt154=1;
                }
                break;
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
                {
                alt154=2;
                }
                break;
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt154=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }

            switch (alt154) {
                case 1 :
                    // IbmSparql.g:900:6: numericLiteralUnsigned
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteralUnsigned_in_numericLiteral8824);
                    numericLiteralUnsigned529=numericLiteralUnsigned();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralUnsigned529.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparql.g:901:5: numericLiteralPositive
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteralPositive_in_numericLiteral8832);
                    numericLiteralPositive530=numericLiteralPositive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralPositive530.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparql.g:902:5: numericLiteralNegative
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteralNegative_in_numericLiteral8840);
                    numericLiteralNegative531=numericLiteralNegative();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralNegative531.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericLiteral"

    public static class numericLiteralUnsigned_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteralUnsigned"
    // IbmSparql.g:905:1: numericLiteralUnsigned : ( INTEGER -> ^( BIG_INTEGER INTEGER ) | DECIMAL -> ^( BIG_DECIMAL DECIMAL ) | DOUBLE -> ^( DOUBLE DOUBLE ) );
    public final IbmSparqlParser.numericLiteralUnsigned_return numericLiteralUnsigned() throws RecognitionException {
        IbmSparqlParser.numericLiteralUnsigned_return retval = new IbmSparqlParser.numericLiteralUnsigned_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INTEGER532=null;
        Token DECIMAL533=null;
        Token DOUBLE534=null;

        XTree INTEGER532_tree=null;
        XTree DECIMAL533_tree=null;
        XTree DOUBLE534_tree=null;
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
        RewriteRuleTokenStream stream_DOUBLE=new RewriteRuleTokenStream(adaptor,"token DOUBLE");
        RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");

        try {
            // IbmSparql.g:906:2: ( INTEGER -> ^( BIG_INTEGER INTEGER ) | DECIMAL -> ^( BIG_DECIMAL DECIMAL ) | DOUBLE -> ^( DOUBLE DOUBLE ) )
            int alt155=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                alt155=1;
                }
                break;
            case DECIMAL:
                {
                alt155=2;
                }
                break;
            case DOUBLE:
                {
                alt155=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }

            switch (alt155) {
                case 1 :
                    // IbmSparql.g:906:6: INTEGER
                    {
                    INTEGER532=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_numericLiteralUnsigned8858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER.add(INTEGER532);



                    // AST REWRITE
                    // elements: INTEGER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 906:18: -> ^( BIG_INTEGER INTEGER )
                    {
                        // IbmSparql.g:906:21: ^( BIG_INTEGER INTEGER )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER"), root_1);

                        adaptor.addChild(root_1, stream_INTEGER.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:907:5: DECIMAL
                    {
                    DECIMAL533=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_numericLiteralUnsigned8879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL.add(DECIMAL533);



                    // AST REWRITE
                    // elements: DECIMAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 907:17: -> ^( BIG_DECIMAL DECIMAL )
                    {
                        // IbmSparql.g:907:20: ^( BIG_DECIMAL DECIMAL )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL"), root_1);

                        adaptor.addChild(root_1, stream_DECIMAL.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparql.g:908:5: DOUBLE
                    {
                    DOUBLE534=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_numericLiteralUnsigned8899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE.add(DOUBLE534);



                    // AST REWRITE
                    // elements: DOUBLE, DOUBLE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 908:16: -> ^( DOUBLE DOUBLE )
                    {
                        // IbmSparql.g:908:19: ^( DOUBLE DOUBLE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_DOUBLE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_DOUBLE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericLiteralUnsigned"

    public static class numericLiteralPositive_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteralPositive"
    // IbmSparql.g:911:1: numericLiteralPositive : ( INTEGER_POSITIVE -> ^( BIG_INTEGER INTEGER_POSITIVE ) | DECIMAL_POSITIVE -> ^( BIG_DECIMAL DECIMAL_POSITIVE ) | DOUBLE_POSITIVE -> ^( DOUBLE DOUBLE_POSITIVE ) );
    public final IbmSparqlParser.numericLiteralPositive_return numericLiteralPositive() throws RecognitionException {
        IbmSparqlParser.numericLiteralPositive_return retval = new IbmSparqlParser.numericLiteralPositive_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INTEGER_POSITIVE535=null;
        Token DECIMAL_POSITIVE536=null;
        Token DOUBLE_POSITIVE537=null;

        XTree INTEGER_POSITIVE535_tree=null;
        XTree DECIMAL_POSITIVE536_tree=null;
        XTree DOUBLE_POSITIVE537_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_POSITIVE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_POSITIVE");
        RewriteRuleTokenStream stream_DECIMAL_POSITIVE=new RewriteRuleTokenStream(adaptor,"token DECIMAL_POSITIVE");
        RewriteRuleTokenStream stream_INTEGER_POSITIVE=new RewriteRuleTokenStream(adaptor,"token INTEGER_POSITIVE");

        try {
            // IbmSparql.g:912:2: ( INTEGER_POSITIVE -> ^( BIG_INTEGER INTEGER_POSITIVE ) | DECIMAL_POSITIVE -> ^( BIG_DECIMAL DECIMAL_POSITIVE ) | DOUBLE_POSITIVE -> ^( DOUBLE DOUBLE_POSITIVE ) )
            int alt156=3;
            switch ( input.LA(1) ) {
            case INTEGER_POSITIVE:
                {
                alt156=1;
                }
                break;
            case DECIMAL_POSITIVE:
                {
                alt156=2;
                }
                break;
            case DOUBLE_POSITIVE:
                {
                alt156=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // IbmSparql.g:912:6: INTEGER_POSITIVE
                    {
                    INTEGER_POSITIVE535=(Token)match(input,INTEGER_POSITIVE,FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive8933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER_POSITIVE.add(INTEGER_POSITIVE535);



                    // AST REWRITE
                    // elements: INTEGER_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 912:25: -> ^( BIG_INTEGER INTEGER_POSITIVE )
                    {
                        // IbmSparql.g:912:28: ^( BIG_INTEGER INTEGER_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER"), root_1);

                        adaptor.addChild(root_1, stream_INTEGER_POSITIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:913:5: DECIMAL_POSITIVE
                    {
                    DECIMAL_POSITIVE536=(Token)match(input,DECIMAL_POSITIVE,FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive8952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL_POSITIVE.add(DECIMAL_POSITIVE536);



                    // AST REWRITE
                    // elements: DECIMAL_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 913:24: -> ^( BIG_DECIMAL DECIMAL_POSITIVE )
                    {
                        // IbmSparql.g:913:27: ^( BIG_DECIMAL DECIMAL_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL"), root_1);

                        adaptor.addChild(root_1, stream_DECIMAL_POSITIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparql.g:914:5: DOUBLE_POSITIVE
                    {
                    DOUBLE_POSITIVE537=(Token)match(input,DOUBLE_POSITIVE,FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive8970); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_POSITIVE.add(DOUBLE_POSITIVE537);



                    // AST REWRITE
                    // elements: DOUBLE_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 914:23: -> ^( DOUBLE DOUBLE_POSITIVE )
                    {
                        // IbmSparql.g:914:26: ^( DOUBLE DOUBLE_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(DOUBLE, "DOUBLE"), root_1);

                        adaptor.addChild(root_1, stream_DOUBLE_POSITIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericLiteralPositive"

    public static class numericLiteralNegative_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteralNegative"
    // IbmSparql.g:917:1: numericLiteralNegative : ( INTEGER_NEGATIVE -> ^( BIG_INTEGER INTEGER_NEGATIVE ) | DECIMAL_NEGATIVE -> ^( BIG_DECIMAL DECIMAL_NEGATIVE ) | DOUBLE_NEGATIVE -> ^( DOUBLE DOUBLE_NEGATIVE ) );
    public final IbmSparqlParser.numericLiteralNegative_return numericLiteralNegative() throws RecognitionException {
        IbmSparqlParser.numericLiteralNegative_return retval = new IbmSparqlParser.numericLiteralNegative_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INTEGER_NEGATIVE538=null;
        Token DECIMAL_NEGATIVE539=null;
        Token DOUBLE_NEGATIVE540=null;

        XTree INTEGER_NEGATIVE538_tree=null;
        XTree DECIMAL_NEGATIVE539_tree=null;
        XTree DOUBLE_NEGATIVE540_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_NEGATIVE");
        RewriteRuleTokenStream stream_DECIMAL_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token DECIMAL_NEGATIVE");
        RewriteRuleTokenStream stream_INTEGER_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token INTEGER_NEGATIVE");

        try {
            // IbmSparql.g:918:2: ( INTEGER_NEGATIVE -> ^( BIG_INTEGER INTEGER_NEGATIVE ) | DECIMAL_NEGATIVE -> ^( BIG_DECIMAL DECIMAL_NEGATIVE ) | DOUBLE_NEGATIVE -> ^( DOUBLE DOUBLE_NEGATIVE ) )
            int alt157=3;
            switch ( input.LA(1) ) {
            case INTEGER_NEGATIVE:
                {
                alt157=1;
                }
                break;
            case DECIMAL_NEGATIVE:
                {
                alt157=2;
                }
                break;
            case DOUBLE_NEGATIVE:
                {
                alt157=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // IbmSparql.g:918:6: INTEGER_NEGATIVE
                    {
                    INTEGER_NEGATIVE538=(Token)match(input,INTEGER_NEGATIVE,FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative9000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER_NEGATIVE.add(INTEGER_NEGATIVE538);



                    // AST REWRITE
                    // elements: INTEGER_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 918:25: -> ^( BIG_INTEGER INTEGER_NEGATIVE )
                    {
                        // IbmSparql.g:918:28: ^( BIG_INTEGER INTEGER_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER"), root_1);

                        adaptor.addChild(root_1, stream_INTEGER_NEGATIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:919:5: DECIMAL_NEGATIVE
                    {
                    DECIMAL_NEGATIVE539=(Token)match(input,DECIMAL_NEGATIVE,FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative9019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL_NEGATIVE.add(DECIMAL_NEGATIVE539);



                    // AST REWRITE
                    // elements: DECIMAL_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 919:24: -> ^( BIG_DECIMAL DECIMAL_NEGATIVE )
                    {
                        // IbmSparql.g:919:27: ^( BIG_DECIMAL DECIMAL_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL"), root_1);

                        adaptor.addChild(root_1, stream_DECIMAL_NEGATIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparql.g:920:5: DOUBLE_NEGATIVE
                    {
                    DOUBLE_NEGATIVE540=(Token)match(input,DOUBLE_NEGATIVE,FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative9037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_NEGATIVE.add(DOUBLE_NEGATIVE540);



                    // AST REWRITE
                    // elements: DOUBLE_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 920:23: -> ^( DOUBLE DOUBLE_NEGATIVE )
                    {
                        // IbmSparql.g:920:26: ^( DOUBLE DOUBLE_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(DOUBLE, "DOUBLE"), root_1);

                        adaptor.addChild(root_1, stream_DOUBLE_NEGATIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericLiteralNegative"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // IbmSparql.g:923:1: booleanLiteral : (t= TRUE -> ^( BOOLEAN $t) | f= FALSE -> ^( BOOLEAN $f) );
    public final IbmSparqlParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        IbmSparqlParser.booleanLiteral_return retval = new IbmSparqlParser.booleanLiteral_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token t=null;
        Token f=null;

        XTree t_tree=null;
        XTree f_tree=null;
        RewriteRuleTokenStream stream_FALSE=new RewriteRuleTokenStream(adaptor,"token FALSE");
        RewriteRuleTokenStream stream_TRUE=new RewriteRuleTokenStream(adaptor,"token TRUE");

        try {
            // IbmSparql.g:924:2: (t= TRUE -> ^( BOOLEAN $t) | f= FALSE -> ^( BOOLEAN $f) )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==TRUE) ) {
                alt158=1;
            }
            else if ( (LA158_0==FALSE) ) {
                alt158=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // IbmSparql.g:924:6: t= TRUE
                    {
                    t=(Token)match(input,TRUE,FOLLOW_TRUE_in_booleanLiteral9069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRUE.add(t);



                    // AST REWRITE
                    // elements: t
                    // token labels: t
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 924:15: -> ^( BOOLEAN $t)
                    {
                        // IbmSparql.g:924:19: ^( BOOLEAN $t)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BOOLEAN, "BOOLEAN"), root_1);

                        adaptor.addChild(root_1, stream_t.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:925:6: f= FALSE
                    {
                    f=(Token)match(input,FALSE,FOLLOW_FALSE_in_booleanLiteral9092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FALSE.add(f);



                    // AST REWRITE
                    // elements: f
                    // token labels: f
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 925:15: -> ^( BOOLEAN $f)
                    {
                        // IbmSparql.g:925:19: ^( BOOLEAN $f)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BOOLEAN, "BOOLEAN"), root_1);

                        adaptor.addChild(root_1, stream_f.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class string_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string"
    // IbmSparql.g:928:1: string : (s1= STRING_LITERAL1 -> ^( STRING $s1) | s2= STRING_LITERAL2 -> ^( STRING $s2) | s3= STRING_LITERAL_LONG1 -> ^( STRING $s3) | s4= STRING_LITERAL_LONG2 -> ^( STRING $s4) );
    public final IbmSparqlParser.string_return string() throws RecognitionException {
        IbmSparqlParser.string_return retval = new IbmSparqlParser.string_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token s1=null;
        Token s2=null;
        Token s3=null;
        Token s4=null;

        XTree s1_tree=null;
        XTree s2_tree=null;
        XTree s3_tree=null;
        XTree s4_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL_LONG2=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL_LONG2");
        RewriteRuleTokenStream stream_STRING_LITERAL_LONG1=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL_LONG1");
        RewriteRuleTokenStream stream_STRING_LITERAL2=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL2");
        RewriteRuleTokenStream stream_STRING_LITERAL1=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL1");

        try {
            // IbmSparql.g:929:2: (s1= STRING_LITERAL1 -> ^( STRING $s1) | s2= STRING_LITERAL2 -> ^( STRING $s2) | s3= STRING_LITERAL_LONG1 -> ^( STRING $s3) | s4= STRING_LITERAL_LONG2 -> ^( STRING $s4) )
            int alt159=4;
            switch ( input.LA(1) ) {
            case STRING_LITERAL1:
                {
                alt159=1;
                }
                break;
            case STRING_LITERAL2:
                {
                alt159=2;
                }
                break;
            case STRING_LITERAL_LONG1:
                {
                alt159=3;
                }
                break;
            case STRING_LITERAL_LONG2:
                {
                alt159=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // IbmSparql.g:929:6: s1= STRING_LITERAL1
                    {
                    s1=(Token)match(input,STRING_LITERAL1,FOLLOW_STRING_LITERAL1_in_string9124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL1.add(s1);



                    // AST REWRITE
                    // elements: s1
                    // token labels: s1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s1=new RewriteRuleTokenStream(adaptor,"token s1",s1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 929:33: -> ^( STRING $s1)
                    {
                        // IbmSparql.g:929:37: ^( STRING $s1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_s1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:930:5: s2= STRING_LITERAL2
                    {
                    s2=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_string9152); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL2.add(s2);



                    // AST REWRITE
                    // elements: s2
                    // token labels: s2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 930:32: -> ^( STRING $s2)
                    {
                        // IbmSparql.g:930:36: ^( STRING $s2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_s2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparql.g:931:5: s3= STRING_LITERAL_LONG1
                    {
                    s3=(Token)match(input,STRING_LITERAL_LONG1,FOLLOW_STRING_LITERAL_LONG1_in_string9180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL_LONG1.add(s3);



                    // AST REWRITE
                    // elements: s3
                    // token labels: s3
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s3=new RewriteRuleTokenStream(adaptor,"token s3",s3);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 931:32: -> ^( STRING $s3)
                    {
                        // IbmSparql.g:931:36: ^( STRING $s3)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_s3.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // IbmSparql.g:932:4: s4= STRING_LITERAL_LONG2
                    {
                    s4=(Token)match(input,STRING_LITERAL_LONG2,FOLLOW_STRING_LITERAL_LONG2_in_string9202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL_LONG2.add(s4);



                    // AST REWRITE
                    // elements: s4
                    // token labels: s4
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s4=new RewriteRuleTokenStream(adaptor,"token s4",s4);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 932:31: -> ^( STRING $s4)
                    {
                        // IbmSparql.g:932:35: ^( STRING $s4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_s4.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "string"

    public static class iRIref_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iRIref"
    // IbmSparql.g:935:1: iRIref : (i= IRI_REF -> ^( IRI $i) | prefixedName );
    public final IbmSparqlParser.iRIref_return iRIref() throws RecognitionException {
        IbmSparqlParser.iRIref_return retval = new IbmSparqlParser.iRIref_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token i=null;
        IbmSparqlParser.prefixedName_return prefixedName541 = null;


        XTree i_tree=null;
        RewriteRuleTokenStream stream_IRI_REF=new RewriteRuleTokenStream(adaptor,"token IRI_REF");

        try {
            // IbmSparql.g:936:2: (i= IRI_REF -> ^( IRI $i) | prefixedName )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==IRI_REF) ) {
                alt160=1;
            }
            else if ( (LA160_0==PNAME_NS||LA160_0==PNAME_LN) ) {
                alt160=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    // IbmSparql.g:936:6: i= IRI_REF
                    {
                    i=(Token)match(input,IRI_REF,FOLLOW_IRI_REF_in_iRIref9237); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRI_REF.add(i);



                    // AST REWRITE
                    // elements: i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 936:26: -> ^( IRI $i)
                    {
                        // IbmSparql.g:936:30: ^( IRI $i)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(IRI, "IRI"), root_1);

                        adaptor.addChild(root_1, stream_i.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:937:6: prefixedName
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_prefixedName_in_iRIref9264);
                    prefixedName541=prefixedName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prefixedName541.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "iRIref"

    public static class prefixedName_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefixedName"
    // IbmSparql.g:940:1: prefixedName : (n1= PNAME_LN -> ^( PREFIXED_NAME $n1) | n2= PNAME_NS -> ^( PREFIXED_NS $n2) );
    public final IbmSparqlParser.prefixedName_return prefixedName() throws RecognitionException {
        IbmSparqlParser.prefixedName_return retval = new IbmSparqlParser.prefixedName_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token n1=null;
        Token n2=null;

        XTree n1_tree=null;
        XTree n2_tree=null;
        RewriteRuleTokenStream stream_PNAME_NS=new RewriteRuleTokenStream(adaptor,"token PNAME_NS");
        RewriteRuleTokenStream stream_PNAME_LN=new RewriteRuleTokenStream(adaptor,"token PNAME_LN");

        try {
            // IbmSparql.g:941:2: (n1= PNAME_LN -> ^( PREFIXED_NAME $n1) | n2= PNAME_NS -> ^( PREFIXED_NS $n2) )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==PNAME_LN) ) {
                alt161=1;
            }
            else if ( (LA161_0==PNAME_NS) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    // IbmSparql.g:941:6: n1= PNAME_LN
                    {
                    n1=(Token)match(input,PNAME_LN,FOLLOW_PNAME_LN_in_prefixedName9283); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PNAME_LN.add(n1);



                    // AST REWRITE
                    // elements: n1
                    // token labels: n1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n1=new RewriteRuleTokenStream(adaptor,"token n1",n1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 941:26: -> ^( PREFIXED_NAME $n1)
                    {
                        // IbmSparql.g:941:30: ^( PREFIXED_NAME $n1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREFIXED_NAME, "PREFIXED_NAME"), root_1);

                        adaptor.addChild(root_1, stream_n1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparql.g:942:6: n2= PNAME_NS
                    {
                    n2=(Token)match(input,PNAME_NS,FOLLOW_PNAME_NS_in_prefixedName9310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PNAME_NS.add(n2);



                    // AST REWRITE
                    // elements: n2
                    // token labels: n2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n2=new RewriteRuleTokenStream(adaptor,"token n2",n2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 942:26: -> ^( PREFIXED_NS $n2)
                    {
                        // IbmSparql.g:942:30: ^( PREFIXED_NS $n2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREFIXED_NS, "PREFIXED_NS"), root_1);

                        adaptor.addChild(root_1, stream_n2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefixedName"

    public static class blankNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blankNode"
    // IbmSparql.g:945:1: blankNode : ( BLANK_NODE_LABEL | annon );
    public final IbmSparqlParser.blankNode_return blankNode() throws RecognitionException {
        IbmSparqlParser.blankNode_return retval = new IbmSparqlParser.blankNode_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token BLANK_NODE_LABEL542=null;
        IbmSparqlParser.annon_return annon543 = null;


        XTree BLANK_NODE_LABEL542_tree=null;

        try {
            // IbmSparql.g:946:2: ( BLANK_NODE_LABEL | annon )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==BLANK_NODE_LABEL) ) {
                alt162=1;
            }
            else if ( (LA162_0==OPEN_SQ_BRACKET) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    // IbmSparql.g:946:6: BLANK_NODE_LABEL
                    {
                    root_0 = (XTree)adaptor.nil();

                    BLANK_NODE_LABEL542=(Token)match(input,BLANK_NODE_LABEL,FOLLOW_BLANK_NODE_LABEL_in_blankNode9345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BLANK_NODE_LABEL542_tree = (XTree)adaptor.create(BLANK_NODE_LABEL542);
                    adaptor.addChild(root_0, BLANK_NODE_LABEL542_tree);
                    }

                    }
                    break;
                case 2 :
                    // IbmSparql.g:946:25: annon
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_annon_in_blankNode9349);
                    annon543=annon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annon543.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "blankNode"

    public static class annon_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annon"
    // IbmSparql.g:949:1: annon : OPEN_SQ_BRACKET CLOSE_SQ_BRACKET -> ^( ANNON OPEN_SQ_BRACKET ) ;
    public final IbmSparqlParser.annon_return annon() throws RecognitionException {
        IbmSparqlParser.annon_return retval = new IbmSparqlParser.annon_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_SQ_BRACKET544=null;
        Token CLOSE_SQ_BRACKET545=null;

        XTree OPEN_SQ_BRACKET544_tree=null;
        XTree CLOSE_SQ_BRACKET545_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");

        try {
            // IbmSparql.g:950:5: ( OPEN_SQ_BRACKET CLOSE_SQ_BRACKET -> ^( ANNON OPEN_SQ_BRACKET ) )
            // IbmSparql.g:950:9: OPEN_SQ_BRACKET CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET544=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_annon9368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET544);

            CLOSE_SQ_BRACKET545=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_annon9370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET545);



            // AST REWRITE
            // elements: OPEN_SQ_BRACKET
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 950:42: -> ^( ANNON OPEN_SQ_BRACKET )
            {
                // IbmSparql.g:950:45: ^( ANNON OPEN_SQ_BRACKET )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(ANNON, "ANNON"), root_1);

                adaptor.addChild(root_1, stream_OPEN_SQ_BRACKET.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "annon"

    public static class nil_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nil"
    // IbmSparql.g:953:1: nil : OPEN_BRACE CLOSE_BRACE -> NIL ;
    public final IbmSparqlParser.nil_return nil() throws RecognitionException {
        IbmSparqlParser.nil_return retval = new IbmSparqlParser.nil_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE546=null;
        Token CLOSE_BRACE547=null;

        XTree OPEN_BRACE546_tree=null;
        XTree CLOSE_BRACE547_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");

        try {
            // IbmSparql.g:953:5: ( OPEN_BRACE CLOSE_BRACE -> NIL )
            // IbmSparql.g:953:9: OPEN_BRACE CLOSE_BRACE
            {
            OPEN_BRACE546=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_nil9390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE546);

            CLOSE_BRACE547=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_nil9393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE547);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 953:33: -> NIL
            {
                adaptor.addChild(root_0, (XTree)adaptor.create(NIL, "NIL"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "nil"

    // Delegated rules


    protected DFA42 dfa42 = new DFA42(this);
    static final String DFA42_eotS =
        "\16\uffff";
    static final String DFA42_eofS =
        "\16\uffff";
    static final String DFA42_minS =
        "\1\135\7\uffff\1\113\1\112\4\uffff";
    static final String DFA42_maxS =
        "\1\152\7\uffff\2\150\4\uffff";
    static final String DFA42_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\13\1\10\1\11\1\12";
    static final String DFA42_specialS =
        "\16\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\1\2\uffff\1\2\1\3\1\7\1\4\1\uffff\1\5\1\6\1\10\1\uffff\1"+
            "\11\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\34\uffff\1\13",
            "\1\15\1\12\34\uffff\1\14",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "299:1: update1 : ( load | clear | drop | add | move | copy | create | insertData | deleteData | deleteWhere | modify );";
        }
    }
 

    public static final BitSet FOLLOW_query_in_queryUnit375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologue_in_query411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000006208L});
    public static final BitSet FOLLOW_selectQuery_in_query419 = new BitSet(new long[]{0x0000000000000002L,0x0001000004000000L});
    public static final BitSet FOLLOW_constructQuery_in_query425 = new BitSet(new long[]{0x0000000000000002L,0x0001000004000000L});
    public static final BitSet FOLLOW_describeQuery_in_query431 = new BitSet(new long[]{0x0000000000000002L,0x0001000004000000L});
    public static final BitSet FOLLOW_askQuery_in_query437 = new BitSet(new long[]{0x0000000000000002L,0x0001000004000000L});
    public static final BitSet FOLLOW_bindingsClause_in_query445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_in_updateUnit504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseDecl_in_prologue542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_prefixDecl_in_prologue548 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_BASE_in_baseDecl590 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_iRIref_in_baseDecl594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREFIX_in_prefixDecl627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_PNAME_NS_in_prefixDecl631 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_iRIref_in_prefixDecl635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_selectQuery676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_datasetClause_in_selectQuery680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_whereClause_in_selectQuery685 = new BitSet(new long[]{0x0000000000000000L,0x00000000029A0000L});
    public static final BitSet FOLLOW_solutionModifier_in_selectQuery689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_subSelect739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_whereClause_in_subSelect743 = new BitSet(new long[]{0x0000000000000000L,0x00010000069A0000L});
    public static final BitSet FOLLOW_solutionModifier_in_subSelect747 = new BitSet(new long[]{0x0000000000000002L,0x0001000004000000L});
    public static final BitSet FOLLOW_inlineData_in_subSelect752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_selectClause795 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000070L,0x3FFFFFFFFFFFFFFFL,0x0800000000000000L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause801 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000040L,0x3FFFFFFFFFFFFFFFL,0x0800000000000000L});
    public static final BitSet FOLLOW_REDUCED_in_selectClause807 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000040L,0x3FFFFFFFFFFFFFFFL,0x0800000000000000L});
    public static final BitSet FOLLOW_var_in_selectClause818 = new BitSet(new long[]{0x0000000000000002L,0x0C00000000000040L,0x3FFFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_expAsVar_in_selectClause824 = new BitSet(new long[]{0x0000000000000002L,0x0C00000000000040L,0x3FFFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_fexp_in_selectClause830 = new BitSet(new long[]{0x0000000000000002L,0x0C00000000000040L,0x3FFFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_251_in_selectClause837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_expAsVar891 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_expAsVar895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_AS_in_expAsVar897 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000000L});
    public static final BitSet FOLLOW_var_in_expAsVar901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_expAsVar903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_in_fexp937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_fexp943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRUCT_in_constructQuery985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_constructTemplate_in_constructQuery1005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_datasetClause_in_constructQuery1009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_whereClause_in_constructQuery1014 = new BitSet(new long[]{0x0000000000000000L,0x00000000029A0000L});
    public static final BitSet FOLLOW_solutionModifier_in_constructQuery1018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datasetClause_in_constructQuery1063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008400L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_constructQuery1066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_constructQuery1068 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001001044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_triplesTemplate_in_constructQuery1072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_constructQuery1075 = new BitSet(new long[]{0x0000000000000000L,0x00000000029A0000L});
    public static final BitSet FOLLOW_solutionModifier_in_constructQuery1079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCRIBE_in_describeQuery1141 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000004L,0x0000000000000000L,0x0800000000004000L});
    public static final BitSet FOLLOW_varOrIRIref_in_describeQuery1147 = new BitSet(new long[]{0x0400000000000000L,0x0C000000029A8C04L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_251_in_describeQuery1154 = new BitSet(new long[]{0x0000000000000000L,0x00000000029A8C00L});
    public static final BitSet FOLLOW_datasetClause_in_describeQuery1160 = new BitSet(new long[]{0x0000000000000000L,0x00000000029A8C00L});
    public static final BitSet FOLLOW_whereClause_in_describeQuery1165 = new BitSet(new long[]{0x0000000000000000L,0x00000000029A0000L});
    public static final BitSet FOLLOW_solutionModifier_in_describeQuery1170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASK_in_askQuery1224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_datasetClause_in_askQuery1228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_whereClause_in_askQuery1233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_datasetClause1270 = new BitSet(new long[]{0x0400000000000000L,0x0000000000010004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_defaultGraphClause_in_datasetClause1276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedGraphClause_in_datasetClause1282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sourceSelector_in_defaultGraphClause1326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_namedGraphClause1343 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_sourceSelector_in_namedGraphClause1347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_sourceSelector1370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_whereClause1387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_groupGraphPattern_in_whereClause1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupClause_in_solutionModifier1424 = new BitSet(new long[]{0x0000000000000002L,0x0000000002980000L});
    public static final BitSet FOLLOW_havingClause_in_solutionModifier1429 = new BitSet(new long[]{0x0000000000000002L,0x0000000002900000L});
    public static final BitSet FOLLOW_orderClause_in_solutionModifier1434 = new BitSet(new long[]{0x0000000000000002L,0x0000000002800000L});
    public static final BitSet FOLLOW_limitOffsetClauses_in_solutionModifier1439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_groupClause1481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_BY_in_groupClause1483 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000004000L});
    public static final BitSet FOLLOW_groupCondition_in_groupClause1487 = new BitSet(new long[]{0x0400000000000002L,0x0C00000000000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000004000L});
    public static final BitSet FOLLOW_builtInCall_in_groupCondition1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_groupCondition1530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_groupCondition1538 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_groupCondition1542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_AS_in_groupCondition1546 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000000L});
    public static final BitSet FOLLOW_var_in_groupCondition1550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_groupCondition1555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_groupCondition1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HAVING_in_havingClause1599 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000004000L});
    public static final BitSet FOLLOW_havingCondition_in_havingClause1603 = new BitSet(new long[]{0x0400000000000002L,0x0C00000000000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000004000L});
    public static final BitSet FOLLOW_constraint_in_havingCondition1640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_orderClause1657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_BY_in_orderClause1659 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000600044L,0x3FFFFFFFFFFFFFFFL,0x0000000000004000L});
    public static final BitSet FOLLOW_orderCondition_in_orderClause1663 = new BitSet(new long[]{0x0400000000000002L,0x0C00000000600044L,0x3FFFFFFFFFFFFFFFL,0x0000000000004000L});
    public static final BitSet FOLLOW_ASC_in_orderCondition1699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DESC_in_orderCondition1704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_brackettedExpression_in_orderCondition1709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_in_orderCondition1716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_orderCondition1725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limitClause_in_limitOffsetClauses1742 = new BitSet(new long[]{0x0000000000000002L,0x0000000002800000L});
    public static final BitSet FOLLOW_offsetClause_in_limitOffsetClauses1744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_offsetClause_in_limitOffsetClauses1749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_limitClause_in_limitOffsetClauses1751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limitClause1769 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_INTEGER_in_limitClause1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OFFSET_in_offsetClause1805 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_INTEGER_in_offsetClause1809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINDINGS_in_bindingsClause1840 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000800L});
    public static final BitSet FOLLOW_var_in_bindingsClause1844 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000800L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_bindingsClause1847 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001001044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bindingsClause1851 = new BitSet(new long[]{0x0400000000000000L,0x0000000009000004L,0x0000000000000000L,0x0000000000007FFFL});
    public static final BitSet FOLLOW_bindingValue_in_bindingsClause1855 = new BitSet(new long[]{0x0400000000000000L,0x0000000009000104L,0x0000000000000000L,0x0000000000007FFFL});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bindingsClause1858 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001001044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_nil_in_bindingsClause1862 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001001044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_bindingsClause1867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineData_in_bindingsClause1907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_bindingValue1926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_bindingValue1930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_bindingValue1934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_bindingValue1938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDEF_in_bindingValue1942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologue_in_update1961 = new BitSet(new long[]{0x0000000000000002L,0x000006EF20000000L});
    public static final BitSet FOLLOW_update1_in_update1965 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_update1969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_update_in_update1971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_in_update11994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clear_in_update11998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_in_update12002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_in_update12006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_move_in_update12010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_copy_in_update12014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_in_update12018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertData_in_update12022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteData_in_update12026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteWhere_in_update12030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modify_in_update12034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load2051 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SILENT_in_load2053 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_iRIref_in_load2056 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_INTO_in_load2060 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_graphRef_in_load2062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLEAR_in_clear2082 = new BitSet(new long[]{0x0000000000000000L,0x0000700040010000L});
    public static final BitSet FOLLOW_SILENT_in_clear2084 = new BitSet(new long[]{0x0000000000000000L,0x0000700040010000L});
    public static final BitSet FOLLOW_graphRefAll_in_clear2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_drop2104 = new BitSet(new long[]{0x0000000000000000L,0x0000700040010000L});
    public static final BitSet FOLLOW_SILENT_in_drop2106 = new BitSet(new long[]{0x0000000000000000L,0x0000700040010000L});
    public static final BitSet FOLLOW_graphRefAll_in_drop2109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_create2126 = new BitSet(new long[]{0x0000000000000000L,0x0000200040000000L});
    public static final BitSet FOLLOW_SILENT_in_create2128 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_graphRef_in_create2131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_in_add2148 = new BitSet(new long[]{0x0400000000000000L,0x0000300040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SILENT_in_add2150 = new BitSet(new long[]{0x0400000000000000L,0x0000300040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_graphOrDefault_in_add2153 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_TO_in_add2155 = new BitSet(new long[]{0x0400000000000000L,0x0000300040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_graphOrDefault_in_add2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOVE_in_move2174 = new BitSet(new long[]{0x0400000000000000L,0x0000300040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SILENT_in_move2176 = new BitSet(new long[]{0x0400000000000000L,0x0000300040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_graphOrDefault_in_move2179 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_TO_in_move2181 = new BitSet(new long[]{0x0400000000000000L,0x0000300040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_graphOrDefault_in_move2183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_copy2200 = new BitSet(new long[]{0x0400000000000000L,0x0000300040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SILENT_in_copy2202 = new BitSet(new long[]{0x0400000000000000L,0x0000300040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_graphOrDefault_in_copy2205 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_TO_in_copy2207 = new BitSet(new long[]{0x0400000000000000L,0x0000300040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_graphOrDefault_in_copy2209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertData2226 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DATA_in_insertData2228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_quadData_in_insertData2230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteData2246 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_DATA_in_deleteData2248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_quadData_in_deleteData2250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteWhere2267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_deleteWhere2269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_quadPattern_in_deleteWhere2271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_modify2290 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_iRIref_in_modify2292 = new BitSet(new long[]{0x0000000000000000L,0x000006EF20000000L});
    public static final BitSet FOLLOW_deleteClause_in_modify2299 = new BitSet(new long[]{0x0000000000000000L,0x00000EEF20000400L});
    public static final BitSet FOLLOW_insertClause_in_modify2301 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000400L});
    public static final BitSet FOLLOW_insertClause_in_modify2306 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000400L});
    public static final BitSet FOLLOW_usingClause_in_modify2310 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000400L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_modify2313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_groupGraphPattern_in_modify2315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteClause2331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_quadPattern_in_deleteClause2333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertClause2350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_quadPattern_in_insertClause2352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_usingClause2369 = new BitSet(new long[]{0x0400000000000000L,0x0000000000010004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_iRIref_in_usingClause2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_usingClause2377 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_iRIref_in_usingClause2379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_graphOrDefault2398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphOrDefault2402 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_iRIref_in_graphOrDefault2405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphRef2422 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_iRIref_in_graphRef2424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphRef_in_graphRefAll2438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_graphRefAll2442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_graphRefAll2446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_graphRefAll2450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadPattern2464 = new BitSet(new long[]{0x0400000000000000L,0x0D00200001001044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_quads_in_quadPattern2466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadPattern2468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadData2482 = new BitSet(new long[]{0x0400000000000000L,0x0D00200001001044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_quads_in_quadData2484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadData2486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesTemplate_in_quads2500 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_quadsNotTriples_in_quads2505 = new BitSet(new long[]{0x0400000000000002L,0x0D00A00001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_DOT_in_quads2507 = new BitSet(new long[]{0x0400000000000002L,0x0D00200001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_triplesTemplate_in_quads2510 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GRAPH_in_quadsNotTriples2528 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_varOrIRIref_in_quadsNotTriples2530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadsNotTriples2532 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001001044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_triplesTemplate_in_quadsNotTriples2534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadsNotTriples2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubject_in_triplesTemplate2551 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOT_in_triplesTemplate2555 = new BitSet(new long[]{0x0400000000000002L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_triplesTemplate_in_triplesTemplate2557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2575 = new BitSet(new long[]{0x0400000000000000L,0x0D6F200005009C4CL,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_subSelect_in_groupGraphPattern2581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_groupGraphPatternSub_in_groupGraphPattern2587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesBlock_in_groupGraphPatternSub2625 = new BitSet(new long[]{0x0000000000000002L,0x006F200004008C00L});
    public static final BitSet FOLLOW_groupGraphPatternSubInt_in_groupGraphPatternSub2628 = new BitSet(new long[]{0x0000000000000002L,0x006F200004008C00L});
    public static final BitSet FOLLOW_graphPatternNotTriples_in_groupGraphPatternSubInt2658 = new BitSet(new long[]{0x0400000000000002L,0x0D00800001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_DOT_in_groupGraphPatternSubInt2660 = new BitSet(new long[]{0x0400000000000002L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_triplesBlock_in_groupGraphPatternSubInt2663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubjectPath_in_triplesBlock2694 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOT_in_triplesBlock2698 = new BitSet(new long[]{0x0400000000000002L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_triplesBlock_in_triplesBlock2702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples2733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optionalGraphPattern_in_graphPatternNotTriples2747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minusGraphPattern_in_graphPatternNotTriples2760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphGraphPattern_in_graphPatternNotTriples2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_serviceGraphPattern_in_graphPatternNotTriples2788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_in_graphPatternNotTriples2802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind_in_graphPatternNotTriples2816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineData_in_graphPatternNotTriples2829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_in_inlineData2849 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000040L});
    public static final BitSet FOLLOW_dataBlock_in_inlineData2851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineDataOneVar_in_dataBlock2879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineDataFull_in_dataBlock2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_inlineDataOneVar2905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_inlineDataOneVar2907 = new BitSet(new long[]{0x0400000000000000L,0x0000000009001004L,0x0000000000000000L,0x0000000000007FFFL});
    public static final BitSet FOLLOW_dataBlockValue_in_inlineDataOneVar2911 = new BitSet(new long[]{0x0400000000000000L,0x0000000009001004L,0x0000000000000000L,0x0000000000007FFFL});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataOneVar2914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_inlineDataFull2947 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000100L});
    public static final BitSet FOLLOW_var_in_inlineDataFull2951 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_inlineDataFull2954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_inlineDataFull2956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_inlineDataFull2960 = new BitSet(new long[]{0x0400000000000000L,0x0000000009000104L,0x0000000000000000L,0x0000000000007FFFL});
    public static final BitSet FOLLOW_dataBlockValue_in_inlineDataFull2964 = new BitSet(new long[]{0x0400000000000000L,0x0000000009000104L,0x0000000000000000L,0x0000000000007FFFL});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_inlineDataFull2967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataFull2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_dataBlockValue3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_dataBlockValue3010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_dataBlockValue3014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_dataBlockValue3018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDEF_in_dataBlockValue3022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTIONAL_in_optionalGraphPattern3035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_groupGraphPattern_in_optionalGraphPattern3039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphGraphPattern3069 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_varOrIRIref_in_graphGraphPattern3073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_groupGraphPattern_in_graphGraphPattern3077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SERVICE_in_serviceGraphPattern3119 = new BitSet(new long[]{0x0400000000000000L,0x0C00000040000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SILENT_in_serviceGraphPattern3123 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_varOrIRIref_in_serviceGraphPattern3128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_groupGraphPattern_in_serviceGraphPattern3132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIND_in_bind3172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bind3174 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_bind3178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_AS_in_bind3180 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000000L});
    public static final BitSet FOLLOW_var_in_bind3184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bind3186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3223 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_UNION_in_groupOrUnionGraphPattern3229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3233 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_MINUS_in_minusGraphPattern3280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_groupGraphPattern_in_minusGraphPattern3284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_filter3310 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000004000L});
    public static final BitSet FOLLOW_constraint_in_filter3314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackettedExpression_in_constraint3345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_constraint3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_constraint3353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_functionCall3369 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_argList_in_functionCall3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_argList3406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_argList3421 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000054L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_DISTINCT_in_argList3425 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_argList3430 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000100L});
    public static final BitSet FOLLOW_COMMA_in_argList3434 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_argList3438 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_argList3443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_expressionList3481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_expressionList3496 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_expressionList3500 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000100L});
    public static final BitSet FOLLOW_COMMA_in_expressionList3504 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_expressionList3508 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_expressionList3513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate3550 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001001044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_constructTriples_in_constructTemplate3553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate3556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubject_in_constructTriples3571 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_DOT_in_constructTriples3575 = new BitSet(new long[]{0x0400000000000002L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_constructTriples_in_constructTriples3578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_triplesSameSubject3598 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000004L,0x0000000000000000L,0x1000000000004000L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_triplesSameSubject3602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_triplesSameSubject3622 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000004L,0x0000000000000000L,0x1000000000004000L});
    public static final BitSet FOLLOW_propertyList_in_triplesSameSubject3626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_propertyListNotEmpty3675 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmpty3677 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_propertyListNotEmpty3684 = new BitSet(new long[]{0x0400000000000002L,0x0C00000010000004L,0x0000000000000000L,0x1000000000004000L});
    public static final BitSet FOLLOW_verb_in_propertyListNotEmpty3689 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmpty3691 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_propertyList3723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_in_objectList3743 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_objectList3746 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_object_in_objectList3748 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_objectPath_in_objectListPath3857 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_objectListPath3860 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_objectPath_in_objectListPath3862 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_graphNode_in_object3967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphNodePath_in_objectPath3981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrIRIref_in_verb3998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_252_in_verb4007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_triplesSameSubjectPath4025 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000044L,0x0000000000000000L,0x9000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_triplesSameSubjectPath4029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNodePath_in_triplesSameSubjectPath4049 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000044L,0x0000000000000000L,0x9000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_propertyListPath_in_triplesSameSubjectPath4053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbPath_in_propertyListNotEmptyPath4103 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_objectListPath_in_propertyListNotEmptyPath4107 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_verbSimple_in_propertyListNotEmptyPath4126 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_objectListPath_in_propertyListNotEmptyPath4130 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_propertyListNotEmptyPath4146 = new BitSet(new long[]{0x0400000000000002L,0x0C00000010000044L,0x0000000000000000L,0x9000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_verbPath_in_propertyListNotEmptyPath4154 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmptyPath4158 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_verbSimple_in_propertyListNotEmptyPath4186 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmptyPath4190 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_propertyListPath4272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_verbPath4296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_verbSimple4310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathAlternative_in_path4324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathSequence_in_pathAlternative4340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_253_in_pathAlternative4355 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000044L,0x0000000000000000L,0x9000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_pathSequence_in_pathAlternative4359 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_pathEltOrInverse_in_pathSequence4410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_254_in_pathSequence4424 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000044L,0x0000000000000000L,0x9000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_pathEltOrInverse_in_pathSequence4428 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_pathPrimary_in_pathElt4475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_pathMod_in_pathElt4489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathElt_in_pathEltOrInverse4531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_255_in_pathEltOrInverse4536 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000044L,0x0000000000000000L,0x1000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_pathElt_in_pathEltOrInverse4538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pathMod0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_pathPrimary4584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_252_in_pathPrimary4588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_258_in_pathPrimary4592 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000044L,0x0000000000000000L,0x9000000000004000L});
    public static final BitSet FOLLOW_pathNegatedPropertySet_in_pathPrimary4594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_pathPrimary4598 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000044L,0x0000000000000000L,0x9000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_path_in_pathPrimary4601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_pathPrimary4603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_pathNegatedPropertySet4622 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000104L,0x0000000000000000L,0x9000000000004000L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_253_in_pathNegatedPropertySet4630 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x9000000000004000L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_pathNegatedPropertySet4640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_pathOneInPropertySet4654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_252_in_pathOneInPropertySet4658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_255_in_pathOneInPropertySet4663 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_iRIref_in_pathOneInPropertySet4665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_255_in_pathOneInPropertySet4680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_252_in_pathOneInPropertySet4682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_integer4705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_in_triplesNode4723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNodePropertyList_in_triplesNode4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collectionPath_in_triplesNodePath4772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNodePropertyListPath_in_triplesNodePath4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyList4821 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000004L,0x0000000000000000L,0x1000000000004000L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_blankNodePropertyList4825 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyList4828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyListPath4857 = new BitSet(new long[]{0x0400000000000000L,0x0C00000000000044L,0x0000000000000000L,0x9000000000004000L,0x0000000000000004L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_blankNodePropertyListPath4861 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyListPath4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collection4893 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_graphNode_in_collection4897 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000144L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collection4900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collectionPath4932 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_graphNodePath_in_collectionPath4936 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000144L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collectionPath4939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_graphNode4971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_graphNode4975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_graphNodePath4989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNodePath_in_graphNodePath4993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_varOrTerm5008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphTerm_in_varOrTerm5012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_varOrIRIref5026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_varOrIRIref5030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR1_in_var5046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR2_in_var5069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_graphTerm5096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_graphTerm5100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_graphTerm5104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_graphTerm5108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNode_in_graphTerm5112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_graphTerm5116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_expression5130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5152 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_conditionalOrExpression5156 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5160 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_valueLogical_in_conditionalAndExpression5220 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_conditionalAndExpression5224 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_valueLogical_in_conditionalAndExpression5228 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_valueLogical5279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5295 = new BitSet(new long[]{0x0800000000000002L,0xC000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000078L});
    public static final BitSet FOLLOW_259_in_relationalExpression5299 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_260_in_relationalExpression5322 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_relationalExpression5347 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_261_in_relationalExpression5373 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTE_in_relationalExpression5399 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_262_in_relationalExpression5424 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_relationalExpression5449 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_expressionList_in_relationalExpression5455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_relationalExpression5479 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_IN_in_relationalExpression5482 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_expressionList_in_relationalExpression5488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_numericExpression5554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5574 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000000L,0x00000000000000FFL,0x0000000000000082L});
    public static final BitSet FOLLOW_257_in_additiveExpression5593 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5597 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000000L,0x00000000000000FFL,0x0000000000000082L});
    public static final BitSet FOLLOW_263_in_additiveExpression5622 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5626 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000000L,0x00000000000000FFL,0x0000000000000082L});
    public static final BitSet FOLLOW_numericLiteralPositive_in_additiveExpression5653 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000000L,0x48000000000000FFL,0x0000000000000082L});
    public static final BitSet FOLLOW_251_in_additiveExpression5673 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_254_in_additiveExpression5675 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5680 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000000L,0x00000000000000FFL,0x0000000000000082L});
    public static final BitSet FOLLOW_numericLiteralNegative_in_additiveExpression5783 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000000L,0x48000000000000FFL,0x0000000000000082L});
    public static final BitSet FOLLOW_251_in_additiveExpression5803 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_254_in_additiveExpression5805 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5810 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000000000L,0x00000000000000FFL,0x0000000000000082L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_251_in_multiplicativeExpression5932 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5935 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_254_in_multiplicativeExpression5947 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5950 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_258_in_unaryExpression5976 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression5979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_257_in_unaryExpression5985 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_263_in_unaryExpression5994 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression5997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackettedExpression_in_primaryExpression6020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_primaryExpression6027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIrefOrFunction_in_primaryExpression6034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_primaryExpression6041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_primaryExpression6048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_primaryExpression6055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_primaryExpression6062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_in_primaryExpression6069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_brackettedExpression6099 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_brackettedExpression6103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_brackettedExpression6105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_in_builtInCall6140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6142 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANG_in_builtInCall6180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6182 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGMATCHES_in_builtInCall6219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6221 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6225 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6227 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATATYPE_in_builtInCall6258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6260 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOUND_in_builtInCall6293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6295 = new BitSet(new long[]{0x0000000000000000L,0x0C00000000000000L});
    public static final BitSet FOLLOW_var_in_builtInCall6299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IRI_in_builtInCall6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6341 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_builtInCall6378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6380 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BNODE_in_builtInCall6418 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6422 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_builtInCall6432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAND_in_builtInCall6455 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_nil_in_builtInCall6457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABS_in_builtInCall6520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6522 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CEIL_in_builtInCall6560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6562 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOOR_in_builtInCall6599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6601 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_in_builtInCall6636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6638 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONCAT_in_builtInCall6673 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_expressionList_in_builtInCall6677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substringExpression_in_builtInCall6726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRLEN_in_builtInCall6771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6773 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_strReplaceExpression_in_builtInCall6810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UCASE_in_builtInCall6815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6817 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCASE_in_builtInCall6852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6854 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENCODE_FOR_URI_in_builtInCall6889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6891 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTAINS_in_builtInCall6917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6919 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6923 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6925 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRSTARTS_in_builtInCall6957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6959 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6963 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6965 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall6969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRENDS_in_builtInCall6996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6998 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7002 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7004 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRBEFORE_in_builtInCall7037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7039 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7043 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7045 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRAFTER_in_builtInCall7078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7080 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7084 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7086 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YEAR_in_builtInCall7119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7121 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MONTH_in_builtInCall7157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7159 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DAY_in_builtInCall7194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7196 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HOURS_in_builtInCall7233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7235 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUTES_in_builtInCall7270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7272 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECONDS_in_builtInCall7305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7307 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEZONE_in_builtInCall7340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7342 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TZ_in_builtInCall7374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7376 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOW_in_builtInCall7414 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_nil_in_builtInCall7416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UUID_in_builtInCall7425 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_nil_in_builtInCall7427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUUID_in_builtInCall7436 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_nil_in_builtInCall7438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MD5_in_builtInCall7447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7449 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA1_in_builtInCall7486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7488 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA224_in_builtInCall7524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7526 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA256_in_builtInCall7560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7562 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA384_in_builtInCall7596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7598 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA512_in_builtInCall7632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7634 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtInCall7668 = new BitSet(new long[]{0x0400000000000000L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_expressionList_in_builtInCall7672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_builtInCall7717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7719 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7723 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7725 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7729 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7731 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRLANG_in_builtInCall7763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7765 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7769 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7771 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRDT_in_builtInCall7816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7818 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7822 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7824 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMETERM_in_builtInCall7871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7873 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7877 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7879 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISIRI_in_builtInCall7923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7925 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISURI_in_builtInCall7960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7962 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall7966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISBLANK_in_builtInCall7997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7999 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall8003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISLITERAL_in_builtInCall8032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8034 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall8038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISNUMERIC_in_builtInCall8065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8067 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_builtInCall8071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regexExpression_in_builtInCall8098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsFunc_in_builtInCall8103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_notExistsFunc_in_builtInCall8108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEX_in_regexExpression8125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_regexExpression8127 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_regexExpression8131 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_regexExpression8133 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_regexExpression8137 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000100L});
    public static final BitSet FOLLOW_COMMA_in_regexExpression8141 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_regexExpression8145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_regexExpression8150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBSTR_in_substringExpression8193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_substringExpression8195 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_substringExpression8199 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_substringExpression8201 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_substringExpression8205 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000100L});
    public static final BitSet FOLLOW_COMMA_in_substringExpression8209 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_substringExpression8213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_substringExpression8218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_strReplaceExpression8260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_strReplaceExpression8262 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8266 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8268 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8272 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8274 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8278 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000100L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8281 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_strReplaceExpression8289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsFunc8338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_groupGraphPattern_in_existsFunc8342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_notExistsFunc8376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_notExistsFunc8378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008C00L});
    public static final BitSet FOLLOW_groupGraphPattern_in_notExistsFunc8382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_aggregate8414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8416 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000054L,0x3FFFFFFFFFFFFFFFL,0x0800000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8420 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0800000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_251_in_aggregate8425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_aggregate8431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_aggregate8467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8469 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000054L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8473 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_aggregate8478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_aggregate8504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8506 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000054L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8510 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_aggregate8515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_aggregate8541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8543 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000054L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8547 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_aggregate8552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_aggregate8578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8580 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000054L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8584 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_aggregate8589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_aggregate8615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8617 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000054L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8621 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_aggregate8626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_CONCAT_in_aggregate8649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8651 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000054L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8655 = new BitSet(new long[]{0x0400000000000000L,0x0C00000001000044L,0x3FFFFFFFFFFFFFFFL,0x0000000000007FFFL,0x0000000000000086L});
    public static final BitSet FOLLOW_expression_in_aggregate8660 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_aggregate8664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SEPARATOR_in_aggregate8666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_259_in_aggregate8668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000003C00L});
    public static final BitSet FOLLOW_string_in_aggregate8672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_iRIrefOrFunction8730 = new BitSet(new long[]{0x0400000000000002L,0x0D00000001000044L,0x0000000000000000L,0x000000000000FFFFL});
    public static final BitSet FOLLOW_argList_in_iRIrefOrFunction8735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_rDFLiteral8790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LANGTAG_in_rDFLiteral8794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_264_in_rDFLiteral8800 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_iRIref_in_rDFLiteral8802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralUnsigned_in_numericLiteral8824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralPositive_in_numericLiteral8832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralNegative_in_numericLiteral8840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_numericLiteralUnsigned8858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_numericLiteralUnsigned8879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_numericLiteralUnsigned8899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive8933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive8952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive8970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative9000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative9019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative9037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_booleanLiteral9069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_booleanLiteral9092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL1_in_string9124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_string9152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_LONG1_in_string9180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_LONG2_in_string9202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IRI_REF_in_iRIref9237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefixedName_in_iRIref9264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PNAME_LN_in_prefixedName9283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PNAME_NS_in_prefixedName9310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_NODE_LABEL_in_blankNode9345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annon_in_blankNode9349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_annon9368 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_annon9370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_nil9390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_nil9393 = new BitSet(new long[]{0x0000000000000002L});

}
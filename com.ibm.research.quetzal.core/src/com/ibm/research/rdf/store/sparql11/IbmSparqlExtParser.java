// $ANTLR 3.3 Nov 30, 2010 12:50:56 IbmSparqlExt.g 2015-04-14 06:08:57
 
package com.ibm.research.rdf.store.sparql11;

import com.ibm.research.rdf.store.sparql11.SPARQLsyntaxError;

import org.antlr.runtime.*;

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class IbmSparqlExtParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PATH", "ALT", "SEQ", "ELT", "INV", "BROKEN_PLUS", "BROKEN_MINUS", "NIL", "ANNON", "ROOT", "PROLOGUE", "DEFAULT_NAMESPACE", "NAMESPACE_PREFIX_MAP", "KEY", "QUERY", "UPDATE", "TYPE", "PVARS", "EXP", "NOT_IN", "GROUP_GRAPH_PATTERN", "GROUP_GRAPH_PATTERN_SUB", "GRAPH_GRAPH_PATTERN", "SUB_SELECT", "TRIPLES_BLOCK", "NON_TRIPLES", "TRIPLE", "TRIPLE2", "TRIPLES_SAME_SUBJECT", "GRAPH_NODE", "VAR", "PREFIXED_NAME", "PREFIXED_NS", "FUNCTION", "EXPRESSION", "NOT_EXISTS", "IRI_OR_FUNCTION", "DATASET", "GROUP_BY", "ORDER_BY", "CONDITION", "BIND_VALUES", "STRING", "BOOLEAN", "NUMERIC", "SUBJECT", "PREDICATE", "VALUE", "TRIPLES_NODE_PROPERTY_LIST", "TRIPLES_NODE", "COLLECTION", "PROPERTY_LIST", "PREDICATE_VALUE", "WHERE", "IRI_REF", "LTE", "MODIFIERS", "BIG_INTEGER", "BIG_DECIMAL", "INLINE_DATA", "OUTV", "FUNCBODY", "BASE", "PREFIX", "PNAME_NS", "VARNAME", "OPEN_BRACE", "ARROW", "CLOSE_BRACE", "FUNCLANG", "OPEN_CURLY_BRACE", "STRING_LITERAL2", "CLOSE_CURLY_BRACE", "SELECT", "DISTINCT", "REDUCED", "AS", "CONSTRUCT", "WHERE_TOKEN", "DESCRIBE", "ASK", "FROM", "NAMED", "GROUP", "BY", "HAVING", "ORDER", "ASC", "DESC", "LIMIT", "INTEGER", "OFFSET", "BINDINGS", "UNDEF", "SEMICOLON", "LOAD", "SILENT", "INTO", "CLEAR", "DROP", "CREATE", "ADD", "TO", "MOVE", "COPY", "INSERT", "DATA", "DELETE", "WITH", "USING", "DEFAULT", "GRAPH", "ALL", "DOT", "VALUES", "OPTIONAL", "SERVICE", "BIND", "UNION", "MINUS", "FILTER", "COMMA", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", "VAR1", "VAR2", "LOGICAL_OR", "LOGICAL_AND", "LT", "IN", "NOT", "STR", "LANG", "LANGMATCHES", "DATATYPE", "BOUND", "IRI", "URI", "BNODE", "RAND", "ABS", "CEIL", "FLOOR", "ROUND", "CONCAT", "STRLEN", "UCASE", "LCASE", "ENCODE_FOR_URI", "CONTAINS", "STRSTARTS", "STRENDS", "STRBEFORE", "STRAFTER", "YEAR", "MONTH", "DAY", "HOURS", "MINUTES", "SECONDS", "TIMEZONE", "TZ", "NOW", "UUID", "STRUUID", "MD5", "SHA1", "SHA224", "SHA256", "SHA384", "SHA512", "COALESCE", "IF", "STRLANG", "STRDT", "SAMETERM", "ISIRI", "ISURI", "ISBLANK", "ISLITERAL", "ISNUMERIC", "REGEX", "SUBSTR", "REPLACE", "EXISTS", "COUNT", "SUM", "MIN", "MAX", "AVG", "SAMPLE", "GROUP_CONCAT", "SEPARATOR", "LANGTAG", "DECIMAL", "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", "TRUE", "FALSE", "STRING_LITERAL1", "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", "PNAME_LN", "BLANK_NODE_LABEL", "L", "A", "N", "G", "U", "E", "F", "C", "FUNCCALL", "T", "I", "O", "B", "S", "P", "R", "X", "D", "W", "H", "K", "M", "Y", "V", "Z", "UNICODE_ESCAPE", "PN_PREFIX", "PN_LOCAL", "DIGIT", "HEXDIGIT", "EXPONENT", "ECHAR", "WS", "EOL", "COMMENT", "PN_CHARS_BASE", "PN_CHARS_U", "PN_CHARS", "PLX", "PERCENT", "PN_LOCAL_ESC", "J", "Q", "'*'", "'a'", "'|'", "'/'", "'^'", "'?'", "'+'", "'!'", "'='", "'!='", "'>'", "'>='", "'-'", "'^^'"
    };
    public static final int EOF=-1;
    public static final int T__256=256;
    public static final int T__257=257;
    public static final int T__258=258;
    public static final int T__259=259;
    public static final int T__260=260;
    public static final int T__261=261;
    public static final int T__262=262;
    public static final int T__263=263;
    public static final int T__264=264;
    public static final int T__265=265;
    public static final int T__266=266;
    public static final int T__267=267;
    public static final int T__268=268;
    public static final int T__269=269;
    public static final int PATH=4;
    public static final int ALT=5;
    public static final int SEQ=6;
    public static final int ELT=7;
    public static final int INV=8;
    public static final int BROKEN_PLUS=9;
    public static final int BROKEN_MINUS=10;
    public static final int NIL=11;
    public static final int ANNON=12;
    public static final int ROOT=13;
    public static final int PROLOGUE=14;
    public static final int DEFAULT_NAMESPACE=15;
    public static final int NAMESPACE_PREFIX_MAP=16;
    public static final int KEY=17;
    public static final int QUERY=18;
    public static final int UPDATE=19;
    public static final int TYPE=20;
    public static final int PVARS=21;
    public static final int EXP=22;
    public static final int NOT_IN=23;
    public static final int GROUP_GRAPH_PATTERN=24;
    public static final int GROUP_GRAPH_PATTERN_SUB=25;
    public static final int GRAPH_GRAPH_PATTERN=26;
    public static final int SUB_SELECT=27;
    public static final int TRIPLES_BLOCK=28;
    public static final int NON_TRIPLES=29;
    public static final int TRIPLE=30;
    public static final int TRIPLE2=31;
    public static final int TRIPLES_SAME_SUBJECT=32;
    public static final int GRAPH_NODE=33;
    public static final int VAR=34;
    public static final int PREFIXED_NAME=35;
    public static final int PREFIXED_NS=36;
    public static final int FUNCTION=37;
    public static final int EXPRESSION=38;
    public static final int NOT_EXISTS=39;
    public static final int IRI_OR_FUNCTION=40;
    public static final int DATASET=41;
    public static final int GROUP_BY=42;
    public static final int ORDER_BY=43;
    public static final int CONDITION=44;
    public static final int BIND_VALUES=45;
    public static final int STRING=46;
    public static final int BOOLEAN=47;
    public static final int NUMERIC=48;
    public static final int SUBJECT=49;
    public static final int PREDICATE=50;
    public static final int VALUE=51;
    public static final int TRIPLES_NODE_PROPERTY_LIST=52;
    public static final int TRIPLES_NODE=53;
    public static final int COLLECTION=54;
    public static final int PROPERTY_LIST=55;
    public static final int PREDICATE_VALUE=56;
    public static final int WHERE=57;
    public static final int IRI_REF=58;
    public static final int LTE=59;
    public static final int MODIFIERS=60;
    public static final int BIG_INTEGER=61;
    public static final int BIG_DECIMAL=62;
    public static final int INLINE_DATA=63;
    public static final int OUTV=64;
    public static final int FUNCBODY=65;
    public static final int BASE=66;
    public static final int PREFIX=67;
    public static final int PNAME_NS=68;
    public static final int VARNAME=69;
    public static final int OPEN_BRACE=70;
    public static final int ARROW=71;
    public static final int CLOSE_BRACE=72;
    public static final int FUNCLANG=73;
    public static final int OPEN_CURLY_BRACE=74;
    public static final int STRING_LITERAL2=75;
    public static final int CLOSE_CURLY_BRACE=76;
    public static final int SELECT=77;
    public static final int DISTINCT=78;
    public static final int REDUCED=79;
    public static final int AS=80;
    public static final int CONSTRUCT=81;
    public static final int WHERE_TOKEN=82;
    public static final int DESCRIBE=83;
    public static final int ASK=84;
    public static final int FROM=85;
    public static final int NAMED=86;
    public static final int GROUP=87;
    public static final int BY=88;
    public static final int HAVING=89;
    public static final int ORDER=90;
    public static final int ASC=91;
    public static final int DESC=92;
    public static final int LIMIT=93;
    public static final int INTEGER=94;
    public static final int OFFSET=95;
    public static final int BINDINGS=96;
    public static final int UNDEF=97;
    public static final int SEMICOLON=98;
    public static final int LOAD=99;
    public static final int SILENT=100;
    public static final int INTO=101;
    public static final int CLEAR=102;
    public static final int DROP=103;
    public static final int CREATE=104;
    public static final int ADD=105;
    public static final int TO=106;
    public static final int MOVE=107;
    public static final int COPY=108;
    public static final int INSERT=109;
    public static final int DATA=110;
    public static final int DELETE=111;
    public static final int WITH=112;
    public static final int USING=113;
    public static final int DEFAULT=114;
    public static final int GRAPH=115;
    public static final int ALL=116;
    public static final int DOT=117;
    public static final int VALUES=118;
    public static final int OPTIONAL=119;
    public static final int SERVICE=120;
    public static final int BIND=121;
    public static final int UNION=122;
    public static final int MINUS=123;
    public static final int FILTER=124;
    public static final int COMMA=125;
    public static final int OPEN_SQ_BRACKET=126;
    public static final int CLOSE_SQ_BRACKET=127;
    public static final int VAR1=128;
    public static final int VAR2=129;
    public static final int LOGICAL_OR=130;
    public static final int LOGICAL_AND=131;
    public static final int LT=132;
    public static final int IN=133;
    public static final int NOT=134;
    public static final int STR=135;
    public static final int LANG=136;
    public static final int LANGMATCHES=137;
    public static final int DATATYPE=138;
    public static final int BOUND=139;
    public static final int IRI=140;
    public static final int URI=141;
    public static final int BNODE=142;
    public static final int RAND=143;
    public static final int ABS=144;
    public static final int CEIL=145;
    public static final int FLOOR=146;
    public static final int ROUND=147;
    public static final int CONCAT=148;
    public static final int STRLEN=149;
    public static final int UCASE=150;
    public static final int LCASE=151;
    public static final int ENCODE_FOR_URI=152;
    public static final int CONTAINS=153;
    public static final int STRSTARTS=154;
    public static final int STRENDS=155;
    public static final int STRBEFORE=156;
    public static final int STRAFTER=157;
    public static final int YEAR=158;
    public static final int MONTH=159;
    public static final int DAY=160;
    public static final int HOURS=161;
    public static final int MINUTES=162;
    public static final int SECONDS=163;
    public static final int TIMEZONE=164;
    public static final int TZ=165;
    public static final int NOW=166;
    public static final int UUID=167;
    public static final int STRUUID=168;
    public static final int MD5=169;
    public static final int SHA1=170;
    public static final int SHA224=171;
    public static final int SHA256=172;
    public static final int SHA384=173;
    public static final int SHA512=174;
    public static final int COALESCE=175;
    public static final int IF=176;
    public static final int STRLANG=177;
    public static final int STRDT=178;
    public static final int SAMETERM=179;
    public static final int ISIRI=180;
    public static final int ISURI=181;
    public static final int ISBLANK=182;
    public static final int ISLITERAL=183;
    public static final int ISNUMERIC=184;
    public static final int REGEX=185;
    public static final int SUBSTR=186;
    public static final int REPLACE=187;
    public static final int EXISTS=188;
    public static final int COUNT=189;
    public static final int SUM=190;
    public static final int MIN=191;
    public static final int MAX=192;
    public static final int AVG=193;
    public static final int SAMPLE=194;
    public static final int GROUP_CONCAT=195;
    public static final int SEPARATOR=196;
    public static final int LANGTAG=197;
    public static final int DECIMAL=198;
    public static final int DOUBLE=199;
    public static final int INTEGER_POSITIVE=200;
    public static final int DECIMAL_POSITIVE=201;
    public static final int DOUBLE_POSITIVE=202;
    public static final int INTEGER_NEGATIVE=203;
    public static final int DECIMAL_NEGATIVE=204;
    public static final int DOUBLE_NEGATIVE=205;
    public static final int TRUE=206;
    public static final int FALSE=207;
    public static final int STRING_LITERAL1=208;
    public static final int STRING_LITERAL_LONG1=209;
    public static final int STRING_LITERAL_LONG2=210;
    public static final int PNAME_LN=211;
    public static final int BLANK_NODE_LABEL=212;
    public static final int L=213;
    public static final int A=214;
    public static final int N=215;
    public static final int G=216;
    public static final int U=217;
    public static final int E=218;
    public static final int F=219;
    public static final int C=220;
    public static final int FUNCCALL=221;
    public static final int T=222;
    public static final int I=223;
    public static final int O=224;
    public static final int B=225;
    public static final int S=226;
    public static final int P=227;
    public static final int R=228;
    public static final int X=229;
    public static final int D=230;
    public static final int W=231;
    public static final int H=232;
    public static final int K=233;
    public static final int M=234;
    public static final int Y=235;
    public static final int V=236;
    public static final int Z=237;
    public static final int UNICODE_ESCAPE=238;
    public static final int PN_PREFIX=239;
    public static final int PN_LOCAL=240;
    public static final int DIGIT=241;
    public static final int HEXDIGIT=242;
    public static final int EXPONENT=243;
    public static final int ECHAR=244;
    public static final int WS=245;
    public static final int EOL=246;
    public static final int COMMENT=247;
    public static final int PN_CHARS_BASE=248;
    public static final int PN_CHARS_U=249;
    public static final int PN_CHARS=250;
    public static final int PLX=251;
    public static final int PERCENT=252;
    public static final int PN_LOCAL_ESC=253;
    public static final int J=254;
    public static final int Q=255;

    // delegates
    // delegators


        public IbmSparqlExtParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public IbmSparqlExtParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
        //modified by wensun
    protected TreeAdaptor adaptor = new CommonTreeAdaptor() {
        public Object create(Token token) { return new XTree(token); }
        public Object dupNode(Object t) {
            if ( t==null ) return null;
            return create(((XTree)t).token);
        }
        /*public Object errorNode(TokenStream input, Token start, Token stop,
                                RecognitionException e)
        {
            return new GrammarASTErrorNode(input, start, stop, e);
        }*/
    };

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return IbmSparqlExtParser.tokenNames; }
    public String getGrammarFileName() { return "IbmSparqlExt.g"; }


    	protected void mismatch(IntStream input, int ttype, BitSet follow)
    		throws RecognitionException
    	{
    		throw new MismatchedTokenException(ttype, input);
    	}
    	
    	public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    		throws RecognitionException	
    	{
    		throw e;
    	}
    	
    	protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow)
        	throws RecognitionException
    	{   
        	throw new MismatchedTokenException(ttype, input);
    	}  


    public static class queryUnit_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "queryUnit"
    // IbmSparqlExt.g:124:1: queryUnit : query -> ^( ROOT query ) ;
    public final IbmSparqlExtParser.queryUnit_return queryUnit() throws RecognitionException {
        IbmSparqlExtParser.queryUnit_return retval = new IbmSparqlExtParser.queryUnit_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.query_return query1 = null;


        RewriteRuleSubtreeStream stream_query=new RewriteRuleSubtreeStream(adaptor,"rule query");
        try {
            // IbmSparqlExt.g:125:2: ( query -> ^( ROOT query ) )
            // IbmSparqlExt.g:125:4: query
            {
            pushFollow(FOLLOW_query_in_queryUnit406);
            query1=query();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query.add(query1.getTree());


            // AST REWRITE
            // elements: query
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 127:3: -> ^( ROOT query )
            {
                // IbmSparqlExt.g:127:7: ^( ROOT query )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(ROOT, "ROOT"), root_1);

                adaptor.addChild(root_1, stream_query.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "queryUnit"

    public static class query_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query"
    // IbmSparqlExt.g:131:1: query : p= prologue (s= selectQuery | c= constructQuery | d= describeQuery | a= askQuery ) (b= bindingsClause )? -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? ) ;
    public final IbmSparqlExtParser.query_return query() throws RecognitionException {
        IbmSparqlExtParser.query_return retval = new IbmSparqlExtParser.query_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.prologue_return p = null;

        IbmSparqlExtParser.selectQuery_return s = null;

        IbmSparqlExtParser.constructQuery_return c = null;

        IbmSparqlExtParser.describeQuery_return d = null;

        IbmSparqlExtParser.askQuery_return a = null;

        IbmSparqlExtParser.bindingsClause_return b = null;


        RewriteRuleSubtreeStream stream_describeQuery=new RewriteRuleSubtreeStream(adaptor,"rule describeQuery");
        RewriteRuleSubtreeStream stream_bindingsClause=new RewriteRuleSubtreeStream(adaptor,"rule bindingsClause");
        RewriteRuleSubtreeStream stream_constructQuery=new RewriteRuleSubtreeStream(adaptor,"rule constructQuery");
        RewriteRuleSubtreeStream stream_askQuery=new RewriteRuleSubtreeStream(adaptor,"rule askQuery");
        RewriteRuleSubtreeStream stream_prologue=new RewriteRuleSubtreeStream(adaptor,"rule prologue");
        RewriteRuleSubtreeStream stream_selectQuery=new RewriteRuleSubtreeStream(adaptor,"rule selectQuery");
        try {
            // IbmSparqlExt.g:132:2: (p= prologue (s= selectQuery | c= constructQuery | d= describeQuery | a= askQuery ) (b= bindingsClause )? -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? ) )
            // IbmSparqlExt.g:132:4: p= prologue (s= selectQuery | c= constructQuery | d= describeQuery | a= askQuery ) (b= bindingsClause )?
            {
            pushFollow(FOLLOW_prologue_in_query442);
            p=prologue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prologue.add(p.getTree());
            // IbmSparqlExt.g:133:3: (s= selectQuery | c= constructQuery | d= describeQuery | a= askQuery )
            int alt1=4;
            switch ( input.LA(1) ) {
            case FUNCTION:
            case SELECT:
                {
                alt1=1;
                }
                break;
            case CONSTRUCT:
                {
                alt1=2;
                }
                break;
            case DESCRIBE:
                {
                alt1=3;
                }
                break;
            case ASK:
                {
                alt1=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // IbmSparqlExt.g:133:5: s= selectQuery
                    {
                    pushFollow(FOLLOW_selectQuery_in_query450);
                    s=selectQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectQuery.add(s.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:133:21: c= constructQuery
                    {
                    pushFollow(FOLLOW_constructQuery_in_query456);
                    c=constructQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructQuery.add(c.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:133:40: d= describeQuery
                    {
                    pushFollow(FOLLOW_describeQuery_in_query462);
                    d=describeQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_describeQuery.add(d.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:133:58: a= askQuery
                    {
                    pushFollow(FOLLOW_askQuery_in_query468);
                    a=askQuery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_askQuery.add(a.getTree());

                    }
                    break;

            }

            // IbmSparqlExt.g:134:4: (b= bindingsClause )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==BINDINGS||LA2_0==VALUES) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // IbmSparqlExt.g:134:4: b= bindingsClause
                    {
                    pushFollow(FOLLOW_bindingsClause_in_query476);
                    b=bindingsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bindingsClause.add(b.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: b, p, c, a, s, d
            // token labels: 
            // rule labels: retval, d, s, b, c, a, p
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 136:3: -> ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? )
            {
                // IbmSparqlExt.g:136:7: ^( QUERY $p ( $s)? ( $c)? ( $d)? ( $a)? ( $b)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(QUERY, "QUERY"), root_1);

                adaptor.addChild(root_1, stream_p.nextTree());
                // IbmSparqlExt.g:136:19: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextTree());

                }
                stream_s.reset();
                // IbmSparqlExt.g:136:23: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();
                // IbmSparqlExt.g:136:27: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();
                // IbmSparqlExt.g:136:31: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();
                // IbmSparqlExt.g:136:35: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "query"

    public static class updateUnit_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateUnit"
    // IbmSparqlExt.g:139:1: updateUnit : update -> ^( UPDATE update ) ;
    public final IbmSparqlExtParser.updateUnit_return updateUnit() throws RecognitionException {
        IbmSparqlExtParser.updateUnit_return retval = new IbmSparqlExtParser.updateUnit_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.update_return update2 = null;


        RewriteRuleSubtreeStream stream_update=new RewriteRuleSubtreeStream(adaptor,"rule update");
        try {
            // IbmSparqlExt.g:140:2: ( update -> ^( UPDATE update ) )
            // IbmSparqlExt.g:140:6: update
            {
            pushFollow(FOLLOW_update_in_updateUnit535);
            update2=update();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_update.add(update2.getTree());


            // AST REWRITE
            // elements: update
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 142:3: -> ^( UPDATE update )
            {
                // IbmSparqlExt.g:142:7: ^( UPDATE update )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(UPDATE, "UPDATE"), root_1);

                adaptor.addChild(root_1, stream_update.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateUnit"

    public static class prologue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologue"
    // IbmSparqlExt.g:145:1: prologue : (b+= baseDecl | p+= prefixDecl )* -> ^( PROLOGUE ( $b)* ( $p)* ) ;
    public final IbmSparqlExtParser.prologue_return prologue() throws RecognitionException {
        IbmSparqlExtParser.prologue_return retval = new IbmSparqlExtParser.prologue_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        List list_b=null;
        List list_p=null;
        RuleReturnScope b = null;
        RuleReturnScope p = null;
        RewriteRuleSubtreeStream stream_prefixDecl=new RewriteRuleSubtreeStream(adaptor,"rule prefixDecl");
        RewriteRuleSubtreeStream stream_baseDecl=new RewriteRuleSubtreeStream(adaptor,"rule baseDecl");
        try {
            // IbmSparqlExt.g:146:2: ( (b+= baseDecl | p+= prefixDecl )* -> ^( PROLOGUE ( $b)* ( $p)* ) )
            // IbmSparqlExt.g:146:6: (b+= baseDecl | p+= prefixDecl )*
            {
            // IbmSparqlExt.g:146:6: (b+= baseDecl | p+= prefixDecl )*
            loop3:
            do {
                int alt3=3;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==BASE) ) {
                    alt3=1;
                }
                else if ( (LA3_0==PREFIX) ) {
                    alt3=2;
                }


                switch (alt3) {
            	case 1 :
            	    // IbmSparqlExt.g:146:8: b+= baseDecl
            	    {
            	    pushFollow(FOLLOW_baseDecl_in_prologue573);
            	    b=baseDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_baseDecl.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;
            	case 2 :
            	    // IbmSparqlExt.g:146:22: p+= prefixDecl
            	    {
            	    pushFollow(FOLLOW_prefixDecl_in_prologue579);
            	    p=prefixDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_prefixDecl.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);



            // AST REWRITE
            // elements: p, b
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: b, p
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
            root_0 = (XTree)adaptor.nil();
            // 148:3: -> ^( PROLOGUE ( $b)* ( $p)* )
            {
                // IbmSparqlExt.g:148:7: ^( PROLOGUE ( $b)* ( $p)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PROLOGUE, "PROLOGUE"), root_1);

                // IbmSparqlExt.g:148:19: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();
                // IbmSparqlExt.g:148:24: ( $p)*
                while ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologue"

    public static class baseDecl_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "baseDecl"
    // IbmSparqlExt.g:151:1: baseDecl : BASE i= iRIref -> ^( BASE $i) ;
    public final IbmSparqlExtParser.baseDecl_return baseDecl() throws RecognitionException {
        IbmSparqlExtParser.baseDecl_return retval = new IbmSparqlExtParser.baseDecl_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token BASE3=null;
        IbmSparqlExtParser.iRIref_return i = null;


        XTree BASE3_tree=null;
        RewriteRuleTokenStream stream_BASE=new RewriteRuleTokenStream(adaptor,"token BASE");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // IbmSparqlExt.g:152:2: ( BASE i= iRIref -> ^( BASE $i) )
            // IbmSparqlExt.g:152:6: BASE i= iRIref
            {
            BASE3=(Token)match(input,BASE,FOLLOW_BASE_in_baseDecl621); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BASE.add(BASE3);

            pushFollow(FOLLOW_iRIref_in_baseDecl625);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());


            // AST REWRITE
            // elements: i, BASE
            // token labels: 
            // rule labels: retval, i
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 154:3: -> ^( BASE $i)
            {
                // IbmSparqlExt.g:154:7: ^( BASE $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_BASE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_i.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "baseDecl"

    public static class prefixDecl_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefixDecl"
    // IbmSparqlExt.g:157:1: prefixDecl : PREFIX p= PNAME_NS i= iRIref -> ^( PREFIX ^( PREFIXED_NS $p) $i) ;
    public final IbmSparqlExtParser.prefixDecl_return prefixDecl() throws RecognitionException {
        IbmSparqlExtParser.prefixDecl_return retval = new IbmSparqlExtParser.prefixDecl_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token p=null;
        Token PREFIX4=null;
        IbmSparqlExtParser.iRIref_return i = null;


        XTree p_tree=null;
        XTree PREFIX4_tree=null;
        RewriteRuleTokenStream stream_PREFIX=new RewriteRuleTokenStream(adaptor,"token PREFIX");
        RewriteRuleTokenStream stream_PNAME_NS=new RewriteRuleTokenStream(adaptor,"token PNAME_NS");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // IbmSparqlExt.g:158:2: ( PREFIX p= PNAME_NS i= iRIref -> ^( PREFIX ^( PREFIXED_NS $p) $i) )
            // IbmSparqlExt.g:158:6: PREFIX p= PNAME_NS i= iRIref
            {
            PREFIX4=(Token)match(input,PREFIX,FOLLOW_PREFIX_in_prefixDecl658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PREFIX.add(PREFIX4);

            p=(Token)match(input,PNAME_NS,FOLLOW_PNAME_NS_in_prefixDecl662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PNAME_NS.add(p);

            pushFollow(FOLLOW_iRIref_in_prefixDecl666);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());


            // AST REWRITE
            // elements: i, PREFIX, p
            // token labels: p
            // rule labels: retval, i
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 160:3: -> ^( PREFIX ^( PREFIXED_NS $p) $i)
            {
                // IbmSparqlExt.g:160:7: ^( PREFIX ^( PREFIXED_NS $p) $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_PREFIX.nextNode(), root_1);

                // IbmSparqlExt.g:160:17: ^( PREFIXED_NS $p)
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREFIXED_NS, "PREFIXED_NS"), root_2);

                adaptor.addChild(root_2, stream_p.nextNode());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_i.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefixDecl"

    public static class selectQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectQuery"
    // IbmSparqlExt.g:164:1: selectQuery : (f+= functionDecl )* s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier -> ^( SELECT $s ( ^( FUNCTION ( $f)* ) )? ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? ) ;
    public final IbmSparqlExtParser.selectQuery_return selectQuery() throws RecognitionException {
        IbmSparqlExtParser.selectQuery_return retval = new IbmSparqlExtParser.selectQuery_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        List list_f=null;
        List list_d=null;
        IbmSparqlExtParser.selectClause_return s = null;

        IbmSparqlExtParser.whereClause_return w = null;

        IbmSparqlExtParser.solutionModifier_return m = null;

        RuleReturnScope f = null;
        RuleReturnScope d = null;
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_functionDecl=new RewriteRuleSubtreeStream(adaptor,"rule functionDecl");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        try {
            // IbmSparqlExt.g:165:2: ( (f+= functionDecl )* s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier -> ^( SELECT $s ( ^( FUNCTION ( $f)* ) )? ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? ) )
            // IbmSparqlExt.g:165:6: (f+= functionDecl )* s= selectClause (d+= datasetClause )* w= whereClause m= solutionModifier
            {
            // IbmSparqlExt.g:165:7: (f+= functionDecl )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==FUNCTION) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // IbmSparqlExt.g:165:7: f+= functionDecl
            	    {
            	    pushFollow(FOLLOW_functionDecl_in_selectQuery708);
            	    f=functionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_functionDecl.add(f.getTree());
            	    if (list_f==null) list_f=new ArrayList();
            	    list_f.add(f.getTree());


            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);

            pushFollow(FOLLOW_selectClause_in_selectQuery713);
            s=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());
            // IbmSparqlExt.g:165:39: (d+= datasetClause )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==FROM) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // IbmSparqlExt.g:165:39: d+= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_selectQuery717);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());
            	    if (list_d==null) list_d=new ArrayList();
            	    list_d.add(d.getTree());


            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            pushFollow(FOLLOW_whereClause_in_selectQuery722);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());
            pushFollow(FOLLOW_solutionModifier_in_selectQuery726);
            m=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(m.getTree());


            // AST REWRITE
            // elements: s, m, w, f, d
            // token labels: 
            // rule labels: w, retval, s, m
            // token list labels: 
            // rule list labels: f, d
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_m=new RewriteRuleSubtreeStream(adaptor,"rule m",m!=null?m.tree:null);
            RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"token f",list_f);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"token d",list_d);
            root_0 = (XTree)adaptor.nil();
            // 166:3: -> ^( SELECT $s ( ^( FUNCTION ( $f)* ) )? ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? )
            {
                // IbmSparqlExt.g:166:7: ^( SELECT $s ( ^( FUNCTION ( $f)* ) )? ( ^( DATASET ( $d)* ) )? ( $w)? ( $m)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SELECT, "SELECT"), root_1);

                adaptor.addChild(root_1, stream_s.nextTree());
                // IbmSparqlExt.g:166:20: ( ^( FUNCTION ( $f)* ) )?
                if ( stream_f.hasNext() ) {
                    // IbmSparqlExt.g:166:20: ^( FUNCTION ( $f)* )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(FUNCTION, "FUNCTION"), root_2);

                    // IbmSparqlExt.g:166:31: ( $f)*
                    while ( stream_f.hasNext() ) {
                        adaptor.addChild(root_2, stream_f.nextTree());

                    }
                    stream_f.reset();

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_f.reset();
                // IbmSparqlExt.g:166:37: ( ^( DATASET ( $d)* ) )?
                if ( stream_d.hasNext() ) {
                    // IbmSparqlExt.g:166:37: ^( DATASET ( $d)* )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(DATASET, "DATASET"), root_2);

                    // IbmSparqlExt.g:166:47: ( $d)*
                    while ( stream_d.hasNext() ) {
                        adaptor.addChild(root_2, stream_d.nextTree());

                    }
                    stream_d.reset();

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_d.reset();
                // IbmSparqlExt.g:166:53: ( $w)?
                if ( stream_w.hasNext() ) {
                    adaptor.addChild(root_1, stream_w.nextTree());

                }
                stream_w.reset();
                // IbmSparqlExt.g:166:57: ( $m)?
                if ( stream_m.hasNext() ) {
                    adaptor.addChild(root_1, stream_m.nextTree());

                }
                stream_m.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectQuery"

    public static class functionDecl_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDecl"
    // IbmSparqlExt.g:170:1: functionDecl : FUNCTION fn= VARNAME OPEN_BRACE (inv+= var )+ ARROW (outv+= var )+ CLOSE_BRACE FUNCLANG fl= VARNAME fb= functionBody -> ^( FUNCTION $fn ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLANG $fl) $fb) ;
    public final IbmSparqlExtParser.functionDecl_return functionDecl() throws RecognitionException {
        IbmSparqlExtParser.functionDecl_return retval = new IbmSparqlExtParser.functionDecl_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token fn=null;
        Token fl=null;
        Token FUNCTION5=null;
        Token OPEN_BRACE6=null;
        Token ARROW7=null;
        Token CLOSE_BRACE8=null;
        Token FUNCLANG9=null;
        List list_inv=null;
        List list_outv=null;
        IbmSparqlExtParser.functionBody_return fb = null;

        RuleReturnScope inv = null;
        RuleReturnScope outv = null;
        XTree fn_tree=null;
        XTree fl_tree=null;
        XTree FUNCTION5_tree=null;
        XTree OPEN_BRACE6_tree=null;
        XTree ARROW7_tree=null;
        XTree CLOSE_BRACE8_tree=null;
        XTree FUNCLANG9_tree=null;
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_FUNCLANG=new RewriteRuleTokenStream(adaptor,"token FUNCLANG");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_VARNAME=new RewriteRuleTokenStream(adaptor,"token VARNAME");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
        try {
            // IbmSparqlExt.g:171:2: ( FUNCTION fn= VARNAME OPEN_BRACE (inv+= var )+ ARROW (outv+= var )+ CLOSE_BRACE FUNCLANG fl= VARNAME fb= functionBody -> ^( FUNCTION $fn ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLANG $fl) $fb) )
            // IbmSparqlExt.g:171:4: FUNCTION fn= VARNAME OPEN_BRACE (inv+= var )+ ARROW (outv+= var )+ CLOSE_BRACE FUNCLANG fl= VARNAME fb= functionBody
            {
            FUNCTION5=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDecl779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FUNCTION.add(FUNCTION5);

            fn=(Token)match(input,VARNAME,FOLLOW_VARNAME_in_functionDecl783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARNAME.add(fn);

            OPEN_BRACE6=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_functionDecl785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE6);

            // IbmSparqlExt.g:171:38: (inv+= var )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( ((LA6_0>=VAR1 && LA6_0<=VAR2)) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // IbmSparqlExt.g:171:38: inv+= var
            	    {
            	    pushFollow(FOLLOW_var_in_functionDecl789);
            	    inv=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(inv.getTree());
            	    if (list_inv==null) list_inv=new ArrayList();
            	    list_inv.add(inv.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);

            ARROW7=(Token)match(input,ARROW,FOLLOW_ARROW_in_functionDecl792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ARROW.add(ARROW7);

            // IbmSparqlExt.g:171:55: (outv+= var )+
            int cnt7=0;
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( ((LA7_0>=VAR1 && LA7_0<=VAR2)) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // IbmSparqlExt.g:171:55: outv+= var
            	    {
            	    pushFollow(FOLLOW_var_in_functionDecl796);
            	    outv=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(outv.getTree());
            	    if (list_outv==null) list_outv=new ArrayList();
            	    list_outv.add(outv.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt7 >= 1 ) break loop7;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(7, input);
                        throw eee;
                }
                cnt7++;
            } while (true);

            CLOSE_BRACE8=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_functionDecl799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE8);

            FUNCLANG9=(Token)match(input,FUNCLANG,FOLLOW_FUNCLANG_in_functionDecl801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FUNCLANG.add(FUNCLANG9);

            fl=(Token)match(input,VARNAME,FOLLOW_VARNAME_in_functionDecl805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARNAME.add(fl);

            pushFollow(FOLLOW_functionBody_in_functionDecl809);
            fb=functionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_functionBody.add(fb.getTree());


            // AST REWRITE
            // elements: FUNCTION, fb, fl, FUNCLANG, outv, fn, inv
            // token labels: fl, fn
            // rule labels: retval, fb
            // token list labels: 
            // rule list labels: outv, inv
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_fl=new RewriteRuleTokenStream(adaptor,"token fl",fl);
            RewriteRuleTokenStream stream_fn=new RewriteRuleTokenStream(adaptor,"token fn",fn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_fb=new RewriteRuleSubtreeStream(adaptor,"rule fb",fb!=null?fb.tree:null);
            RewriteRuleSubtreeStream stream_outv=new RewriteRuleSubtreeStream(adaptor,"token outv",list_outv);
            RewriteRuleSubtreeStream stream_inv=new RewriteRuleSubtreeStream(adaptor,"token inv",list_inv);
            root_0 = (XTree)adaptor.nil();
            // 172:4: -> ^( FUNCTION $fn ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLANG $fl) $fb)
            {
                // IbmSparqlExt.g:172:7: ^( FUNCTION $fn ^( INV ( $inv)* ) ^( OUTV ( $outv)* ) ^( FUNCLANG $fl) $fb)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);

                adaptor.addChild(root_1, stream_fn.nextNode());
                // IbmSparqlExt.g:172:23: ^( INV ( $inv)* )
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INV, "INV"), root_2);

                // IbmSparqlExt.g:172:29: ( $inv)*
                while ( stream_inv.hasNext() ) {
                    adaptor.addChild(root_2, stream_inv.nextTree());

                }
                stream_inv.reset();

                adaptor.addChild(root_1, root_2);
                }
                // IbmSparqlExt.g:172:36: ^( OUTV ( $outv)* )
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(OUTV, "OUTV"), root_2);

                // IbmSparqlExt.g:172:43: ( $outv)*
                while ( stream_outv.hasNext() ) {
                    adaptor.addChild(root_2, stream_outv.nextTree());

                }
                stream_outv.reset();

                adaptor.addChild(root_1, root_2);
                }
                // IbmSparqlExt.g:172:51: ^( FUNCLANG $fl)
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot(stream_FUNCLANG.nextNode(), root_2);

                adaptor.addChild(root_2, stream_fl.nextNode());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_fb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "functionDecl"

    public static class functionBody_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionBody"
    // IbmSparqlExt.g:176:1: functionBody : ( OPEN_CURLY_BRACE f= STRING_LITERAL2 CLOSE_CURLY_BRACE -> ^( FUNCBODY $f) | OPEN_CURLY_BRACE p= groupGraphPattern CLOSE_CURLY_BRACE -> ^( FUNCBODY $p) );
    public final IbmSparqlExtParser.functionBody_return functionBody() throws RecognitionException {
        IbmSparqlExtParser.functionBody_return retval = new IbmSparqlExtParser.functionBody_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token f=null;
        Token OPEN_CURLY_BRACE10=null;
        Token CLOSE_CURLY_BRACE11=null;
        Token OPEN_CURLY_BRACE12=null;
        Token CLOSE_CURLY_BRACE13=null;
        IbmSparqlExtParser.groupGraphPattern_return p = null;


        XTree f_tree=null;
        XTree OPEN_CURLY_BRACE10_tree=null;
        XTree CLOSE_CURLY_BRACE11_tree=null;
        XTree OPEN_CURLY_BRACE12_tree=null;
        XTree CLOSE_CURLY_BRACE13_tree=null;
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_STRING_LITERAL2=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL2");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparqlExt.g:177:2: ( OPEN_CURLY_BRACE f= STRING_LITERAL2 CLOSE_CURLY_BRACE -> ^( FUNCBODY $f) | OPEN_CURLY_BRACE p= groupGraphPattern CLOSE_CURLY_BRACE -> ^( FUNCBODY $p) )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==OPEN_CURLY_BRACE) ) {
                int LA8_1 = input.LA(2);

                if ( (LA8_1==STRING_LITERAL2) ) {
                    alt8=1;
                }
                else if ( (LA8_1==OPEN_CURLY_BRACE) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // IbmSparqlExt.g:177:4: OPEN_CURLY_BRACE f= STRING_LITERAL2 CLOSE_CURLY_BRACE
                    {
                    OPEN_CURLY_BRACE10=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_functionBody861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE10);

                    f=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_functionBody865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL2.add(f);

                    CLOSE_CURLY_BRACE11=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_functionBody867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE11);



                    // AST REWRITE
                    // elements: f
                    // token labels: f
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 178:4: -> ^( FUNCBODY $f)
                    {
                        // IbmSparqlExt.g:178:8: ^( FUNCBODY $f)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(FUNCBODY, "FUNCBODY"), root_1);

                        adaptor.addChild(root_1, stream_f.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:179:4: OPEN_CURLY_BRACE p= groupGraphPattern CLOSE_CURLY_BRACE
                    {
                    OPEN_CURLY_BRACE12=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_functionBody887); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE12);

                    pushFollow(FOLLOW_groupGraphPattern_in_functionBody891);
                    p=groupGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupGraphPattern.add(p.getTree());
                    CLOSE_CURLY_BRACE13=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_functionBody893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE13);



                    // AST REWRITE
                    // elements: p
                    // token labels: 
                    // rule labels: retval, p
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 180:4: -> ^( FUNCBODY $p)
                    {
                        // IbmSparqlExt.g:180:8: ^( FUNCBODY $p)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(FUNCBODY, "FUNCBODY"), root_1);

                        adaptor.addChild(root_1, stream_p.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "functionBody"

    public static class subSelect_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelect"
    // IbmSparqlExt.g:183:1: subSelect : s= selectClause w= whereClause m= solutionModifier (d= inlineData )? -> ^( SUB_SELECT $s $w $m ( $d)? ) ;
    public final IbmSparqlExtParser.subSelect_return subSelect() throws RecognitionException {
        IbmSparqlExtParser.subSelect_return retval = new IbmSparqlExtParser.subSelect_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.selectClause_return s = null;

        IbmSparqlExtParser.whereClause_return w = null;

        IbmSparqlExtParser.solutionModifier_return m = null;

        IbmSparqlExtParser.inlineData_return d = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_inlineData=new RewriteRuleSubtreeStream(adaptor,"rule inlineData");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        try {
            // IbmSparqlExt.g:184:2: (s= selectClause w= whereClause m= solutionModifier (d= inlineData )? -> ^( SUB_SELECT $s $w $m ( $d)? ) )
            // IbmSparqlExt.g:184:6: s= selectClause w= whereClause m= solutionModifier (d= inlineData )?
            {
            pushFollow(FOLLOW_selectClause_in_subSelect927);
            s=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());
            pushFollow(FOLLOW_whereClause_in_subSelect931);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());
            pushFollow(FOLLOW_solutionModifier_in_subSelect935);
            m=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(m.getTree());
            // IbmSparqlExt.g:184:54: (d= inlineData )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==VALUES) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // IbmSparqlExt.g:184:55: d= inlineData
                    {
                    pushFollow(FOLLOW_inlineData_in_subSelect940);
                    d=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inlineData.add(d.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: m, w, d, s
            // token labels: 
            // rule labels: w, retval, d, s, m
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_m=new RewriteRuleSubtreeStream(adaptor,"rule m",m!=null?m.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 185:3: -> ^( SUB_SELECT $s $w $m ( $d)? )
            {
                // IbmSparqlExt.g:185:7: ^( SUB_SELECT $s $w $m ( $d)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SUB_SELECT, "SUB_SELECT"), root_1);

                adaptor.addChild(root_1, stream_s.nextTree());
                adaptor.addChild(root_1, stream_w.nextTree());
                adaptor.addChild(root_1, stream_m.nextTree());
                // IbmSparqlExt.g:185:30: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelect"

    public static class selectClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // IbmSparqlExt.g:188:1: selectClause : SELECT (t1= DISTINCT | t2= REDUCED )? ( (v1+= var | e+= expAsVar | f+= fexp )+ | '*' ) -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? ) ;
    public final IbmSparqlExtParser.selectClause_return selectClause() throws RecognitionException {
        IbmSparqlExtParser.selectClause_return retval = new IbmSparqlExtParser.selectClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token t1=null;
        Token t2=null;
        Token SELECT14=null;
        Token char_literal15=null;
        List list_v1=null;
        List list_e=null;
        List list_f=null;
        RuleReturnScope v1 = null;
        RuleReturnScope e = null;
        RuleReturnScope f = null;
        XTree t1_tree=null;
        XTree t2_tree=null;
        XTree SELECT14_tree=null;
        XTree char_literal15_tree=null;
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_REDUCED=new RewriteRuleTokenStream(adaptor,"token REDUCED");
        RewriteRuleTokenStream stream_256=new RewriteRuleTokenStream(adaptor,"token 256");
        RewriteRuleSubtreeStream stream_fexp=new RewriteRuleSubtreeStream(adaptor,"rule fexp");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_expAsVar=new RewriteRuleSubtreeStream(adaptor,"rule expAsVar");
        try {
            // IbmSparqlExt.g:189:2: ( SELECT (t1= DISTINCT | t2= REDUCED )? ( (v1+= var | e+= expAsVar | f+= fexp )+ | '*' ) -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? ) )
            // IbmSparqlExt.g:189:6: SELECT (t1= DISTINCT | t2= REDUCED )? ( (v1+= var | e+= expAsVar | f+= fexp )+ | '*' )
            {
            SELECT14=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectClause983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT14);

            // IbmSparqlExt.g:189:13: (t1= DISTINCT | t2= REDUCED )?
            int alt10=3;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==DISTINCT) ) {
                alt10=1;
            }
            else if ( (LA10_0==REDUCED) ) {
                alt10=2;
            }
            switch (alt10) {
                case 1 :
                    // IbmSparqlExt.g:189:15: t1= DISTINCT
                    {
                    t1=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(t1);


                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:189:29: t2= REDUCED
                    {
                    t2=(Token)match(input,REDUCED,FOLLOW_REDUCED_in_selectClause995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_REDUCED.add(t2);


                    }
                    break;

            }

            // IbmSparqlExt.g:189:43: ( (v1+= var | e+= expAsVar | f+= fexp )+ | '*' )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==OPEN_BRACE||(LA12_0>=VAR1 && LA12_0<=VAR2)||(LA12_0>=NOT && LA12_0<=GROUP_CONCAT)) ) {
                alt12=1;
            }
            else if ( (LA12_0==256) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // IbmSparqlExt.g:189:45: (v1+= var | e+= expAsVar | f+= fexp )+
                    {
                    // IbmSparqlExt.g:189:45: (v1+= var | e+= expAsVar | f+= fexp )+
                    int cnt11=0;
                    loop11:
                    do {
                        int alt11=4;
                        switch ( input.LA(1) ) {
                        case VAR1:
                        case VAR2:
                            {
                            alt11=1;
                            }
                            break;
                        case OPEN_BRACE:
                            {
                            alt11=2;
                            }
                            break;
                        case NOT:
                        case STR:
                        case LANG:
                        case LANGMATCHES:
                        case DATATYPE:
                        case BOUND:
                        case IRI:
                        case URI:
                        case BNODE:
                        case RAND:
                        case ABS:
                        case CEIL:
                        case FLOOR:
                        case ROUND:
                        case CONCAT:
                        case STRLEN:
                        case UCASE:
                        case LCASE:
                        case ENCODE_FOR_URI:
                        case CONTAINS:
                        case STRSTARTS:
                        case STRENDS:
                        case STRBEFORE:
                        case STRAFTER:
                        case YEAR:
                        case MONTH:
                        case DAY:
                        case HOURS:
                        case MINUTES:
                        case SECONDS:
                        case TIMEZONE:
                        case TZ:
                        case NOW:
                        case UUID:
                        case STRUUID:
                        case MD5:
                        case SHA1:
                        case SHA224:
                        case SHA256:
                        case SHA384:
                        case SHA512:
                        case COALESCE:
                        case IF:
                        case STRLANG:
                        case STRDT:
                        case SAMETERM:
                        case ISIRI:
                        case ISURI:
                        case ISBLANK:
                        case ISLITERAL:
                        case ISNUMERIC:
                        case REGEX:
                        case SUBSTR:
                        case REPLACE:
                        case EXISTS:
                        case COUNT:
                        case SUM:
                        case MIN:
                        case MAX:
                        case AVG:
                        case SAMPLE:
                        case GROUP_CONCAT:
                            {
                            alt11=3;
                            }
                            break;

                        }

                        switch (alt11) {
                    	case 1 :
                    	    // IbmSparqlExt.g:189:47: v1+= var
                    	    {
                    	    pushFollow(FOLLOW_var_in_selectClause1006);
                    	    v1=var();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_var.add(v1.getTree());
                    	    if (list_v1==null) list_v1=new ArrayList();
                    	    list_v1.add(v1.getTree());


                    	    }
                    	    break;
                    	case 2 :
                    	    // IbmSparqlExt.g:189:57: e+= expAsVar
                    	    {
                    	    pushFollow(FOLLOW_expAsVar_in_selectClause1012);
                    	    e=expAsVar();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expAsVar.add(e.getTree());
                    	    if (list_e==null) list_e=new ArrayList();
                    	    list_e.add(e.getTree());


                    	    }
                    	    break;
                    	case 3 :
                    	    // IbmSparqlExt.g:189:71: f+= fexp
                    	    {
                    	    pushFollow(FOLLOW_fexp_in_selectClause1018);
                    	    f=fexp();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_fexp.add(f.getTree());
                    	    if (list_f==null) list_f=new ArrayList();
                    	    list_f.add(f.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt11 >= 1 ) break loop11;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(11, input);
                                throw eee;
                        }
                        cnt11++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:189:84: '*'
                    {
                    char_literal15=(Token)match(input,256,FOLLOW_256_in_selectClause1025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_256.add(char_literal15);


                    }
                    break;

            }



            // AST REWRITE
            // elements: v1, e, t2, t1, f, 256
            // token labels: t2, t1
            // rule labels: retval
            // token list labels: 
            // rule list labels: f, v1, e
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t2=new RewriteRuleTokenStream(adaptor,"token t2",t2);
            RewriteRuleTokenStream stream_t1=new RewriteRuleTokenStream(adaptor,"token t1",t1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"token f",list_f);
            RewriteRuleSubtreeStream stream_v1=new RewriteRuleSubtreeStream(adaptor,"token v1",list_v1);
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
            root_0 = (XTree)adaptor.nil();
            // 191:3: -> ( ^( TYPE ( $t1)? ( $t2)? ) )? ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? )
            {
                // IbmSparqlExt.g:191:8: ( ^( TYPE ( $t1)? ( $t2)? ) )?
                if ( stream_t2.hasNext()||stream_t1.hasNext() ) {
                    // IbmSparqlExt.g:191:8: ^( TYPE ( $t1)? ( $t2)? )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TYPE, "TYPE"), root_1);

                    // IbmSparqlExt.g:191:15: ( $t1)?
                    if ( stream_t1.hasNext() ) {
                        adaptor.addChild(root_1, stream_t1.nextNode());

                    }
                    stream_t1.reset();
                    // IbmSparqlExt.g:191:20: ( $t2)?
                    if ( stream_t2.hasNext() ) {
                        adaptor.addChild(root_1, stream_t2.nextNode());

                    }
                    stream_t2.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_t2.reset();
                stream_t1.reset();
                // IbmSparqlExt.g:191:27: ^( PVARS ( $v1)* ( $e)* ( $f)* ( '*' )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PVARS, "PVARS"), root_1);

                // IbmSparqlExt.g:191:35: ( $v1)*
                while ( stream_v1.hasNext() ) {
                    adaptor.addChild(root_1, stream_v1.nextTree());

                }
                stream_v1.reset();
                // IbmSparqlExt.g:191:40: ( $e)*
                while ( stream_e.hasNext() ) {
                    adaptor.addChild(root_1, stream_e.nextTree());

                }
                stream_e.reset();
                // IbmSparqlExt.g:191:44: ( $f)*
                while ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextTree());

                }
                stream_f.reset();
                // IbmSparqlExt.g:191:48: ( '*' )?
                if ( stream_256.hasNext() ) {
                    adaptor.addChild(root_1, stream_256.nextNode());

                }
                stream_256.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class expAsVar_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expAsVar"
    // IbmSparqlExt.g:194:1: expAsVar : OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( AS $v $e) ;
    public final IbmSparqlExtParser.expAsVar_return expAsVar() throws RecognitionException {
        IbmSparqlExtParser.expAsVar_return retval = new IbmSparqlExtParser.expAsVar_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE16=null;
        Token AS17=null;
        Token CLOSE_BRACE18=null;
        IbmSparqlExtParser.expression_return e = null;

        IbmSparqlExtParser.var_return v = null;


        XTree OPEN_BRACE16_tree=null;
        XTree AS17_tree=null;
        XTree CLOSE_BRACE18_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // IbmSparqlExt.g:195:2: ( OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( AS $v $e) )
            // IbmSparqlExt.g:195:4: OPEN_BRACE e= expression AS v= var CLOSE_BRACE
            {
            OPEN_BRACE16=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_expAsVar1079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE16);

            pushFollow(FOLLOW_expression_in_expAsVar1083);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());
            AS17=(Token)match(input,AS,FOLLOW_AS_in_expAsVar1085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS17);

            pushFollow(FOLLOW_var_in_expAsVar1089);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());
            CLOSE_BRACE18=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_expAsVar1091); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE18);



            // AST REWRITE
            // elements: AS, v, e
            // token labels: 
            // rule labels: v, retval, e
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 197:3: -> ^( AS $v $e)
            {
                // IbmSparqlExt.g:197:6: ^( AS $v $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_AS.nextNode(), root_1);

                adaptor.addChild(root_1, stream_v.nextTree());
                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "expAsVar"

    public static class fexp_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fexp"
    // IbmSparqlExt.g:200:1: fexp : (a= aggregate | b= builtInCall ) -> ^( EXP ( $a)? ( $b)? ) ;
    public final IbmSparqlExtParser.fexp_return fexp() throws RecognitionException {
        IbmSparqlExtParser.fexp_return retval = new IbmSparqlExtParser.fexp_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.aggregate_return a = null;

        IbmSparqlExtParser.builtInCall_return b = null;


        RewriteRuleSubtreeStream stream_aggregate=new RewriteRuleSubtreeStream(adaptor,"rule aggregate");
        RewriteRuleSubtreeStream stream_builtInCall=new RewriteRuleSubtreeStream(adaptor,"rule builtInCall");
        try {
            // IbmSparqlExt.g:200:6: ( (a= aggregate | b= builtInCall ) -> ^( EXP ( $a)? ( $b)? ) )
            // IbmSparqlExt.g:200:8: (a= aggregate | b= builtInCall )
            {
            // IbmSparqlExt.g:200:8: (a= aggregate | b= builtInCall )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( ((LA13_0>=COUNT && LA13_0<=GROUP_CONCAT)) ) {
                alt13=1;
            }
            else if ( ((LA13_0>=NOT && LA13_0<=EXISTS)) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // IbmSparqlExt.g:200:10: a= aggregate
                    {
                    pushFollow(FOLLOW_aggregate_in_fexp1125);
                    a=aggregate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aggregate.add(a.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:200:24: b= builtInCall
                    {
                    pushFollow(FOLLOW_builtInCall_in_fexp1131);
                    b=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtInCall.add(b.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: a, b
            // token labels: 
            // rule labels: retval, b, a
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 202:3: -> ^( EXP ( $a)? ( $b)? )
            {
                // IbmSparqlExt.g:202:7: ^( EXP ( $a)? ( $b)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(EXP, "EXP"), root_1);

                // IbmSparqlExt.g:202:14: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();
                // IbmSparqlExt.g:202:18: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "fexp"

    public static class constructQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructQuery"
    // IbmSparqlExt.g:206:1: constructQuery : CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) ) ;
    public final IbmSparqlExtParser.constructQuery_return constructQuery() throws RecognitionException {
        IbmSparqlExtParser.constructQuery_return retval = new IbmSparqlExtParser.constructQuery_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token CONSTRUCT19=null;
        Token WHERE_TOKEN20=null;
        Token OPEN_CURLY_BRACE21=null;
        Token CLOSE_CURLY_BRACE22=null;
        List list_d1=null;
        List list_d2=null;
        IbmSparqlExtParser.constructTemplate_return c = null;

        IbmSparqlExtParser.whereClause_return w1 = null;

        IbmSparqlExtParser.solutionModifier_return s1 = null;

        IbmSparqlExtParser.triplesTemplate_return t = null;

        IbmSparqlExtParser.solutionModifier_return s2 = null;

        RuleReturnScope d1 = null;
        RuleReturnScope d2 = null;
        XTree CONSTRUCT19_tree=null;
        XTree WHERE_TOKEN20_tree=null;
        XTree OPEN_CURLY_BRACE21_tree=null;
        XTree CLOSE_CURLY_BRACE22_tree=null;
        RewriteRuleTokenStream stream_CONSTRUCT=new RewriteRuleTokenStream(adaptor,"token CONSTRUCT");
        RewriteRuleTokenStream stream_WHERE_TOKEN=new RewriteRuleTokenStream(adaptor,"token WHERE_TOKEN");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_triplesTemplate=new RewriteRuleSubtreeStream(adaptor,"rule triplesTemplate");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        RewriteRuleSubtreeStream stream_constructTemplate=new RewriteRuleSubtreeStream(adaptor,"rule constructTemplate");
        try {
            // IbmSparqlExt.g:207:2: ( CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) ) )
            // IbmSparqlExt.g:207:6: CONSTRUCT ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) )
            {
            CONSTRUCT19=(Token)match(input,CONSTRUCT,FOLLOW_CONSTRUCT_in_constructQuery1173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CONSTRUCT.add(CONSTRUCT19);

            // IbmSparqlExt.g:208:6: ( (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier ) -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1) | ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier ) -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2) )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==OPEN_CURLY_BRACE) ) {
                alt17=1;
            }
            else if ( (LA17_0==WHERE_TOKEN||LA17_0==FROM) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // IbmSparqlExt.g:209:8: (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier )
                    {
                    // IbmSparqlExt.g:209:8: (c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier )
                    // IbmSparqlExt.g:209:9: c= constructTemplate (d1+= datasetClause )* w1= whereClause s1= solutionModifier
                    {
                    pushFollow(FOLLOW_constructTemplate_in_constructQuery1193);
                    c=constructTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructTemplate.add(c.getTree());
                    // IbmSparqlExt.g:209:31: (d1+= datasetClause )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==FROM) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // IbmSparqlExt.g:209:31: d1+= datasetClause
                    	    {
                    	    pushFollow(FOLLOW_datasetClause_in_constructQuery1197);
                    	    d1=datasetClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_datasetClause.add(d1.getTree());
                    	    if (list_d1==null) list_d1=new ArrayList();
                    	    list_d1.add(d1.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);

                    pushFollow(FOLLOW_whereClause_in_constructQuery1202);
                    w1=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(w1.getTree());
                    pushFollow(FOLLOW_solutionModifier_in_constructQuery1206);
                    s1=solutionModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_solutionModifier.add(s1.getTree());

                    }



                    // AST REWRITE
                    // elements: CONSTRUCT, s1, d1, w1, c
                    // token labels: 
                    // rule labels: retval, s1, c, w1
                    // token list labels: 
                    // rule list labels: d1
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
                    RewriteRuleSubtreeStream stream_w1=new RewriteRuleSubtreeStream(adaptor,"rule w1",w1!=null?w1.tree:null);
                    RewriteRuleSubtreeStream stream_d1=new RewriteRuleSubtreeStream(adaptor,"token d1",list_d1);
                    root_0 = (XTree)adaptor.nil();
                    // 210:5: -> ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1)
                    {
                        // IbmSparqlExt.g:210:8: ^( CONSTRUCT ( $c)? ( ^( DATASET ( $d1)* ) )? $w1 $s1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_CONSTRUCT.nextNode(), root_1);

                        // IbmSparqlExt.g:210:21: ( $c)?
                        if ( stream_c.hasNext() ) {
                            adaptor.addChild(root_1, stream_c.nextTree());

                        }
                        stream_c.reset();
                        // IbmSparqlExt.g:210:25: ( ^( DATASET ( $d1)* ) )?
                        if ( stream_d1.hasNext() ) {
                            // IbmSparqlExt.g:210:25: ^( DATASET ( $d1)* )
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(DATASET, "DATASET"), root_2);

                            // IbmSparqlExt.g:210:35: ( $d1)*
                            while ( stream_d1.hasNext() ) {
                                adaptor.addChild(root_2, stream_d1.nextTree());

                            }
                            stream_d1.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_d1.reset();
                        adaptor.addChild(root_1, stream_w1.nextTree());
                        adaptor.addChild(root_1, stream_s1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:211:8: ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier )
                    {
                    // IbmSparqlExt.g:211:8: ( (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier )
                    // IbmSparqlExt.g:211:9: (d2+= datasetClause )* WHERE_TOKEN OPEN_CURLY_BRACE (t= triplesTemplate )? CLOSE_CURLY_BRACE s2= solutionModifier
                    {
                    // IbmSparqlExt.g:211:11: (d2+= datasetClause )*
                    loop15:
                    do {
                        int alt15=2;
                        int LA15_0 = input.LA(1);

                        if ( (LA15_0==FROM) ) {
                            alt15=1;
                        }


                        switch (alt15) {
                    	case 1 :
                    	    // IbmSparqlExt.g:211:11: d2+= datasetClause
                    	    {
                    	    pushFollow(FOLLOW_datasetClause_in_constructQuery1251);
                    	    d2=datasetClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_datasetClause.add(d2.getTree());
                    	    if (list_d2==null) list_d2=new ArrayList();
                    	    list_d2.add(d2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop15;
                        }
                    } while (true);

                    WHERE_TOKEN20=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_constructQuery1254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE_TOKEN.add(WHERE_TOKEN20);

                    OPEN_CURLY_BRACE21=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_constructQuery1256); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE21);

                    // IbmSparqlExt.g:211:58: (t= triplesTemplate )?
                    int alt16=2;
                    int LA16_0 = input.LA(1);

                    if ( (LA16_0==IRI_REF||LA16_0==PNAME_NS||LA16_0==OPEN_BRACE||LA16_0==STRING_LITERAL2||LA16_0==INTEGER||LA16_0==OPEN_SQ_BRACKET||(LA16_0>=VAR1 && LA16_0<=VAR2)||(LA16_0>=DECIMAL && LA16_0<=BLANK_NODE_LABEL)) ) {
                        alt16=1;
                    }
                    switch (alt16) {
                        case 1 :
                            // IbmSparqlExt.g:211:58: t= triplesTemplate
                            {
                            pushFollow(FOLLOW_triplesTemplate_in_constructQuery1260);
                            t=triplesTemplate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_triplesTemplate.add(t.getTree());

                            }
                            break;

                    }

                    CLOSE_CURLY_BRACE22=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_constructQuery1263); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE22);

                    pushFollow(FOLLOW_solutionModifier_in_constructQuery1267);
                    s2=solutionModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_solutionModifier.add(s2.getTree());

                    }



                    // AST REWRITE
                    // elements: d2, t, CONSTRUCT, s2
                    // token labels: 
                    // rule labels: retval, s2, t
                    // token list labels: 
                    // rule list labels: d2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.tree:null);
                    RewriteRuleSubtreeStream stream_d2=new RewriteRuleSubtreeStream(adaptor,"token d2",list_d2);
                    root_0 = (XTree)adaptor.nil();
                    // 212:5: -> ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2)
                    {
                        // IbmSparqlExt.g:212:8: ^( CONSTRUCT ( ^( DATASET ( $d2)* ) )? ( ^( WHERE $t) )? $s2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_CONSTRUCT.nextNode(), root_1);

                        // IbmSparqlExt.g:212:21: ( ^( DATASET ( $d2)* ) )?
                        if ( stream_d2.hasNext() ) {
                            // IbmSparqlExt.g:212:21: ^( DATASET ( $d2)* )
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(DATASET, "DATASET"), root_2);

                            // IbmSparqlExt.g:212:31: ( $d2)*
                            while ( stream_d2.hasNext() ) {
                                adaptor.addChild(root_2, stream_d2.nextTree());

                            }
                            stream_d2.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_d2.reset();
                        // IbmSparqlExt.g:212:38: ( ^( WHERE $t) )?
                        if ( stream_t.hasNext() ) {
                            // IbmSparqlExt.g:212:39: ^( WHERE $t)
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(WHERE, "WHERE"), root_2);

                            adaptor.addChild(root_2, stream_t.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_t.reset();
                        adaptor.addChild(root_1, stream_s2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructQuery"

    public static class describeQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "describeQuery"
    // IbmSparqlExt.g:216:1: describeQuery : DESCRIBE ( (v+= varOrIRIref )+ | r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s) ;
    public final IbmSparqlExtParser.describeQuery_return describeQuery() throws RecognitionException {
        IbmSparqlExtParser.describeQuery_return retval = new IbmSparqlExtParser.describeQuery_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token r=null;
        Token DESCRIBE23=null;
        List list_v=null;
        IbmSparqlExtParser.datasetClause_return d = null;

        IbmSparqlExtParser.whereClause_return w = null;

        IbmSparqlExtParser.solutionModifier_return s = null;

        RuleReturnScope v = null;
        XTree r_tree=null;
        XTree DESCRIBE23_tree=null;
        RewriteRuleTokenStream stream_256=new RewriteRuleTokenStream(adaptor,"token 256");
        RewriteRuleTokenStream stream_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token DESCRIBE");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        RewriteRuleSubtreeStream stream_solutionModifier=new RewriteRuleSubtreeStream(adaptor,"rule solutionModifier");
        try {
            // IbmSparqlExt.g:217:2: ( DESCRIBE ( (v+= varOrIRIref )+ | r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s) )
            // IbmSparqlExt.g:217:6: DESCRIBE ( (v+= varOrIRIref )+ | r= '*' ) (d= datasetClause )* (w= whereClause )? s= solutionModifier
            {
            DESCRIBE23=(Token)match(input,DESCRIBE,FOLLOW_DESCRIBE_in_describeQuery1329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DESCRIBE.add(DESCRIBE23);

            // IbmSparqlExt.g:217:15: ( (v+= varOrIRIref )+ | r= '*' )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==IRI_REF||LA19_0==PNAME_NS||(LA19_0>=VAR1 && LA19_0<=VAR2)||LA19_0==PNAME_LN) ) {
                alt19=1;
            }
            else if ( (LA19_0==256) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // IbmSparqlExt.g:217:17: (v+= varOrIRIref )+
                    {
                    // IbmSparqlExt.g:217:18: (v+= varOrIRIref )+
                    int cnt18=0;
                    loop18:
                    do {
                        int alt18=2;
                        int LA18_0 = input.LA(1);

                        if ( (LA18_0==IRI_REF||LA18_0==PNAME_NS||(LA18_0>=VAR1 && LA18_0<=VAR2)||LA18_0==PNAME_LN) ) {
                            alt18=1;
                        }


                        switch (alt18) {
                    	case 1 :
                    	    // IbmSparqlExt.g:217:18: v+= varOrIRIref
                    	    {
                    	    pushFollow(FOLLOW_varOrIRIref_in_describeQuery1335);
                    	    v=varOrIRIref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());
                    	    if (list_v==null) list_v=new ArrayList();
                    	    list_v.add(v.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt18 >= 1 ) break loop18;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(18, input);
                                throw eee;
                        }
                        cnt18++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:217:35: r= '*'
                    {
                    r=(Token)match(input,256,FOLLOW_256_in_describeQuery1342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_256.add(r);


                    }
                    break;

            }

            // IbmSparqlExt.g:217:44: (d= datasetClause )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==FROM) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // IbmSparqlExt.g:217:44: d= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_describeQuery1348);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            // IbmSparqlExt.g:217:61: (w= whereClause )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==OPEN_CURLY_BRACE||LA21_0==WHERE_TOKEN) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // IbmSparqlExt.g:217:61: w= whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_describeQuery1353);
                    w=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_solutionModifier_in_describeQuery1358);
            s=solutionModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_solutionModifier.add(s.getTree());


            // AST REWRITE
            // elements: v, r, w, s, d, DESCRIBE
            // token labels: r
            // rule labels: w, retval, d, s
            // token list labels: 
            // rule list labels: v
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (XTree)adaptor.nil();
            // 219:3: -> ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s)
            {
                // IbmSparqlExt.g:219:7: ^( DESCRIBE ( $v)* ( $r)? ( $d)* ( $w)? $s)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_DESCRIBE.nextNode(), root_1);

                // IbmSparqlExt.g:219:20: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();
                // IbmSparqlExt.g:219:25: ( $r)?
                if ( stream_r.hasNext() ) {
                    adaptor.addChild(root_1, stream_r.nextNode());

                }
                stream_r.reset();
                // IbmSparqlExt.g:219:30: ( $d)*
                while ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();
                // IbmSparqlExt.g:219:35: ( $w)?
                if ( stream_w.hasNext() ) {
                    adaptor.addChild(root_1, stream_w.nextTree());

                }
                stream_w.reset();
                adaptor.addChild(root_1, stream_s.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "describeQuery"

    public static class askQuery_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "askQuery"
    // IbmSparqlExt.g:222:1: askQuery : ASK (d= datasetClause )* w= whereClause -> ^( ASK ( $d)* $w) ;
    public final IbmSparqlExtParser.askQuery_return askQuery() throws RecognitionException {
        IbmSparqlExtParser.askQuery_return retval = new IbmSparqlExtParser.askQuery_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token ASK24=null;
        IbmSparqlExtParser.datasetClause_return d = null;

        IbmSparqlExtParser.whereClause_return w = null;


        XTree ASK24_tree=null;
        RewriteRuleTokenStream stream_ASK=new RewriteRuleTokenStream(adaptor,"token ASK");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_datasetClause=new RewriteRuleSubtreeStream(adaptor,"rule datasetClause");
        try {
            // IbmSparqlExt.g:223:2: ( ASK (d= datasetClause )* w= whereClause -> ^( ASK ( $d)* $w) )
            // IbmSparqlExt.g:223:6: ASK (d= datasetClause )* w= whereClause
            {
            ASK24=(Token)match(input,ASK,FOLLOW_ASK_in_askQuery1412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASK.add(ASK24);

            // IbmSparqlExt.g:223:11: (d= datasetClause )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==FROM) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // IbmSparqlExt.g:223:11: d= datasetClause
            	    {
            	    pushFollow(FOLLOW_datasetClause_in_askQuery1416);
            	    d=datasetClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_datasetClause.add(d.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            pushFollow(FOLLOW_whereClause_in_askQuery1421);
            w=whereClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());


            // AST REWRITE
            // elements: ASK, d, w
            // token labels: 
            // rule labels: w, retval, d
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 225:3: -> ^( ASK ( $d)* $w)
            {
                // IbmSparqlExt.g:225:7: ^( ASK ( $d)* $w)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_ASK.nextNode(), root_1);

                // IbmSparqlExt.g:225:14: ( $d)*
                while ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_w.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "askQuery"

    public static class datasetClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "datasetClause"
    // IbmSparqlExt.g:228:1: datasetClause : FROM (d= defaultGraphClause | n= namedGraphClause ) -> ^( FROM ( $d)? ( ^( NAMED $n) )? ) ;
    public final IbmSparqlExtParser.datasetClause_return datasetClause() throws RecognitionException {
        IbmSparqlExtParser.datasetClause_return retval = new IbmSparqlExtParser.datasetClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token FROM25=null;
        IbmSparqlExtParser.defaultGraphClause_return d = null;

        IbmSparqlExtParser.namedGraphClause_return n = null;


        XTree FROM25_tree=null;
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleSubtreeStream stream_defaultGraphClause=new RewriteRuleSubtreeStream(adaptor,"rule defaultGraphClause");
        RewriteRuleSubtreeStream stream_namedGraphClause=new RewriteRuleSubtreeStream(adaptor,"rule namedGraphClause");
        try {
            // IbmSparqlExt.g:229:2: ( FROM (d= defaultGraphClause | n= namedGraphClause ) -> ^( FROM ( $d)? ( ^( NAMED $n) )? ) )
            // IbmSparqlExt.g:229:6: FROM (d= defaultGraphClause | n= namedGraphClause )
            {
            FROM25=(Token)match(input,FROM,FOLLOW_FROM_in_datasetClause1458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM25);

            // IbmSparqlExt.g:229:11: (d= defaultGraphClause | n= namedGraphClause )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==IRI_REF||LA23_0==PNAME_NS||LA23_0==PNAME_LN) ) {
                alt23=1;
            }
            else if ( (LA23_0==NAMED) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // IbmSparqlExt.g:229:13: d= defaultGraphClause
                    {
                    pushFollow(FOLLOW_defaultGraphClause_in_datasetClause1464);
                    d=defaultGraphClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defaultGraphClause.add(d.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:229:36: n= namedGraphClause
                    {
                    pushFollow(FOLLOW_namedGraphClause_in_datasetClause1470);
                    n=namedGraphClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_namedGraphClause.add(n.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: n, d, FROM
            // token labels: 
            // rule labels: retval, d, n
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 231:3: -> ^( FROM ( $d)? ( ^( NAMED $n) )? )
            {
                // IbmSparqlExt.g:231:7: ^( FROM ( $d)? ( ^( NAMED $n) )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_FROM.nextNode(), root_1);

                // IbmSparqlExt.g:231:15: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextTree());

                }
                stream_d.reset();
                // IbmSparqlExt.g:231:19: ( ^( NAMED $n) )?
                if ( stream_n.hasNext() ) {
                    // IbmSparqlExt.g:231:19: ^( NAMED $n)
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(NAMED, "NAMED"), root_2);

                    adaptor.addChild(root_2, stream_n.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_n.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "datasetClause"

    public static class defaultGraphClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultGraphClause"
    // IbmSparqlExt.g:234:1: defaultGraphClause : sourceSelector ;
    public final IbmSparqlExtParser.defaultGraphClause_return defaultGraphClause() throws RecognitionException {
        IbmSparqlExtParser.defaultGraphClause_return retval = new IbmSparqlExtParser.defaultGraphClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.sourceSelector_return sourceSelector26 = null;



        try {
            // IbmSparqlExt.g:235:2: ( sourceSelector )
            // IbmSparqlExt.g:235:6: sourceSelector
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_sourceSelector_in_defaultGraphClause1514);
            sourceSelector26=sourceSelector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sourceSelector26.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "defaultGraphClause"

    public static class namedGraphClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namedGraphClause"
    // IbmSparqlExt.g:238:1: namedGraphClause : NAMED s= sourceSelector -> $s;
    public final IbmSparqlExtParser.namedGraphClause_return namedGraphClause() throws RecognitionException {
        IbmSparqlExtParser.namedGraphClause_return retval = new IbmSparqlExtParser.namedGraphClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token NAMED27=null;
        IbmSparqlExtParser.sourceSelector_return s = null;


        XTree NAMED27_tree=null;
        RewriteRuleTokenStream stream_NAMED=new RewriteRuleTokenStream(adaptor,"token NAMED");
        RewriteRuleSubtreeStream stream_sourceSelector=new RewriteRuleSubtreeStream(adaptor,"rule sourceSelector");
        try {
            // IbmSparqlExt.g:239:2: ( NAMED s= sourceSelector -> $s)
            // IbmSparqlExt.g:239:6: NAMED s= sourceSelector
            {
            NAMED27=(Token)match(input,NAMED,FOLLOW_NAMED_in_namedGraphClause1531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMED.add(NAMED27);

            pushFollow(FOLLOW_sourceSelector_in_namedGraphClause1535);
            s=sourceSelector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sourceSelector.add(s.getTree());


            // AST REWRITE
            // elements: s
            // token labels: 
            // rule labels: retval, s
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 239:30: -> $s
            {
                adaptor.addChild(root_0, stream_s.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "namedGraphClause"

    public static class sourceSelector_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sourceSelector"
    // IbmSparqlExt.g:242:1: sourceSelector : iRIref ;
    public final IbmSparqlExtParser.sourceSelector_return sourceSelector() throws RecognitionException {
        IbmSparqlExtParser.sourceSelector_return retval = new IbmSparqlExtParser.sourceSelector_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.iRIref_return iRIref28 = null;



        try {
            // IbmSparqlExt.g:243:2: ( iRIref )
            // IbmSparqlExt.g:243:6: iRIref
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_iRIref_in_sourceSelector1558);
            iRIref28=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref28.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "sourceSelector"

    public static class whereClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // IbmSparqlExt.g:246:1: whereClause : ( WHERE_TOKEN )? groupGraphPattern -> ^( WHERE groupGraphPattern ) ;
    public final IbmSparqlExtParser.whereClause_return whereClause() throws RecognitionException {
        IbmSparqlExtParser.whereClause_return retval = new IbmSparqlExtParser.whereClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token WHERE_TOKEN29=null;
        IbmSparqlExtParser.groupGraphPattern_return groupGraphPattern30 = null;


        XTree WHERE_TOKEN29_tree=null;
        RewriteRuleTokenStream stream_WHERE_TOKEN=new RewriteRuleTokenStream(adaptor,"token WHERE_TOKEN");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparqlExt.g:247:2: ( ( WHERE_TOKEN )? groupGraphPattern -> ^( WHERE groupGraphPattern ) )
            // IbmSparqlExt.g:247:6: ( WHERE_TOKEN )? groupGraphPattern
            {
            // IbmSparqlExt.g:247:6: ( WHERE_TOKEN )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==WHERE_TOKEN) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // IbmSparqlExt.g:247:6: WHERE_TOKEN
                    {
                    WHERE_TOKEN29=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_whereClause1575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE_TOKEN.add(WHERE_TOKEN29);


                    }
                    break;

            }

            pushFollow(FOLLOW_groupGraphPattern_in_whereClause1578);
            groupGraphPattern30=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(groupGraphPattern30.getTree());


            // AST REWRITE
            // elements: groupGraphPattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 249:3: -> ^( WHERE groupGraphPattern )
            {
                // IbmSparqlExt.g:249:7: ^( WHERE groupGraphPattern )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(WHERE, "WHERE"), root_1);

                adaptor.addChild(root_1, stream_groupGraphPattern.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class solutionModifier_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "solutionModifier"
    // IbmSparqlExt.g:252:1: solutionModifier : (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )? -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? ) ;
    public final IbmSparqlExtParser.solutionModifier_return solutionModifier() throws RecognitionException {
        IbmSparqlExtParser.solutionModifier_return retval = new IbmSparqlExtParser.solutionModifier_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.groupClause_return g = null;

        IbmSparqlExtParser.havingClause_return h = null;

        IbmSparqlExtParser.orderClause_return o = null;

        IbmSparqlExtParser.limitOffsetClauses_return l = null;


        RewriteRuleSubtreeStream stream_limitOffsetClauses=new RewriteRuleSubtreeStream(adaptor,"rule limitOffsetClauses");
        RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
        RewriteRuleSubtreeStream stream_groupClause=new RewriteRuleSubtreeStream(adaptor,"rule groupClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        try {
            // IbmSparqlExt.g:253:2: ( (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )? -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? ) )
            // IbmSparqlExt.g:253:6: (g= groupClause )? (h= havingClause )? (o= orderClause )? (l= limitOffsetClauses )?
            {
            // IbmSparqlExt.g:253:7: (g= groupClause )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==GROUP) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // IbmSparqlExt.g:253:7: g= groupClause
                    {
                    pushFollow(FOLLOW_groupClause_in_solutionModifier1612);
                    g=groupClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupClause.add(g.getTree());

                    }
                    break;

            }

            // IbmSparqlExt.g:253:22: (h= havingClause )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==HAVING) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // IbmSparqlExt.g:253:22: h= havingClause
                    {
                    pushFollow(FOLLOW_havingClause_in_solutionModifier1617);
                    h=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(h.getTree());

                    }
                    break;

            }

            // IbmSparqlExt.g:253:38: (o= orderClause )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==ORDER) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // IbmSparqlExt.g:253:38: o= orderClause
                    {
                    pushFollow(FOLLOW_orderClause_in_solutionModifier1622);
                    o=orderClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderClause.add(o.getTree());

                    }
                    break;

            }

            // IbmSparqlExt.g:253:53: (l= limitOffsetClauses )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==LIMIT||LA28_0==OFFSET) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // IbmSparqlExt.g:253:53: l= limitOffsetClauses
                    {
                    pushFollow(FOLLOW_limitOffsetClauses_in_solutionModifier1627);
                    l=limitOffsetClauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_limitOffsetClauses.add(l.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: l, o, g, h
            // token labels: 
            // rule labels: g, retval, o, l, h
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.tree:null);
            RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.tree:null);
            RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 254:3: -> ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? )
            {
                // IbmSparqlExt.g:254:6: ^( MODIFIERS ( $g)? ( $h)? ( $o)? ( $l)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(MODIFIERS, "MODIFIERS"), root_1);

                // IbmSparqlExt.g:254:18: ( $g)?
                if ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();
                // IbmSparqlExt.g:254:22: ( $h)?
                if ( stream_h.hasNext() ) {
                    adaptor.addChild(root_1, stream_h.nextTree());

                }
                stream_h.reset();
                // IbmSparqlExt.g:254:26: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextTree());

                }
                stream_o.reset();
                // IbmSparqlExt.g:254:30: ( $l)?
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_1, stream_l.nextTree());

                }
                stream_l.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "solutionModifier"

    public static class groupClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupClause"
    // IbmSparqlExt.g:257:1: groupClause : GROUP BY (g+= groupCondition )+ -> ^( GROUP_BY ( $g)+ ) ;
    public final IbmSparqlExtParser.groupClause_return groupClause() throws RecognitionException {
        IbmSparqlExtParser.groupClause_return retval = new IbmSparqlExtParser.groupClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token GROUP31=null;
        Token BY32=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree GROUP31_tree=null;
        XTree BY32_tree=null;
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleSubtreeStream stream_groupCondition=new RewriteRuleSubtreeStream(adaptor,"rule groupCondition");
        try {
            // IbmSparqlExt.g:258:2: ( GROUP BY (g+= groupCondition )+ -> ^( GROUP_BY ( $g)+ ) )
            // IbmSparqlExt.g:258:6: GROUP BY (g+= groupCondition )+
            {
            GROUP31=(Token)match(input,GROUP,FOLLOW_GROUP_in_groupClause1669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GROUP.add(GROUP31);

            BY32=(Token)match(input,BY,FOLLOW_BY_in_groupClause1671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY32);

            // IbmSparqlExt.g:258:16: (g+= groupCondition )+
            int cnt29=0;
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==IRI_REF||LA29_0==PNAME_NS||LA29_0==OPEN_BRACE||(LA29_0>=VAR1 && LA29_0<=VAR2)||(LA29_0>=NOT && LA29_0<=EXISTS)||LA29_0==PNAME_LN) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // IbmSparqlExt.g:258:16: g+= groupCondition
            	    {
            	    pushFollow(FOLLOW_groupCondition_in_groupClause1675);
            	    g=groupCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_groupCondition.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        throw eee;
                }
                cnt29++;
            } while (true);



            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 260:3: -> ^( GROUP_BY ( $g)+ )
            {
                // IbmSparqlExt.g:260:7: ^( GROUP_BY ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(GROUP_BY, "GROUP_BY"), root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupClause"

    public static class groupCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupCondition"
    // IbmSparqlExt.g:263:1: groupCondition : ( builtInCall | functionCall | OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE -> ^( CONDITION $e ( $v)? ) | var );
    public final IbmSparqlExtParser.groupCondition_return groupCondition() throws RecognitionException {
        IbmSparqlExtParser.groupCondition_return retval = new IbmSparqlExtParser.groupCondition_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE35=null;
        Token AS36=null;
        Token CLOSE_BRACE37=null;
        IbmSparqlExtParser.expression_return e = null;

        IbmSparqlExtParser.var_return v = null;

        IbmSparqlExtParser.builtInCall_return builtInCall33 = null;

        IbmSparqlExtParser.functionCall_return functionCall34 = null;

        IbmSparqlExtParser.var_return var38 = null;


        XTree OPEN_BRACE35_tree=null;
        XTree AS36_tree=null;
        XTree CLOSE_BRACE37_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // IbmSparqlExt.g:264:2: ( builtInCall | functionCall | OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE -> ^( CONDITION $e ( $v)? ) | var )
            int alt31=4;
            switch ( input.LA(1) ) {
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case UUID:
            case STRUUID:
            case MD5:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
                {
                alt31=1;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt31=2;
                }
                break;
            case OPEN_BRACE:
                {
                alt31=3;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt31=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // IbmSparqlExt.g:264:6: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_builtInCall_in_groupCondition1710);
                    builtInCall33=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall33.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:265:6: functionCall
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_functionCall_in_groupCondition1718);
                    functionCall34=functionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCall34.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:266:6: OPEN_BRACE e= expression ( AS v= var )? CLOSE_BRACE
                    {
                    OPEN_BRACE35=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_groupCondition1726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE35);

                    pushFollow(FOLLOW_expression_in_groupCondition1730);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e.getTree());
                    // IbmSparqlExt.g:266:30: ( AS v= var )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==AS) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // IbmSparqlExt.g:266:32: AS v= var
                            {
                            AS36=(Token)match(input,AS,FOLLOW_AS_in_groupCondition1734); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS36);

                            pushFollow(FOLLOW_var_in_groupCondition1738);
                            v=var();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_var.add(v.getTree());

                            }
                            break;

                    }

                    CLOSE_BRACE37=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_groupCondition1743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE37);



                    // AST REWRITE
                    // elements: v, e
                    // token labels: 
                    // rule labels: v, retval, e
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 266:58: -> ^( CONDITION $e ( $v)? )
                    {
                        // IbmSparqlExt.g:266:62: ^( CONDITION $e ( $v)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(CONDITION, "CONDITION"), root_1);

                        adaptor.addChild(root_1, stream_e.nextTree());
                        // IbmSparqlExt.g:266:80: ( $v)?
                        if ( stream_v.hasNext() ) {
                            adaptor.addChild(root_1, stream_v.nextTree());

                        }
                        stream_v.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:267:6: var
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_var_in_groupCondition1770);
                    var38=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var38.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupCondition"

    public static class havingClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // IbmSparqlExt.g:270:1: havingClause : HAVING (h+= havingCondition )+ -> ^( HAVING ( $h)+ ) ;
    public final IbmSparqlExtParser.havingClause_return havingClause() throws RecognitionException {
        IbmSparqlExtParser.havingClause_return retval = new IbmSparqlExtParser.havingClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token HAVING39=null;
        List list_h=null;
        RuleReturnScope h = null;
        XTree HAVING39_tree=null;
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleSubtreeStream stream_havingCondition=new RewriteRuleSubtreeStream(adaptor,"rule havingCondition");
        try {
            // IbmSparqlExt.g:271:2: ( HAVING (h+= havingCondition )+ -> ^( HAVING ( $h)+ ) )
            // IbmSparqlExt.g:271:6: HAVING (h+= havingCondition )+
            {
            HAVING39=(Token)match(input,HAVING,FOLLOW_HAVING_in_havingClause1787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_HAVING.add(HAVING39);

            // IbmSparqlExt.g:271:14: (h+= havingCondition )+
            int cnt32=0;
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==IRI_REF||LA32_0==PNAME_NS||LA32_0==OPEN_BRACE||(LA32_0>=NOT && LA32_0<=EXISTS)||LA32_0==PNAME_LN) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // IbmSparqlExt.g:271:14: h+= havingCondition
            	    {
            	    pushFollow(FOLLOW_havingCondition_in_havingClause1791);
            	    h=havingCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_havingCondition.add(h.getTree());
            	    if (list_h==null) list_h=new ArrayList();
            	    list_h.add(h.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt32 >= 1 ) break loop32;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(32, input);
                        throw eee;
                }
                cnt32++;
            } while (true);



            // AST REWRITE
            // elements: h, HAVING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: h
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"token h",list_h);
            root_0 = (XTree)adaptor.nil();
            // 273:3: -> ^( HAVING ( $h)+ )
            {
                // IbmSparqlExt.g:273:7: ^( HAVING ( $h)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_HAVING.nextNode(), root_1);

                if ( !(stream_h.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_h.hasNext() ) {
                    adaptor.addChild(root_1, stream_h.nextTree());

                }
                stream_h.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class havingCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingCondition"
    // IbmSparqlExt.g:276:1: havingCondition : constraint ;
    public final IbmSparqlExtParser.havingCondition_return havingCondition() throws RecognitionException {
        IbmSparqlExtParser.havingCondition_return retval = new IbmSparqlExtParser.havingCondition_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.constraint_return constraint40 = null;



        try {
            // IbmSparqlExt.g:277:2: ( constraint )
            // IbmSparqlExt.g:277:6: constraint
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_constraint_in_havingCondition1828);
            constraint40=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint40.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingCondition"

    public static class orderClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderClause"
    // IbmSparqlExt.g:280:1: orderClause : ORDER BY (o+= orderCondition )+ -> ^( ORDER_BY ( $o)+ ) ;
    public final IbmSparqlExtParser.orderClause_return orderClause() throws RecognitionException {
        IbmSparqlExtParser.orderClause_return retval = new IbmSparqlExtParser.orderClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token ORDER41=null;
        Token BY42=null;
        List list_o=null;
        RuleReturnScope o = null;
        XTree ORDER41_tree=null;
        XTree BY42_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleSubtreeStream stream_orderCondition=new RewriteRuleSubtreeStream(adaptor,"rule orderCondition");
        try {
            // IbmSparqlExt.g:281:2: ( ORDER BY (o+= orderCondition )+ -> ^( ORDER_BY ( $o)+ ) )
            // IbmSparqlExt.g:281:6: ORDER BY (o+= orderCondition )+
            {
            ORDER41=(Token)match(input,ORDER,FOLLOW_ORDER_in_orderClause1845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ORDER.add(ORDER41);

            BY42=(Token)match(input,BY,FOLLOW_BY_in_orderClause1847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY42);

            // IbmSparqlExt.g:281:16: (o+= orderCondition )+
            int cnt33=0;
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==IRI_REF||LA33_0==PNAME_NS||LA33_0==OPEN_BRACE||(LA33_0>=ASC && LA33_0<=DESC)||(LA33_0>=VAR1 && LA33_0<=VAR2)||(LA33_0>=NOT && LA33_0<=EXISTS)||LA33_0==PNAME_LN) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // IbmSparqlExt.g:281:16: o+= orderCondition
            	    {
            	    pushFollow(FOLLOW_orderCondition_in_orderClause1851);
            	    o=orderCondition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderCondition.add(o.getTree());
            	    if (list_o==null) list_o=new ArrayList();
            	    list_o.add(o.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt33 >= 1 ) break loop33;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(33, input);
                        throw eee;
                }
                cnt33++;
            } while (true);



            // AST REWRITE
            // elements: o
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: o
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"token o",list_o);
            root_0 = (XTree)adaptor.nil();
            // 283:3: -> ^( ORDER_BY ( $o)+ )
            {
                // IbmSparqlExt.g:283:7: ^( ORDER_BY ( $o)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(ORDER_BY, "ORDER_BY"), root_1);

                if ( !(stream_o.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextTree());

                }
                stream_o.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderClause"

    public static class orderCondition_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderCondition"
    // IbmSparqlExt.g:286:1: orderCondition : ( ( ( ASC | DESC ) brackettedExpression ) | constraint | var );
    public final IbmSparqlExtParser.orderCondition_return orderCondition() throws RecognitionException {
        IbmSparqlExtParser.orderCondition_return retval = new IbmSparqlExtParser.orderCondition_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token ASC43=null;
        Token DESC44=null;
        IbmSparqlExtParser.brackettedExpression_return brackettedExpression45 = null;

        IbmSparqlExtParser.constraint_return constraint46 = null;

        IbmSparqlExtParser.var_return var47 = null;


        XTree ASC43_tree=null;
        XTree DESC44_tree=null;

        try {
            // IbmSparqlExt.g:287:2: ( ( ( ASC | DESC ) brackettedExpression ) | constraint | var )
            int alt35=3;
            switch ( input.LA(1) ) {
            case ASC:
            case DESC:
                {
                alt35=1;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case OPEN_BRACE:
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case UUID:
            case STRUUID:
            case MD5:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
            case PNAME_LN:
                {
                alt35=2;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt35=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // IbmSparqlExt.g:287:4: ( ( ASC | DESC ) brackettedExpression )
                    {
                    root_0 = (XTree)adaptor.nil();

                    // IbmSparqlExt.g:287:4: ( ( ASC | DESC ) brackettedExpression )
                    // IbmSparqlExt.g:287:6: ( ASC | DESC ) brackettedExpression
                    {
                    // IbmSparqlExt.g:287:6: ( ASC | DESC )
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==ASC) ) {
                        alt34=1;
                    }
                    else if ( (LA34_0==DESC) ) {
                        alt34=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 34, 0, input);

                        throw nvae;
                    }
                    switch (alt34) {
                        case 1 :
                            // IbmSparqlExt.g:287:8: ASC
                            {
                            ASC43=(Token)match(input,ASC,FOLLOW_ASC_in_orderCondition1887); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASC43_tree = (XTree)adaptor.create(ASC43);
                            root_0 = (XTree)adaptor.becomeRoot(ASC43_tree, root_0);
                            }

                            }
                            break;
                        case 2 :
                            // IbmSparqlExt.g:287:15: DESC
                            {
                            DESC44=(Token)match(input,DESC,FOLLOW_DESC_in_orderCondition1892); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DESC44_tree = (XTree)adaptor.create(DESC44);
                            root_0 = (XTree)adaptor.becomeRoot(DESC44_tree, root_0);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_brackettedExpression_in_orderCondition1897);
                    brackettedExpression45=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression45.getTree());

                    }


                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:288:4: constraint
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_constraint_in_orderCondition1904);
                    constraint46=constraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint46.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:289:7: var
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_var_in_orderCondition1913);
                    var47=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var47.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderCondition"

    public static class limitOffsetClauses_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "limitOffsetClauses"
    // IbmSparqlExt.g:292:1: limitOffsetClauses : ( limitClause ( offsetClause )? | offsetClause ( limitClause )? );
    public final IbmSparqlExtParser.limitOffsetClauses_return limitOffsetClauses() throws RecognitionException {
        IbmSparqlExtParser.limitOffsetClauses_return retval = new IbmSparqlExtParser.limitOffsetClauses_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.limitClause_return limitClause48 = null;

        IbmSparqlExtParser.offsetClause_return offsetClause49 = null;

        IbmSparqlExtParser.offsetClause_return offsetClause50 = null;

        IbmSparqlExtParser.limitClause_return limitClause51 = null;



        try {
            // IbmSparqlExt.g:293:2: ( limitClause ( offsetClause )? | offsetClause ( limitClause )? )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==LIMIT) ) {
                alt38=1;
            }
            else if ( (LA38_0==OFFSET) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // IbmSparqlExt.g:293:6: limitClause ( offsetClause )?
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_limitClause_in_limitOffsetClauses1930);
                    limitClause48=limitClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limitClause48.getTree());
                    // IbmSparqlExt.g:293:18: ( offsetClause )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==OFFSET) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // IbmSparqlExt.g:293:18: offsetClause
                            {
                            pushFollow(FOLLOW_offsetClause_in_limitOffsetClauses1932);
                            offsetClause49=offsetClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, offsetClause49.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:293:34: offsetClause ( limitClause )?
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_offsetClause_in_limitOffsetClauses1937);
                    offsetClause50=offsetClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, offsetClause50.getTree());
                    // IbmSparqlExt.g:293:47: ( limitClause )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==LIMIT) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // IbmSparqlExt.g:293:47: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_limitOffsetClauses1939);
                            limitClause51=limitClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, limitClause51.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "limitOffsetClauses"

    public static class limitClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "limitClause"
    // IbmSparqlExt.g:296:1: limitClause : LIMIT i= INTEGER -> ^( LIMIT $i) ;
    public final IbmSparqlExtParser.limitClause_return limitClause() throws RecognitionException {
        IbmSparqlExtParser.limitClause_return retval = new IbmSparqlExtParser.limitClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token i=null;
        Token LIMIT52=null;

        XTree i_tree=null;
        XTree LIMIT52_tree=null;
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
        RewriteRuleTokenStream stream_LIMIT=new RewriteRuleTokenStream(adaptor,"token LIMIT");

        try {
            // IbmSparqlExt.g:297:2: ( LIMIT i= INTEGER -> ^( LIMIT $i) )
            // IbmSparqlExt.g:297:6: LIMIT i= INTEGER
            {
            LIMIT52=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limitClause1957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LIMIT.add(LIMIT52);

            i=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_limitClause1961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTEGER.add(i);



            // AST REWRITE
            // elements: i, LIMIT
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 297:24: -> ^( LIMIT $i)
            {
                // IbmSparqlExt.g:297:28: ^( LIMIT $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_LIMIT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "limitClause"

    public static class offsetClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "offsetClause"
    // IbmSparqlExt.g:300:1: offsetClause : OFFSET i= INTEGER -> ^( OFFSET $i) ;
    public final IbmSparqlExtParser.offsetClause_return offsetClause() throws RecognitionException {
        IbmSparqlExtParser.offsetClause_return retval = new IbmSparqlExtParser.offsetClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token i=null;
        Token OFFSET53=null;

        XTree i_tree=null;
        XTree OFFSET53_tree=null;
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");

        try {
            // IbmSparqlExt.g:301:2: ( OFFSET i= INTEGER -> ^( OFFSET $i) )
            // IbmSparqlExt.g:301:6: OFFSET i= INTEGER
            {
            OFFSET53=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_offsetClause1993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OFFSET.add(OFFSET53);

            i=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_offsetClause1997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTEGER.add(i);



            // AST REWRITE
            // elements: OFFSET, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 301:24: -> ^( OFFSET $i)
            {
                // IbmSparqlExt.g:301:28: ^( OFFSET $i)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_OFFSET.nextNode(), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "offsetClause"

    public static class bindingsClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bindingsClause"
    // IbmSparqlExt.g:304:1: bindingsClause : ( BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) ) | inlineData );
    public final IbmSparqlExtParser.bindingsClause_return bindingsClause() throws RecognitionException {
        IbmSparqlExtParser.bindingsClause_return retval = new IbmSparqlExtParser.bindingsClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token BINDINGS54=null;
        Token OPEN_CURLY_BRACE55=null;
        Token OPEN_BRACE56=null;
        Token CLOSE_BRACE57=null;
        Token CLOSE_CURLY_BRACE59=null;
        List list_v=null;
        List list_bv=null;
        IbmSparqlExtParser.nil_return nil58 = null;

        IbmSparqlExtParser.inlineData_return inlineData60 = null;

        RuleReturnScope v = null;
        RuleReturnScope bv = null;
        XTree BINDINGS54_tree=null;
        XTree OPEN_CURLY_BRACE55_tree=null;
        XTree OPEN_BRACE56_tree=null;
        XTree CLOSE_BRACE57_tree=null;
        XTree CLOSE_CURLY_BRACE59_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_BINDINGS=new RewriteRuleTokenStream(adaptor,"token BINDINGS");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_bindingValue=new RewriteRuleSubtreeStream(adaptor,"rule bindingValue");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try {
            // IbmSparqlExt.g:305:2: ( BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) ) | inlineData )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==BINDINGS) ) {
                alt42=1;
            }
            else if ( (LA42_0==VALUES) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // IbmSparqlExt.g:305:6: BINDINGS (v+= var )* OPEN_CURLY_BRACE ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )* CLOSE_CURLY_BRACE
                    {
                    BINDINGS54=(Token)match(input,BINDINGS,FOLLOW_BINDINGS_in_bindingsClause2028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BINDINGS.add(BINDINGS54);

                    // IbmSparqlExt.g:305:16: (v+= var )*
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( ((LA39_0>=VAR1 && LA39_0<=VAR2)) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // IbmSparqlExt.g:305:16: v+= var
                    	    {
                    	    pushFollow(FOLLOW_var_in_bindingsClause2032);
                    	    v=var();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
                    	    if (list_v==null) list_v=new ArrayList();
                    	    list_v.add(v.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    OPEN_CURLY_BRACE55=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_bindingsClause2035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE55);

                    // IbmSparqlExt.g:305:40: ( OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE | nil )*
                    loop41:
                    do {
                        int alt41=3;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==OPEN_BRACE) ) {
                            int LA41_2 = input.LA(2);

                            if ( (LA41_2==CLOSE_BRACE) ) {
                                alt41=2;
                            }
                            else if ( (LA41_2==IRI_REF||LA41_2==PNAME_NS||LA41_2==STRING_LITERAL2||LA41_2==INTEGER||LA41_2==UNDEF||(LA41_2>=DECIMAL && LA41_2<=PNAME_LN)) ) {
                                alt41=1;
                            }


                        }


                        switch (alt41) {
                    	case 1 :
                    	    // IbmSparqlExt.g:305:42: OPEN_BRACE (bv+= bindingValue )+ CLOSE_BRACE
                    	    {
                    	    OPEN_BRACE56=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bindingsClause2039); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE56);

                    	    // IbmSparqlExt.g:305:55: (bv+= bindingValue )+
                    	    int cnt40=0;
                    	    loop40:
                    	    do {
                    	        int alt40=2;
                    	        int LA40_0 = input.LA(1);

                    	        if ( (LA40_0==IRI_REF||LA40_0==PNAME_NS||LA40_0==STRING_LITERAL2||LA40_0==INTEGER||LA40_0==UNDEF||(LA40_0>=DECIMAL && LA40_0<=PNAME_LN)) ) {
                    	            alt40=1;
                    	        }


                    	        switch (alt40) {
                    	    	case 1 :
                    	    	    // IbmSparqlExt.g:305:55: bv+= bindingValue
                    	    	    {
                    	    	    pushFollow(FOLLOW_bindingValue_in_bindingsClause2043);
                    	    	    bv=bindingValue();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) stream_bindingValue.add(bv.getTree());
                    	    	    if (list_bv==null) list_bv=new ArrayList();
                    	    	    list_bv.add(bv.getTree());


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt40 >= 1 ) break loop40;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(40, input);
                    	                throw eee;
                    	        }
                    	        cnt40++;
                    	    } while (true);

                    	    CLOSE_BRACE57=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bindingsClause2046); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE57);


                    	    }
                    	    break;
                    	case 2 :
                    	    // IbmSparqlExt.g:305:85: nil
                    	    {
                    	    pushFollow(FOLLOW_nil_in_bindingsClause2050);
                    	    nil58=nil();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_nil.add(nil58.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);

                    CLOSE_CURLY_BRACE59=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_bindingsClause2055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE59);



                    // AST REWRITE
                    // elements: nil, BINDINGS, v, bv
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: v, bv
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
                    RewriteRuleSubtreeStream stream_bv=new RewriteRuleSubtreeStream(adaptor,"token bv",list_bv);
                    root_0 = (XTree)adaptor.nil();
                    // 307:3: -> ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) )
                    {
                        // IbmSparqlExt.g:307:7: ^( BINDINGS ( $v)* ^( BIND_VALUES ( $bv)* ( nil )? ) )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_BINDINGS.nextNode(), root_1);

                        // IbmSparqlExt.g:307:20: ( $v)*
                        while ( stream_v.hasNext() ) {
                            adaptor.addChild(root_1, stream_v.nextTree());

                        }
                        stream_v.reset();
                        // IbmSparqlExt.g:307:25: ^( BIND_VALUES ( $bv)* ( nil )? )
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIND_VALUES, "BIND_VALUES"), root_2);

                        // IbmSparqlExt.g:307:39: ( $bv)*
                        while ( stream_bv.hasNext() ) {
                            adaptor.addChild(root_2, stream_bv.nextTree());

                        }
                        stream_bv.reset();
                        // IbmSparqlExt.g:307:44: ( nil )?
                        if ( stream_nil.hasNext() ) {
                            adaptor.addChild(root_2, stream_nil.nextTree());

                        }
                        stream_nil.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:308:9: inlineData
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_inlineData_in_bindingsClause2095);
                    inlineData60=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineData60.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "bindingsClause"

    public static class bindingValue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bindingValue"
    // IbmSparqlExt.g:311:1: bindingValue : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF ) ;
    public final IbmSparqlExtParser.bindingValue_return bindingValue() throws RecognitionException {
        IbmSparqlExtParser.bindingValue_return retval = new IbmSparqlExtParser.bindingValue_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token UNDEF65=null;
        IbmSparqlExtParser.iRIref_return iRIref61 = null;

        IbmSparqlExtParser.rDFLiteral_return rDFLiteral62 = null;

        IbmSparqlExtParser.numericLiteral_return numericLiteral63 = null;

        IbmSparqlExtParser.booleanLiteral_return booleanLiteral64 = null;


        XTree UNDEF65_tree=null;

        try {
            // IbmSparqlExt.g:312:2: ( ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF ) )
            // IbmSparqlExt.g:312:6: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            {
            root_0 = (XTree)adaptor.nil();

            // IbmSparqlExt.g:312:6: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            int alt43=5;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt43=1;
                }
                break;
            case STRING_LITERAL2:
            case STRING_LITERAL1:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt43=2;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt43=3;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt43=4;
                }
                break;
            case UNDEF:
                {
                alt43=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // IbmSparqlExt.g:312:8: iRIref
                    {
                    pushFollow(FOLLOW_iRIref_in_bindingValue2114);
                    iRIref61=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref61.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:312:17: rDFLiteral
                    {
                    pushFollow(FOLLOW_rDFLiteral_in_bindingValue2118);
                    rDFLiteral62=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral62.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:312:30: numericLiteral
                    {
                    pushFollow(FOLLOW_numericLiteral_in_bindingValue2122);
                    numericLiteral63=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral63.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:312:47: booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_bindingValue2126);
                    booleanLiteral64=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral64.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparqlExt.g:312:64: UNDEF
                    {
                    UNDEF65=(Token)match(input,UNDEF,FOLLOW_UNDEF_in_bindingValue2130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDEF65_tree = (XTree)adaptor.create(UNDEF65);
                    adaptor.addChild(root_0, UNDEF65_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "bindingValue"

    public static class update_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update"
    // IbmSparqlExt.g:315:1: update : prologue ( update1 ( SEMICOLON update )? )? ;
    public final IbmSparqlExtParser.update_return update() throws RecognitionException {
        IbmSparqlExtParser.update_return retval = new IbmSparqlExtParser.update_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token SEMICOLON68=null;
        IbmSparqlExtParser.prologue_return prologue66 = null;

        IbmSparqlExtParser.update1_return update167 = null;

        IbmSparqlExtParser.update_return update69 = null;


        XTree SEMICOLON68_tree=null;

        try {
            // IbmSparqlExt.g:316:2: ( prologue ( update1 ( SEMICOLON update )? )? )
            // IbmSparqlExt.g:316:6: prologue ( update1 ( SEMICOLON update )? )?
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_prologue_in_update2149);
            prologue66=prologue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, prologue66.getTree());
            // IbmSparqlExt.g:316:15: ( update1 ( SEMICOLON update )? )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==LOAD||(LA45_0>=CLEAR && LA45_0<=ADD)||(LA45_0>=MOVE && LA45_0<=INSERT)||(LA45_0>=DELETE && LA45_0<=WITH)) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // IbmSparqlExt.g:316:17: update1 ( SEMICOLON update )?
                    {
                    pushFollow(FOLLOW_update1_in_update2153);
                    update167=update1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update167.getTree());
                    // IbmSparqlExt.g:316:25: ( SEMICOLON update )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==SEMICOLON) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // IbmSparqlExt.g:316:27: SEMICOLON update
                            {
                            SEMICOLON68=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_update2157); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON68_tree = (XTree)adaptor.create(SEMICOLON68);
                            adaptor.addChild(root_0, SEMICOLON68_tree);
                            }
                            pushFollow(FOLLOW_update_in_update2159);
                            update69=update();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, update69.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "update"

    public static class update1_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update1"
    // IbmSparqlExt.g:319:1: update1 : ( load | clear | drop | add | move | copy | create | insertData | deleteData | deleteWhere | modify );
    public final IbmSparqlExtParser.update1_return update1() throws RecognitionException {
        IbmSparqlExtParser.update1_return retval = new IbmSparqlExtParser.update1_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.load_return load70 = null;

        IbmSparqlExtParser.clear_return clear71 = null;

        IbmSparqlExtParser.drop_return drop72 = null;

        IbmSparqlExtParser.add_return add73 = null;

        IbmSparqlExtParser.move_return move74 = null;

        IbmSparqlExtParser.copy_return copy75 = null;

        IbmSparqlExtParser.create_return create76 = null;

        IbmSparqlExtParser.insertData_return insertData77 = null;

        IbmSparqlExtParser.deleteData_return deleteData78 = null;

        IbmSparqlExtParser.deleteWhere_return deleteWhere79 = null;

        IbmSparqlExtParser.modify_return modify80 = null;



        try {
            // IbmSparqlExt.g:320:2: ( load | clear | drop | add | move | copy | create | insertData | deleteData | deleteWhere | modify )
            int alt46=11;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // IbmSparqlExt.g:320:6: load
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_load_in_update12182);
                    load70=load();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, load70.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:320:13: clear
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_clear_in_update12186);
                    clear71=clear();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clear71.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:320:21: drop
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_drop_in_update12190);
                    drop72=drop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop72.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:320:28: add
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_add_in_update12194);
                    add73=add();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, add73.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparqlExt.g:320:34: move
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_move_in_update12198);
                    move74=move();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, move74.getTree());

                    }
                    break;
                case 6 :
                    // IbmSparqlExt.g:320:41: copy
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_copy_in_update12202);
                    copy75=copy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, copy75.getTree());

                    }
                    break;
                case 7 :
                    // IbmSparqlExt.g:320:48: create
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_create_in_update12206);
                    create76=create();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create76.getTree());

                    }
                    break;
                case 8 :
                    // IbmSparqlExt.g:320:57: insertData
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_insertData_in_update12210);
                    insertData77=insertData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertData77.getTree());

                    }
                    break;
                case 9 :
                    // IbmSparqlExt.g:320:70: deleteData
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_deleteData_in_update12214);
                    deleteData78=deleteData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteData78.getTree());

                    }
                    break;
                case 10 :
                    // IbmSparqlExt.g:320:83: deleteWhere
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_deleteWhere_in_update12218);
                    deleteWhere79=deleteWhere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteWhere79.getTree());

                    }
                    break;
                case 11 :
                    // IbmSparqlExt.g:320:97: modify
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_modify_in_update12222);
                    modify80=modify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modify80.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "update1"

    public static class load_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "load"
    // IbmSparqlExt.g:323:1: load : LOAD ( SILENT )? iRIref ( INTO graphRef )? ;
    public final IbmSparqlExtParser.load_return load() throws RecognitionException {
        IbmSparqlExtParser.load_return retval = new IbmSparqlExtParser.load_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token LOAD81=null;
        Token SILENT82=null;
        Token INTO84=null;
        IbmSparqlExtParser.iRIref_return iRIref83 = null;

        IbmSparqlExtParser.graphRef_return graphRef85 = null;


        XTree LOAD81_tree=null;
        XTree SILENT82_tree=null;
        XTree INTO84_tree=null;

        try {
            // IbmSparqlExt.g:324:2: ( LOAD ( SILENT )? iRIref ( INTO graphRef )? )
            // IbmSparqlExt.g:324:6: LOAD ( SILENT )? iRIref ( INTO graphRef )?
            {
            root_0 = (XTree)adaptor.nil();

            LOAD81=(Token)match(input,LOAD,FOLLOW_LOAD_in_load2239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD81_tree = (XTree)adaptor.create(LOAD81);
            adaptor.addChild(root_0, LOAD81_tree);
            }
            // IbmSparqlExt.g:324:11: ( SILENT )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==SILENT) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // IbmSparqlExt.g:324:11: SILENT
                    {
                    SILENT82=(Token)match(input,SILENT,FOLLOW_SILENT_in_load2241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT82_tree = (XTree)adaptor.create(SILENT82);
                    adaptor.addChild(root_0, SILENT82_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_iRIref_in_load2244);
            iRIref83=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref83.getTree());
            // IbmSparqlExt.g:324:26: ( INTO graphRef )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==INTO) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // IbmSparqlExt.g:324:28: INTO graphRef
                    {
                    INTO84=(Token)match(input,INTO,FOLLOW_INTO_in_load2248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO84_tree = (XTree)adaptor.create(INTO84);
                    adaptor.addChild(root_0, INTO84_tree);
                    }
                    pushFollow(FOLLOW_graphRef_in_load2250);
                    graphRef85=graphRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef85.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "load"

    public static class clear_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clear"
    // IbmSparqlExt.g:327:1: clear : CLEAR ( SILENT )? graphRefAll ;
    public final IbmSparqlExtParser.clear_return clear() throws RecognitionException {
        IbmSparqlExtParser.clear_return retval = new IbmSparqlExtParser.clear_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token CLEAR86=null;
        Token SILENT87=null;
        IbmSparqlExtParser.graphRefAll_return graphRefAll88 = null;


        XTree CLEAR86_tree=null;
        XTree SILENT87_tree=null;

        try {
            // IbmSparqlExt.g:328:2: ( CLEAR ( SILENT )? graphRefAll )
            // IbmSparqlExt.g:328:6: CLEAR ( SILENT )? graphRefAll
            {
            root_0 = (XTree)adaptor.nil();

            CLEAR86=(Token)match(input,CLEAR,FOLLOW_CLEAR_in_clear2270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLEAR86_tree = (XTree)adaptor.create(CLEAR86);
            adaptor.addChild(root_0, CLEAR86_tree);
            }
            // IbmSparqlExt.g:328:12: ( SILENT )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==SILENT) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // IbmSparqlExt.g:328:12: SILENT
                    {
                    SILENT87=(Token)match(input,SILENT,FOLLOW_SILENT_in_clear2272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT87_tree = (XTree)adaptor.create(SILENT87);
                    adaptor.addChild(root_0, SILENT87_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphRefAll_in_clear2275);
            graphRefAll88=graphRefAll();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRefAll88.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "clear"

    public static class drop_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "drop"
    // IbmSparqlExt.g:331:1: drop : DROP ( SILENT )? graphRefAll ;
    public final IbmSparqlExtParser.drop_return drop() throws RecognitionException {
        IbmSparqlExtParser.drop_return retval = new IbmSparqlExtParser.drop_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DROP89=null;
        Token SILENT90=null;
        IbmSparqlExtParser.graphRefAll_return graphRefAll91 = null;


        XTree DROP89_tree=null;
        XTree SILENT90_tree=null;

        try {
            // IbmSparqlExt.g:332:2: ( DROP ( SILENT )? graphRefAll )
            // IbmSparqlExt.g:332:6: DROP ( SILENT )? graphRefAll
            {
            root_0 = (XTree)adaptor.nil();

            DROP89=(Token)match(input,DROP,FOLLOW_DROP_in_drop2292); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DROP89_tree = (XTree)adaptor.create(DROP89);
            adaptor.addChild(root_0, DROP89_tree);
            }
            // IbmSparqlExt.g:332:11: ( SILENT )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==SILENT) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // IbmSparqlExt.g:332:11: SILENT
                    {
                    SILENT90=(Token)match(input,SILENT,FOLLOW_SILENT_in_drop2294); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT90_tree = (XTree)adaptor.create(SILENT90);
                    adaptor.addChild(root_0, SILENT90_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphRefAll_in_drop2297);
            graphRefAll91=graphRefAll();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRefAll91.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "drop"

    public static class create_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create"
    // IbmSparqlExt.g:335:1: create : CREATE ( SILENT )? graphRef ;
    public final IbmSparqlExtParser.create_return create() throws RecognitionException {
        IbmSparqlExtParser.create_return retval = new IbmSparqlExtParser.create_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token CREATE92=null;
        Token SILENT93=null;
        IbmSparqlExtParser.graphRef_return graphRef94 = null;


        XTree CREATE92_tree=null;
        XTree SILENT93_tree=null;

        try {
            // IbmSparqlExt.g:336:2: ( CREATE ( SILENT )? graphRef )
            // IbmSparqlExt.g:336:6: CREATE ( SILENT )? graphRef
            {
            root_0 = (XTree)adaptor.nil();

            CREATE92=(Token)match(input,CREATE,FOLLOW_CREATE_in_create2314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CREATE92_tree = (XTree)adaptor.create(CREATE92);
            adaptor.addChild(root_0, CREATE92_tree);
            }
            // IbmSparqlExt.g:336:13: ( SILENT )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==SILENT) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // IbmSparqlExt.g:336:13: SILENT
                    {
                    SILENT93=(Token)match(input,SILENT,FOLLOW_SILENT_in_create2316); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT93_tree = (XTree)adaptor.create(SILENT93);
                    adaptor.addChild(root_0, SILENT93_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphRef_in_create2319);
            graphRef94=graphRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef94.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "create"

    public static class add_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "add"
    // IbmSparqlExt.g:339:1: add : ADD ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlExtParser.add_return add() throws RecognitionException {
        IbmSparqlExtParser.add_return retval = new IbmSparqlExtParser.add_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token ADD95=null;
        Token SILENT96=null;
        Token TO98=null;
        IbmSparqlExtParser.graphOrDefault_return graphOrDefault97 = null;

        IbmSparqlExtParser.graphOrDefault_return graphOrDefault99 = null;


        XTree ADD95_tree=null;
        XTree SILENT96_tree=null;
        XTree TO98_tree=null;

        try {
            // IbmSparqlExt.g:340:2: ( ADD ( SILENT )? graphOrDefault TO graphOrDefault )
            // IbmSparqlExt.g:340:6: ADD ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();

            ADD95=(Token)match(input,ADD,FOLLOW_ADD_in_add2336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ADD95_tree = (XTree)adaptor.create(ADD95);
            adaptor.addChild(root_0, ADD95_tree);
            }
            // IbmSparqlExt.g:340:10: ( SILENT )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==SILENT) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // IbmSparqlExt.g:340:10: SILENT
                    {
                    SILENT96=(Token)match(input,SILENT,FOLLOW_SILENT_in_add2338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT96_tree = (XTree)adaptor.create(SILENT96);
                    adaptor.addChild(root_0, SILENT96_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphOrDefault_in_add2341);
            graphOrDefault97=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault97.getTree());
            TO98=(Token)match(input,TO,FOLLOW_TO_in_add2343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO98_tree = (XTree)adaptor.create(TO98);
            adaptor.addChild(root_0, TO98_tree);
            }
            pushFollow(FOLLOW_graphOrDefault_in_add2345);
            graphOrDefault99=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault99.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "add"

    public static class move_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "move"
    // IbmSparqlExt.g:343:1: move : MOVE ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlExtParser.move_return move() throws RecognitionException {
        IbmSparqlExtParser.move_return retval = new IbmSparqlExtParser.move_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token MOVE100=null;
        Token SILENT101=null;
        Token TO103=null;
        IbmSparqlExtParser.graphOrDefault_return graphOrDefault102 = null;

        IbmSparqlExtParser.graphOrDefault_return graphOrDefault104 = null;


        XTree MOVE100_tree=null;
        XTree SILENT101_tree=null;
        XTree TO103_tree=null;

        try {
            // IbmSparqlExt.g:344:2: ( MOVE ( SILENT )? graphOrDefault TO graphOrDefault )
            // IbmSparqlExt.g:344:6: MOVE ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();

            MOVE100=(Token)match(input,MOVE,FOLLOW_MOVE_in_move2362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MOVE100_tree = (XTree)adaptor.create(MOVE100);
            adaptor.addChild(root_0, MOVE100_tree);
            }
            // IbmSparqlExt.g:344:11: ( SILENT )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==SILENT) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // IbmSparqlExt.g:344:11: SILENT
                    {
                    SILENT101=(Token)match(input,SILENT,FOLLOW_SILENT_in_move2364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT101_tree = (XTree)adaptor.create(SILENT101);
                    adaptor.addChild(root_0, SILENT101_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphOrDefault_in_move2367);
            graphOrDefault102=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault102.getTree());
            TO103=(Token)match(input,TO,FOLLOW_TO_in_move2369); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO103_tree = (XTree)adaptor.create(TO103);
            adaptor.addChild(root_0, TO103_tree);
            }
            pushFollow(FOLLOW_graphOrDefault_in_move2371);
            graphOrDefault104=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault104.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "move"

    public static class copy_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "copy"
    // IbmSparqlExt.g:347:1: copy : COPY ( SILENT )? graphOrDefault TO graphOrDefault ;
    public final IbmSparqlExtParser.copy_return copy() throws RecognitionException {
        IbmSparqlExtParser.copy_return retval = new IbmSparqlExtParser.copy_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token COPY105=null;
        Token SILENT106=null;
        Token TO108=null;
        IbmSparqlExtParser.graphOrDefault_return graphOrDefault107 = null;

        IbmSparqlExtParser.graphOrDefault_return graphOrDefault109 = null;


        XTree COPY105_tree=null;
        XTree SILENT106_tree=null;
        XTree TO108_tree=null;

        try {
            // IbmSparqlExt.g:348:2: ( COPY ( SILENT )? graphOrDefault TO graphOrDefault )
            // IbmSparqlExt.g:348:6: COPY ( SILENT )? graphOrDefault TO graphOrDefault
            {
            root_0 = (XTree)adaptor.nil();

            COPY105=(Token)match(input,COPY,FOLLOW_COPY_in_copy2388); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COPY105_tree = (XTree)adaptor.create(COPY105);
            adaptor.addChild(root_0, COPY105_tree);
            }
            // IbmSparqlExt.g:348:11: ( SILENT )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==SILENT) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // IbmSparqlExt.g:348:11: SILENT
                    {
                    SILENT106=(Token)match(input,SILENT,FOLLOW_SILENT_in_copy2390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SILENT106_tree = (XTree)adaptor.create(SILENT106);
                    adaptor.addChild(root_0, SILENT106_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_graphOrDefault_in_copy2393);
            graphOrDefault107=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault107.getTree());
            TO108=(Token)match(input,TO,FOLLOW_TO_in_copy2395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TO108_tree = (XTree)adaptor.create(TO108);
            adaptor.addChild(root_0, TO108_tree);
            }
            pushFollow(FOLLOW_graphOrDefault_in_copy2397);
            graphOrDefault109=graphOrDefault();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphOrDefault109.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "copy"

    public static class insertData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertData"
    // IbmSparqlExt.g:351:1: insertData : INSERT DATA quadData ;
    public final IbmSparqlExtParser.insertData_return insertData() throws RecognitionException {
        IbmSparqlExtParser.insertData_return retval = new IbmSparqlExtParser.insertData_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INSERT110=null;
        Token DATA111=null;
        IbmSparqlExtParser.quadData_return quadData112 = null;


        XTree INSERT110_tree=null;
        XTree DATA111_tree=null;

        try {
            // IbmSparqlExt.g:352:2: ( INSERT DATA quadData )
            // IbmSparqlExt.g:352:6: INSERT DATA quadData
            {
            root_0 = (XTree)adaptor.nil();

            INSERT110=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertData2414); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT110_tree = (XTree)adaptor.create(INSERT110);
            adaptor.addChild(root_0, INSERT110_tree);
            }
            DATA111=(Token)match(input,DATA,FOLLOW_DATA_in_insertData2416); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DATA111_tree = (XTree)adaptor.create(DATA111);
            adaptor.addChild(root_0, DATA111_tree);
            }
            pushFollow(FOLLOW_quadData_in_insertData2418);
            quadData112=quadData();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadData112.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertData"

    public static class deleteData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deleteData"
    // IbmSparqlExt.g:355:1: deleteData : DELETE DATA quadData ;
    public final IbmSparqlExtParser.deleteData_return deleteData() throws RecognitionException {
        IbmSparqlExtParser.deleteData_return retval = new IbmSparqlExtParser.deleteData_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DELETE113=null;
        Token DATA114=null;
        IbmSparqlExtParser.quadData_return quadData115 = null;


        XTree DELETE113_tree=null;
        XTree DATA114_tree=null;

        try {
            // IbmSparqlExt.g:356:2: ( DELETE DATA quadData )
            // IbmSparqlExt.g:356:6: DELETE DATA quadData
            {
            root_0 = (XTree)adaptor.nil();

            DELETE113=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteData2434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE113_tree = (XTree)adaptor.create(DELETE113);
            adaptor.addChild(root_0, DELETE113_tree);
            }
            DATA114=(Token)match(input,DATA,FOLLOW_DATA_in_deleteData2436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DATA114_tree = (XTree)adaptor.create(DATA114);
            adaptor.addChild(root_0, DATA114_tree);
            }
            pushFollow(FOLLOW_quadData_in_deleteData2438);
            quadData115=quadData();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadData115.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "deleteData"

    public static class deleteWhere_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deleteWhere"
    // IbmSparqlExt.g:359:1: deleteWhere : DELETE WHERE_TOKEN quadPattern ;
    public final IbmSparqlExtParser.deleteWhere_return deleteWhere() throws RecognitionException {
        IbmSparqlExtParser.deleteWhere_return retval = new IbmSparqlExtParser.deleteWhere_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DELETE116=null;
        Token WHERE_TOKEN117=null;
        IbmSparqlExtParser.quadPattern_return quadPattern118 = null;


        XTree DELETE116_tree=null;
        XTree WHERE_TOKEN117_tree=null;

        try {
            // IbmSparqlExt.g:360:2: ( DELETE WHERE_TOKEN quadPattern )
            // IbmSparqlExt.g:360:6: DELETE WHERE_TOKEN quadPattern
            {
            root_0 = (XTree)adaptor.nil();

            DELETE116=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteWhere2455); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE116_tree = (XTree)adaptor.create(DELETE116);
            adaptor.addChild(root_0, DELETE116_tree);
            }
            WHERE_TOKEN117=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_deleteWhere2457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE_TOKEN117_tree = (XTree)adaptor.create(WHERE_TOKEN117);
            adaptor.addChild(root_0, WHERE_TOKEN117_tree);
            }
            pushFollow(FOLLOW_quadPattern_in_deleteWhere2459);
            quadPattern118=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern118.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "deleteWhere"

    public static class modify_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modify"
    // IbmSparqlExt.g:363:1: modify : ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern ;
    public final IbmSparqlExtParser.modify_return modify() throws RecognitionException {
        IbmSparqlExtParser.modify_return retval = new IbmSparqlExtParser.modify_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token WITH119=null;
        Token WHERE_TOKEN125=null;
        IbmSparqlExtParser.iRIref_return iRIref120 = null;

        IbmSparqlExtParser.deleteClause_return deleteClause121 = null;

        IbmSparqlExtParser.insertClause_return insertClause122 = null;

        IbmSparqlExtParser.insertClause_return insertClause123 = null;

        IbmSparqlExtParser.usingClause_return usingClause124 = null;

        IbmSparqlExtParser.groupGraphPattern_return groupGraphPattern126 = null;


        XTree WITH119_tree=null;
        XTree WHERE_TOKEN125_tree=null;

        try {
            // IbmSparqlExt.g:364:2: ( ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern )
            // IbmSparqlExt.g:364:6: ( WITH iRIref )? ( deleteClause ( insertClause )? | insertClause ) ( usingClause )* WHERE_TOKEN groupGraphPattern
            {
            root_0 = (XTree)adaptor.nil();

            // IbmSparqlExt.g:364:6: ( WITH iRIref )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==WITH) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // IbmSparqlExt.g:364:8: WITH iRIref
                    {
                    WITH119=(Token)match(input,WITH,FOLLOW_WITH_in_modify2478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WITH119_tree = (XTree)adaptor.create(WITH119);
                    adaptor.addChild(root_0, WITH119_tree);
                    }
                    pushFollow(FOLLOW_iRIref_in_modify2480);
                    iRIref120=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref120.getTree());

                    }
                    break;

            }

            // IbmSparqlExt.g:364:23: ( deleteClause ( insertClause )? | insertClause )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==DELETE) ) {
                alt57=1;
            }
            else if ( (LA57_0==INSERT) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // IbmSparqlExt.g:364:25: deleteClause ( insertClause )?
                    {
                    pushFollow(FOLLOW_deleteClause_in_modify2487);
                    deleteClause121=deleteClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteClause121.getTree());
                    // IbmSparqlExt.g:364:38: ( insertClause )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==INSERT) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // IbmSparqlExt.g:364:38: insertClause
                            {
                            pushFollow(FOLLOW_insertClause_in_modify2489);
                            insertClause122=insertClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, insertClause122.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:364:54: insertClause
                    {
                    pushFollow(FOLLOW_insertClause_in_modify2494);
                    insertClause123=insertClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertClause123.getTree());

                    }
                    break;

            }

            // IbmSparqlExt.g:364:69: ( usingClause )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==USING) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // IbmSparqlExt.g:364:69: usingClause
            	    {
            	    pushFollow(FOLLOW_usingClause_in_modify2498);
            	    usingClause124=usingClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, usingClause124.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            WHERE_TOKEN125=(Token)match(input,WHERE_TOKEN,FOLLOW_WHERE_TOKEN_in_modify2501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE_TOKEN125_tree = (XTree)adaptor.create(WHERE_TOKEN125);
            adaptor.addChild(root_0, WHERE_TOKEN125_tree);
            }
            pushFollow(FOLLOW_groupGraphPattern_in_modify2503);
            groupGraphPattern126=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, groupGraphPattern126.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "modify"

    public static class deleteClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "deleteClause"
    // IbmSparqlExt.g:367:1: deleteClause : DELETE quadPattern ;
    public final IbmSparqlExtParser.deleteClause_return deleteClause() throws RecognitionException {
        IbmSparqlExtParser.deleteClause_return retval = new IbmSparqlExtParser.deleteClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DELETE127=null;
        IbmSparqlExtParser.quadPattern_return quadPattern128 = null;


        XTree DELETE127_tree=null;

        try {
            // IbmSparqlExt.g:368:2: ( DELETE quadPattern )
            // IbmSparqlExt.g:368:6: DELETE quadPattern
            {
            root_0 = (XTree)adaptor.nil();

            DELETE127=(Token)match(input,DELETE,FOLLOW_DELETE_in_deleteClause2519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE127_tree = (XTree)adaptor.create(DELETE127);
            adaptor.addChild(root_0, DELETE127_tree);
            }
            pushFollow(FOLLOW_quadPattern_in_deleteClause2521);
            quadPattern128=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern128.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "deleteClause"

    public static class insertClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertClause"
    // IbmSparqlExt.g:371:1: insertClause : INSERT quadPattern ;
    public final IbmSparqlExtParser.insertClause_return insertClause() throws RecognitionException {
        IbmSparqlExtParser.insertClause_return retval = new IbmSparqlExtParser.insertClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INSERT129=null;
        IbmSparqlExtParser.quadPattern_return quadPattern130 = null;


        XTree INSERT129_tree=null;

        try {
            // IbmSparqlExt.g:372:2: ( INSERT quadPattern )
            // IbmSparqlExt.g:372:6: INSERT quadPattern
            {
            root_0 = (XTree)adaptor.nil();

            INSERT129=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertClause2538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT129_tree = (XTree)adaptor.create(INSERT129);
            adaptor.addChild(root_0, INSERT129_tree);
            }
            pushFollow(FOLLOW_quadPattern_in_insertClause2540);
            quadPattern130=quadPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quadPattern130.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertClause"

    public static class usingClause_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "usingClause"
    // IbmSparqlExt.g:375:1: usingClause : USING ( iRIref | NAMED iRIref ) ;
    public final IbmSparqlExtParser.usingClause_return usingClause() throws RecognitionException {
        IbmSparqlExtParser.usingClause_return retval = new IbmSparqlExtParser.usingClause_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token USING131=null;
        Token NAMED133=null;
        IbmSparqlExtParser.iRIref_return iRIref132 = null;

        IbmSparqlExtParser.iRIref_return iRIref134 = null;


        XTree USING131_tree=null;
        XTree NAMED133_tree=null;

        try {
            // IbmSparqlExt.g:376:2: ( USING ( iRIref | NAMED iRIref ) )
            // IbmSparqlExt.g:376:6: USING ( iRIref | NAMED iRIref )
            {
            root_0 = (XTree)adaptor.nil();

            USING131=(Token)match(input,USING,FOLLOW_USING_in_usingClause2557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            USING131_tree = (XTree)adaptor.create(USING131);
            adaptor.addChild(root_0, USING131_tree);
            }
            // IbmSparqlExt.g:376:12: ( iRIref | NAMED iRIref )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==IRI_REF||LA59_0==PNAME_NS||LA59_0==PNAME_LN) ) {
                alt59=1;
            }
            else if ( (LA59_0==NAMED) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // IbmSparqlExt.g:376:14: iRIref
                    {
                    pushFollow(FOLLOW_iRIref_in_usingClause2561);
                    iRIref132=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref132.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:376:23: NAMED iRIref
                    {
                    NAMED133=(Token)match(input,NAMED,FOLLOW_NAMED_in_usingClause2565); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAMED133_tree = (XTree)adaptor.create(NAMED133);
                    adaptor.addChild(root_0, NAMED133_tree);
                    }
                    pushFollow(FOLLOW_iRIref_in_usingClause2567);
                    iRIref134=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref134.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "usingClause"

    public static class graphOrDefault_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphOrDefault"
    // IbmSparqlExt.g:379:1: graphOrDefault : ( DEFAULT | ( GRAPH )? iRIref );
    public final IbmSparqlExtParser.graphOrDefault_return graphOrDefault() throws RecognitionException {
        IbmSparqlExtParser.graphOrDefault_return retval = new IbmSparqlExtParser.graphOrDefault_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DEFAULT135=null;
        Token GRAPH136=null;
        IbmSparqlExtParser.iRIref_return iRIref137 = null;


        XTree DEFAULT135_tree=null;
        XTree GRAPH136_tree=null;

        try {
            // IbmSparqlExt.g:380:2: ( DEFAULT | ( GRAPH )? iRIref )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==DEFAULT) ) {
                alt61=1;
            }
            else if ( (LA61_0==IRI_REF||LA61_0==PNAME_NS||LA61_0==GRAPH||LA61_0==PNAME_LN) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // IbmSparqlExt.g:380:6: DEFAULT
                    {
                    root_0 = (XTree)adaptor.nil();

                    DEFAULT135=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_graphOrDefault2586); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT135_tree = (XTree)adaptor.create(DEFAULT135);
                    adaptor.addChild(root_0, DEFAULT135_tree);
                    }

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:380:16: ( GRAPH )? iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    // IbmSparqlExt.g:380:16: ( GRAPH )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==GRAPH) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // IbmSparqlExt.g:380:16: GRAPH
                            {
                            GRAPH136=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphOrDefault2590); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            GRAPH136_tree = (XTree)adaptor.create(GRAPH136);
                            adaptor.addChild(root_0, GRAPH136_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_iRIref_in_graphOrDefault2593);
                    iRIref137=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref137.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphOrDefault"

    public static class graphRef_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphRef"
    // IbmSparqlExt.g:383:1: graphRef : GRAPH iRIref ;
    public final IbmSparqlExtParser.graphRef_return graphRef() throws RecognitionException {
        IbmSparqlExtParser.graphRef_return retval = new IbmSparqlExtParser.graphRef_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token GRAPH138=null;
        IbmSparqlExtParser.iRIref_return iRIref139 = null;


        XTree GRAPH138_tree=null;

        try {
            // IbmSparqlExt.g:384:2: ( GRAPH iRIref )
            // IbmSparqlExt.g:384:6: GRAPH iRIref
            {
            root_0 = (XTree)adaptor.nil();

            GRAPH138=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphRef2610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GRAPH138_tree = (XTree)adaptor.create(GRAPH138);
            adaptor.addChild(root_0, GRAPH138_tree);
            }
            pushFollow(FOLLOW_iRIref_in_graphRef2612);
            iRIref139=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref139.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphRef"

    public static class graphRefAll_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphRefAll"
    // IbmSparqlExt.g:387:1: graphRefAll : ( graphRef | DEFAULT | NAMED | ALL );
    public final IbmSparqlExtParser.graphRefAll_return graphRefAll() throws RecognitionException {
        IbmSparqlExtParser.graphRefAll_return retval = new IbmSparqlExtParser.graphRefAll_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DEFAULT141=null;
        Token NAMED142=null;
        Token ALL143=null;
        IbmSparqlExtParser.graphRef_return graphRef140 = null;


        XTree DEFAULT141_tree=null;
        XTree NAMED142_tree=null;
        XTree ALL143_tree=null;

        try {
            // IbmSparqlExt.g:388:2: ( graphRef | DEFAULT | NAMED | ALL )
            int alt62=4;
            switch ( input.LA(1) ) {
            case GRAPH:
                {
                alt62=1;
                }
                break;
            case DEFAULT:
                {
                alt62=2;
                }
                break;
            case NAMED:
                {
                alt62=3;
                }
                break;
            case ALL:
                {
                alt62=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }

            switch (alt62) {
                case 1 :
                    // IbmSparqlExt.g:388:7: graphRef
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_graphRef_in_graphRefAll2626);
                    graphRef140=graphRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphRef140.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:388:18: DEFAULT
                    {
                    root_0 = (XTree)adaptor.nil();

                    DEFAULT141=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_graphRefAll2630); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT141_tree = (XTree)adaptor.create(DEFAULT141);
                    adaptor.addChild(root_0, DEFAULT141_tree);
                    }

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:388:28: NAMED
                    {
                    root_0 = (XTree)adaptor.nil();

                    NAMED142=(Token)match(input,NAMED,FOLLOW_NAMED_in_graphRefAll2634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAMED142_tree = (XTree)adaptor.create(NAMED142);
                    adaptor.addChild(root_0, NAMED142_tree);
                    }

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:388:36: ALL
                    {
                    root_0 = (XTree)adaptor.nil();

                    ALL143=(Token)match(input,ALL,FOLLOW_ALL_in_graphRefAll2638); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL143_tree = (XTree)adaptor.create(ALL143);
                    adaptor.addChild(root_0, ALL143_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphRefAll"

    public static class quadPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quadPattern"
    // IbmSparqlExt.g:391:1: quadPattern : OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE ;
    public final IbmSparqlExtParser.quadPattern_return quadPattern() throws RecognitionException {
        IbmSparqlExtParser.quadPattern_return retval = new IbmSparqlExtParser.quadPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_CURLY_BRACE144=null;
        Token CLOSE_CURLY_BRACE146=null;
        IbmSparqlExtParser.quads_return quads145 = null;


        XTree OPEN_CURLY_BRACE144_tree=null;
        XTree CLOSE_CURLY_BRACE146_tree=null;

        try {
            // IbmSparqlExt.g:392:2: ( OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE )
            // IbmSparqlExt.g:392:7: OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();

            OPEN_CURLY_BRACE144=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadPattern2652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE144_tree = (XTree)adaptor.create(OPEN_CURLY_BRACE144);
            adaptor.addChild(root_0, OPEN_CURLY_BRACE144_tree);
            }
            pushFollow(FOLLOW_quads_in_quadPattern2654);
            quads145=quads();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quads145.getTree());
            CLOSE_CURLY_BRACE146=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadPattern2656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE146_tree = (XTree)adaptor.create(CLOSE_CURLY_BRACE146);
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE146_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "quadPattern"

    public static class quadData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quadData"
    // IbmSparqlExt.g:395:1: quadData : OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE ;
    public final IbmSparqlExtParser.quadData_return quadData() throws RecognitionException {
        IbmSparqlExtParser.quadData_return retval = new IbmSparqlExtParser.quadData_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_CURLY_BRACE147=null;
        Token CLOSE_CURLY_BRACE149=null;
        IbmSparqlExtParser.quads_return quads148 = null;


        XTree OPEN_CURLY_BRACE147_tree=null;
        XTree CLOSE_CURLY_BRACE149_tree=null;

        try {
            // IbmSparqlExt.g:396:2: ( OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE )
            // IbmSparqlExt.g:396:7: OPEN_CURLY_BRACE quads CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();

            OPEN_CURLY_BRACE147=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadData2670); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE147_tree = (XTree)adaptor.create(OPEN_CURLY_BRACE147);
            adaptor.addChild(root_0, OPEN_CURLY_BRACE147_tree);
            }
            pushFollow(FOLLOW_quads_in_quadData2672);
            quads148=quads();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quads148.getTree());
            CLOSE_CURLY_BRACE149=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadData2674); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE149_tree = (XTree)adaptor.create(CLOSE_CURLY_BRACE149);
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE149_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "quadData"

    public static class quads_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quads"
    // IbmSparqlExt.g:399:1: quads : ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )* ;
    public final IbmSparqlExtParser.quads_return quads() throws RecognitionException {
        IbmSparqlExtParser.quads_return retval = new IbmSparqlExtParser.quads_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DOT152=null;
        IbmSparqlExtParser.triplesTemplate_return triplesTemplate150 = null;

        IbmSparqlExtParser.quadsNotTriples_return quadsNotTriples151 = null;

        IbmSparqlExtParser.triplesTemplate_return triplesTemplate153 = null;


        XTree DOT152_tree=null;

        try {
            // IbmSparqlExt.g:400:2: ( ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )* )
            // IbmSparqlExt.g:400:7: ( triplesTemplate )? ( quadsNotTriples ( DOT )? ( triplesTemplate )? )*
            {
            root_0 = (XTree)adaptor.nil();

            // IbmSparqlExt.g:400:7: ( triplesTemplate )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==IRI_REF||LA63_0==PNAME_NS||LA63_0==OPEN_BRACE||LA63_0==STRING_LITERAL2||LA63_0==INTEGER||LA63_0==OPEN_SQ_BRACKET||(LA63_0>=VAR1 && LA63_0<=VAR2)||(LA63_0>=DECIMAL && LA63_0<=BLANK_NODE_LABEL)) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // IbmSparqlExt.g:400:7: triplesTemplate
                    {
                    pushFollow(FOLLOW_triplesTemplate_in_quads2688);
                    triplesTemplate150=triplesTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate150.getTree());

                    }
                    break;

            }

            // IbmSparqlExt.g:400:24: ( quadsNotTriples ( DOT )? ( triplesTemplate )? )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==GRAPH) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // IbmSparqlExt.g:400:26: quadsNotTriples ( DOT )? ( triplesTemplate )?
            	    {
            	    pushFollow(FOLLOW_quadsNotTriples_in_quads2693);
            	    quadsNotTriples151=quadsNotTriples();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quadsNotTriples151.getTree());
            	    // IbmSparqlExt.g:400:42: ( DOT )?
            	    int alt64=2;
            	    int LA64_0 = input.LA(1);

            	    if ( (LA64_0==DOT) ) {
            	        alt64=1;
            	    }
            	    switch (alt64) {
            	        case 1 :
            	            // IbmSparqlExt.g:400:42: DOT
            	            {
            	            DOT152=(Token)match(input,DOT,FOLLOW_DOT_in_quads2695); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DOT152_tree = (XTree)adaptor.create(DOT152);
            	            adaptor.addChild(root_0, DOT152_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // IbmSparqlExt.g:400:47: ( triplesTemplate )?
            	    int alt65=2;
            	    int LA65_0 = input.LA(1);

            	    if ( (LA65_0==IRI_REF||LA65_0==PNAME_NS||LA65_0==OPEN_BRACE||LA65_0==STRING_LITERAL2||LA65_0==INTEGER||LA65_0==OPEN_SQ_BRACKET||(LA65_0>=VAR1 && LA65_0<=VAR2)||(LA65_0>=DECIMAL && LA65_0<=BLANK_NODE_LABEL)) ) {
            	        alt65=1;
            	    }
            	    switch (alt65) {
            	        case 1 :
            	            // IbmSparqlExt.g:400:47: triplesTemplate
            	            {
            	            pushFollow(FOLLOW_triplesTemplate_in_quads2698);
            	            triplesTemplate153=triplesTemplate();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate153.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "quads"

    public static class quadsNotTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quadsNotTriples"
    // IbmSparqlExt.g:403:1: quadsNotTriples : GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE ;
    public final IbmSparqlExtParser.quadsNotTriples_return quadsNotTriples() throws RecognitionException {
        IbmSparqlExtParser.quadsNotTriples_return retval = new IbmSparqlExtParser.quadsNotTriples_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token GRAPH154=null;
        Token OPEN_CURLY_BRACE156=null;
        Token CLOSE_CURLY_BRACE158=null;
        IbmSparqlExtParser.varOrIRIref_return varOrIRIref155 = null;

        IbmSparqlExtParser.triplesTemplate_return triplesTemplate157 = null;


        XTree GRAPH154_tree=null;
        XTree OPEN_CURLY_BRACE156_tree=null;
        XTree CLOSE_CURLY_BRACE158_tree=null;

        try {
            // IbmSparqlExt.g:404:2: ( GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE )
            // IbmSparqlExt.g:404:7: GRAPH varOrIRIref OPEN_CURLY_BRACE ( triplesTemplate )? CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();

            GRAPH154=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_quadsNotTriples2716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GRAPH154_tree = (XTree)adaptor.create(GRAPH154);
            adaptor.addChild(root_0, GRAPH154_tree);
            }
            pushFollow(FOLLOW_varOrIRIref_in_quadsNotTriples2718);
            varOrIRIref155=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrIRIref155.getTree());
            OPEN_CURLY_BRACE156=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_quadsNotTriples2720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPEN_CURLY_BRACE156_tree = (XTree)adaptor.create(OPEN_CURLY_BRACE156);
            adaptor.addChild(root_0, OPEN_CURLY_BRACE156_tree);
            }
            // IbmSparqlExt.g:404:42: ( triplesTemplate )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==IRI_REF||LA67_0==PNAME_NS||LA67_0==OPEN_BRACE||LA67_0==STRING_LITERAL2||LA67_0==INTEGER||LA67_0==OPEN_SQ_BRACKET||(LA67_0>=VAR1 && LA67_0<=VAR2)||(LA67_0>=DECIMAL && LA67_0<=BLANK_NODE_LABEL)) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // IbmSparqlExt.g:404:42: triplesTemplate
                    {
                    pushFollow(FOLLOW_triplesTemplate_in_quadsNotTriples2722);
                    triplesTemplate157=triplesTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate157.getTree());

                    }
                    break;

            }

            CLOSE_CURLY_BRACE158=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_quadsNotTriples2725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLOSE_CURLY_BRACE158_tree = (XTree)adaptor.create(CLOSE_CURLY_BRACE158);
            adaptor.addChild(root_0, CLOSE_CURLY_BRACE158_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "quadsNotTriples"

    public static class triplesTemplate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesTemplate"
    // IbmSparqlExt.g:407:1: triplesTemplate : triplesSameSubject ( DOT ( triplesTemplate )? )? ;
    public final IbmSparqlExtParser.triplesTemplate_return triplesTemplate() throws RecognitionException {
        IbmSparqlExtParser.triplesTemplate_return retval = new IbmSparqlExtParser.triplesTemplate_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DOT160=null;
        IbmSparqlExtParser.triplesSameSubject_return triplesSameSubject159 = null;

        IbmSparqlExtParser.triplesTemplate_return triplesTemplate161 = null;


        XTree DOT160_tree=null;

        try {
            // IbmSparqlExt.g:408:2: ( triplesSameSubject ( DOT ( triplesTemplate )? )? )
            // IbmSparqlExt.g:408:7: triplesSameSubject ( DOT ( triplesTemplate )? )?
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_triplesSameSubject_in_triplesTemplate2739);
            triplesSameSubject159=triplesSameSubject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesSameSubject159.getTree());
            // IbmSparqlExt.g:408:26: ( DOT ( triplesTemplate )? )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==DOT) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // IbmSparqlExt.g:408:28: DOT ( triplesTemplate )?
                    {
                    DOT160=(Token)match(input,DOT,FOLLOW_DOT_in_triplesTemplate2743); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT160_tree = (XTree)adaptor.create(DOT160);
                    adaptor.addChild(root_0, DOT160_tree);
                    }
                    // IbmSparqlExt.g:408:32: ( triplesTemplate )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==IRI_REF||LA68_0==PNAME_NS||LA68_0==OPEN_BRACE||LA68_0==STRING_LITERAL2||LA68_0==INTEGER||LA68_0==OPEN_SQ_BRACKET||(LA68_0>=VAR1 && LA68_0<=VAR2)||(LA68_0>=DECIMAL && LA68_0<=BLANK_NODE_LABEL)) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // IbmSparqlExt.g:408:32: triplesTemplate
                            {
                            pushFollow(FOLLOW_triplesTemplate_in_triplesTemplate2745);
                            triplesTemplate161=triplesTemplate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesTemplate161.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesTemplate"

    public static class groupGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupGraphPattern"
    // IbmSparqlExt.g:411:1: groupGraphPattern : OPEN_CURLY_BRACE (s= subSelect | g= groupGraphPatternSub ) CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? ) ;
    public final IbmSparqlExtParser.groupGraphPattern_return groupGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.groupGraphPattern_return retval = new IbmSparqlExtParser.groupGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_CURLY_BRACE162=null;
        Token CLOSE_CURLY_BRACE163=null;
        IbmSparqlExtParser.subSelect_return s = null;

        IbmSparqlExtParser.groupGraphPatternSub_return g = null;


        XTree OPEN_CURLY_BRACE162_tree=null;
        XTree CLOSE_CURLY_BRACE163_tree=null;
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_groupGraphPatternSub=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPatternSub");
        RewriteRuleSubtreeStream stream_subSelect=new RewriteRuleSubtreeStream(adaptor,"rule subSelect");
        try {
            // IbmSparqlExt.g:412:2: ( OPEN_CURLY_BRACE (s= subSelect | g= groupGraphPatternSub ) CLOSE_CURLY_BRACE -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? ) )
            // IbmSparqlExt.g:412:7: OPEN_CURLY_BRACE (s= subSelect | g= groupGraphPatternSub ) CLOSE_CURLY_BRACE
            {
            OPEN_CURLY_BRACE162=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE162);

            // IbmSparqlExt.g:412:24: (s= subSelect | g= groupGraphPatternSub )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==SELECT) ) {
                alt70=1;
            }
            else if ( (LA70_0==IRI_REF||LA70_0==PNAME_NS||LA70_0==OPEN_BRACE||(LA70_0>=OPEN_CURLY_BRACE && LA70_0<=CLOSE_CURLY_BRACE)||LA70_0==INTEGER||LA70_0==GRAPH||(LA70_0>=VALUES && LA70_0<=BIND)||(LA70_0>=MINUS && LA70_0<=FILTER)||LA70_0==OPEN_SQ_BRACKET||(LA70_0>=VAR1 && LA70_0<=VAR2)||(LA70_0>=DECIMAL && LA70_0<=BLANK_NODE_LABEL)) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // IbmSparqlExt.g:412:26: s= subSelect
                    {
                    pushFollow(FOLLOW_subSelect_in_groupGraphPattern2769);
                    s=subSelect();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelect.add(s.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:412:40: g= groupGraphPatternSub
                    {
                    pushFollow(FOLLOW_groupGraphPatternSub_in_groupGraphPattern2775);
                    g=groupGraphPatternSub();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupGraphPatternSub.add(g.getTree());

                    }
                    break;

            }

            CLOSE_CURLY_BRACE163=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE163);



            // AST REWRITE
            // elements: groupGraphPatternSub, subSelect
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 414:3: -> ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? )
            {
                // IbmSparqlExt.g:414:7: ^( GROUP_GRAPH_PATTERN ( subSelect )? ( groupGraphPatternSub )? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(GROUP_GRAPH_PATTERN, "GROUP_GRAPH_PATTERN"), root_1);

                // IbmSparqlExt.g:414:30: ( subSelect )?
                if ( stream_subSelect.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelect.nextTree());

                }
                stream_subSelect.reset();
                // IbmSparqlExt.g:414:41: ( groupGraphPatternSub )?
                if ( stream_groupGraphPatternSub.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupGraphPatternSub.nextTree());

                }
                stream_groupGraphPatternSub.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupGraphPattern"

    public static class groupGraphPatternSub_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupGraphPatternSub"
    // IbmSparqlExt.g:417:1: groupGraphPatternSub : ( triplesBlock )? ( groupGraphPatternSubInt )* -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )* ;
    public final IbmSparqlExtParser.groupGraphPatternSub_return groupGraphPatternSub() throws RecognitionException {
        IbmSparqlExtParser.groupGraphPatternSub_return retval = new IbmSparqlExtParser.groupGraphPatternSub_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.triplesBlock_return triplesBlock164 = null;

        IbmSparqlExtParser.groupGraphPatternSubInt_return groupGraphPatternSubInt165 = null;


        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_groupGraphPatternSubInt=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPatternSubInt");
        try {
            // IbmSparqlExt.g:418:2: ( ( triplesBlock )? ( groupGraphPatternSubInt )* -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )* )
            // IbmSparqlExt.g:418:7: ( triplesBlock )? ( groupGraphPatternSubInt )*
            {
            // IbmSparqlExt.g:418:7: ( triplesBlock )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==IRI_REF||LA71_0==PNAME_NS||LA71_0==OPEN_BRACE||LA71_0==STRING_LITERAL2||LA71_0==INTEGER||LA71_0==OPEN_SQ_BRACKET||(LA71_0>=VAR1 && LA71_0<=VAR2)||(LA71_0>=DECIMAL && LA71_0<=BLANK_NODE_LABEL)) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // IbmSparqlExt.g:418:7: triplesBlock
                    {
                    pushFollow(FOLLOW_triplesBlock_in_groupGraphPatternSub2813);
                    triplesBlock164=triplesBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesBlock.add(triplesBlock164.getTree());

                    }
                    break;

            }

            // IbmSparqlExt.g:418:21: ( groupGraphPatternSubInt )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==OPEN_CURLY_BRACE||LA72_0==GRAPH||(LA72_0>=VALUES && LA72_0<=BIND)||(LA72_0>=MINUS && LA72_0<=FILTER)) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // IbmSparqlExt.g:418:21: groupGraphPatternSubInt
            	    {
            	    pushFollow(FOLLOW_groupGraphPatternSubInt_in_groupGraphPatternSub2816);
            	    groupGraphPatternSubInt165=groupGraphPatternSubInt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_groupGraphPatternSubInt.add(groupGraphPatternSubInt165.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);



            // AST REWRITE
            // elements: groupGraphPatternSubInt, triplesBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 419:3: -> ( ^( TRIPLES_BLOCK triplesBlock ) )? ( groupGraphPatternSubInt )*
            {
                // IbmSparqlExt.g:419:7: ( ^( TRIPLES_BLOCK triplesBlock ) )?
                if ( stream_triplesBlock.hasNext() ) {
                    // IbmSparqlExt.g:419:7: ^( TRIPLES_BLOCK triplesBlock )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLES_BLOCK, "TRIPLES_BLOCK"), root_1);

                    adaptor.addChild(root_1, stream_triplesBlock.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_triplesBlock.reset();
                // IbmSparqlExt.g:419:38: ( groupGraphPatternSubInt )*
                while ( stream_groupGraphPatternSubInt.hasNext() ) {
                    adaptor.addChild(root_0, stream_groupGraphPatternSubInt.nextTree());

                }
                stream_groupGraphPatternSubInt.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupGraphPatternSub"

    public static class groupGraphPatternSubInt_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupGraphPatternSubInt"
    // IbmSparqlExt.g:422:1: groupGraphPatternSubInt : graphPatternNotTriples ( DOT )? ( triplesBlock )? -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )? ;
    public final IbmSparqlExtParser.groupGraphPatternSubInt_return groupGraphPatternSubInt() throws RecognitionException {
        IbmSparqlExtParser.groupGraphPatternSubInt_return retval = new IbmSparqlExtParser.groupGraphPatternSubInt_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DOT167=null;
        IbmSparqlExtParser.graphPatternNotTriples_return graphPatternNotTriples166 = null;

        IbmSparqlExtParser.triplesBlock_return triplesBlock168 = null;


        XTree DOT167_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_graphPatternNotTriples=new RewriteRuleSubtreeStream(adaptor,"rule graphPatternNotTriples");
        try {
            // IbmSparqlExt.g:423:2: ( graphPatternNotTriples ( DOT )? ( triplesBlock )? -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )? )
            // IbmSparqlExt.g:423:7: graphPatternNotTriples ( DOT )? ( triplesBlock )?
            {
            pushFollow(FOLLOW_graphPatternNotTriples_in_groupGraphPatternSubInt2846);
            graphPatternNotTriples166=graphPatternNotTriples();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_graphPatternNotTriples.add(graphPatternNotTriples166.getTree());
            // IbmSparqlExt.g:423:30: ( DOT )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==DOT) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // IbmSparqlExt.g:423:30: DOT
                    {
                    DOT167=(Token)match(input,DOT,FOLLOW_DOT_in_groupGraphPatternSubInt2848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT167);


                    }
                    break;

            }

            // IbmSparqlExt.g:423:35: ( triplesBlock )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==IRI_REF||LA74_0==PNAME_NS||LA74_0==OPEN_BRACE||LA74_0==STRING_LITERAL2||LA74_0==INTEGER||LA74_0==OPEN_SQ_BRACKET||(LA74_0>=VAR1 && LA74_0<=VAR2)||(LA74_0>=DECIMAL && LA74_0<=BLANK_NODE_LABEL)) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // IbmSparqlExt.g:423:35: triplesBlock
                    {
                    pushFollow(FOLLOW_triplesBlock_in_groupGraphPatternSubInt2851);
                    triplesBlock168=triplesBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesBlock.add(triplesBlock168.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: graphPatternNotTriples, triplesBlock
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 424:3: -> graphPatternNotTriples ( ^( TRIPLES_BLOCK triplesBlock ) )?
            {
                adaptor.addChild(root_0, stream_graphPatternNotTriples.nextTree());
                // IbmSparqlExt.g:424:30: ( ^( TRIPLES_BLOCK triplesBlock ) )?
                if ( stream_triplesBlock.hasNext() ) {
                    // IbmSparqlExt.g:424:30: ^( TRIPLES_BLOCK triplesBlock )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLES_BLOCK, "TRIPLES_BLOCK"), root_1);

                    adaptor.addChild(root_1, stream_triplesBlock.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_triplesBlock.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupGraphPatternSubInt"

    public static class triplesBlock_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesBlock"
    // IbmSparqlExt.g:427:1: triplesBlock : t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )? -> triplesSameSubjectPath ( ( triplesBlock )+ )? ;
    public final IbmSparqlExtParser.triplesBlock_return triplesBlock() throws RecognitionException {
        IbmSparqlExtParser.triplesBlock_return retval = new IbmSparqlExtParser.triplesBlock_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DOT169=null;
        IbmSparqlExtParser.triplesSameSubjectPath_return t1 = null;

        IbmSparqlExtParser.triplesBlock_return t2 = null;


        XTree DOT169_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_triplesBlock=new RewriteRuleSubtreeStream(adaptor,"rule triplesBlock");
        RewriteRuleSubtreeStream stream_triplesSameSubjectPath=new RewriteRuleSubtreeStream(adaptor,"rule triplesSameSubjectPath");
        try {
            // IbmSparqlExt.g:428:2: (t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )? -> triplesSameSubjectPath ( ( triplesBlock )+ )? )
            // IbmSparqlExt.g:428:7: t1= triplesSameSubjectPath ( DOT (t2= triplesBlock )? )?
            {
            pushFollow(FOLLOW_triplesSameSubjectPath_in_triplesBlock2882);
            t1=triplesSameSubjectPath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_triplesSameSubjectPath.add(t1.getTree());
            // IbmSparqlExt.g:428:33: ( DOT (t2= triplesBlock )? )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==DOT) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // IbmSparqlExt.g:428:35: DOT (t2= triplesBlock )?
                    {
                    DOT169=(Token)match(input,DOT,FOLLOW_DOT_in_triplesBlock2886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT169);

                    // IbmSparqlExt.g:428:41: (t2= triplesBlock )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==IRI_REF||LA75_0==PNAME_NS||LA75_0==OPEN_BRACE||LA75_0==STRING_LITERAL2||LA75_0==INTEGER||LA75_0==OPEN_SQ_BRACKET||(LA75_0>=VAR1 && LA75_0<=VAR2)||(LA75_0>=DECIMAL && LA75_0<=BLANK_NODE_LABEL)) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // IbmSparqlExt.g:428:41: t2= triplesBlock
                            {
                            pushFollow(FOLLOW_triplesBlock_in_triplesBlock2890);
                            t2=triplesBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_triplesBlock.add(t2.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: triplesBlock, triplesSameSubjectPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 428:60: -> triplesSameSubjectPath ( ( triplesBlock )+ )?
            {
                adaptor.addChild(root_0, stream_triplesSameSubjectPath.nextTree());
                // IbmSparqlExt.g:428:87: ( ( triplesBlock )+ )?
                if ( stream_triplesBlock.hasNext() ) {
                    if ( !(stream_triplesBlock.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_triplesBlock.hasNext() ) {
                        adaptor.addChild(root_0, stream_triplesBlock.nextTree());

                    }
                    stream_triplesBlock.reset();

                }
                stream_triplesBlock.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesBlock"

    public static class graphPatternNotTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphPatternNotTriples"
    // IbmSparqlExt.g:431:1: graphPatternNotTriples : ( groupOrUnionGraphPattern | optionalGraphPattern | minusGraphPattern | graphGraphPattern | serviceGraphPattern | filter | bind | inlineData );
    public final IbmSparqlExtParser.graphPatternNotTriples_return graphPatternNotTriples() throws RecognitionException {
        IbmSparqlExtParser.graphPatternNotTriples_return retval = new IbmSparqlExtParser.graphPatternNotTriples_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.groupOrUnionGraphPattern_return groupOrUnionGraphPattern170 = null;

        IbmSparqlExtParser.optionalGraphPattern_return optionalGraphPattern171 = null;

        IbmSparqlExtParser.minusGraphPattern_return minusGraphPattern172 = null;

        IbmSparqlExtParser.graphGraphPattern_return graphGraphPattern173 = null;

        IbmSparqlExtParser.serviceGraphPattern_return serviceGraphPattern174 = null;

        IbmSparqlExtParser.filter_return filter175 = null;

        IbmSparqlExtParser.bind_return bind176 = null;

        IbmSparqlExtParser.inlineData_return inlineData177 = null;



        try {
            // IbmSparqlExt.g:432:2: ( groupOrUnionGraphPattern | optionalGraphPattern | minusGraphPattern | graphGraphPattern | serviceGraphPattern | filter | bind | inlineData )
            int alt77=8;
            switch ( input.LA(1) ) {
            case OPEN_CURLY_BRACE:
                {
                alt77=1;
                }
                break;
            case OPTIONAL:
                {
                alt77=2;
                }
                break;
            case MINUS:
                {
                alt77=3;
                }
                break;
            case GRAPH:
                {
                alt77=4;
                }
                break;
            case SERVICE:
                {
                alt77=5;
                }
                break;
            case FILTER:
                {
                alt77=6;
                }
                break;
            case BIND:
                {
                alt77=7;
                }
                break;
            case VALUES:
                {
                alt77=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // IbmSparqlExt.g:432:7: groupOrUnionGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples2921);
                    groupOrUnionGraphPattern170=groupOrUnionGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupOrUnionGraphPattern170.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:433:10: optionalGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_optionalGraphPattern_in_graphPatternNotTriples2935);
                    optionalGraphPattern171=optionalGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionalGraphPattern171.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:434:10: minusGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_minusGraphPattern_in_graphPatternNotTriples2948);
                    minusGraphPattern172=minusGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, minusGraphPattern172.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:435:10: graphGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_graphGraphPattern_in_graphPatternNotTriples2962);
                    graphGraphPattern173=graphGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphGraphPattern173.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparqlExt.g:436:10: serviceGraphPattern
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_serviceGraphPattern_in_graphPatternNotTriples2976);
                    serviceGraphPattern174=serviceGraphPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, serviceGraphPattern174.getTree());

                    }
                    break;
                case 6 :
                    // IbmSparqlExt.g:437:10: filter
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_filter_in_graphPatternNotTriples2990);
                    filter175=filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filter175.getTree());

                    }
                    break;
                case 7 :
                    // IbmSparqlExt.g:438:10: bind
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_bind_in_graphPatternNotTriples3004);
                    bind176=bind();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bind176.getTree());

                    }
                    break;
                case 8 :
                    // IbmSparqlExt.g:439:10: inlineData
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_inlineData_in_graphPatternNotTriples3017);
                    inlineData177=inlineData();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineData177.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphPatternNotTriples"

    public static class inlineData_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineData"
    // IbmSparqlExt.g:442:1: inlineData : VALUES dataBlock -> ^( VALUES dataBlock ) ;
    public final IbmSparqlExtParser.inlineData_return inlineData() throws RecognitionException {
        IbmSparqlExtParser.inlineData_return retval = new IbmSparqlExtParser.inlineData_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token VALUES178=null;
        IbmSparqlExtParser.dataBlock_return dataBlock179 = null;


        XTree VALUES178_tree=null;
        RewriteRuleTokenStream stream_VALUES=new RewriteRuleTokenStream(adaptor,"token VALUES");
        RewriteRuleSubtreeStream stream_dataBlock=new RewriteRuleSubtreeStream(adaptor,"rule dataBlock");
        try {
            // IbmSparqlExt.g:443:5: ( VALUES dataBlock -> ^( VALUES dataBlock ) )
            // IbmSparqlExt.g:443:10: VALUES dataBlock
            {
            VALUES178=(Token)match(input,VALUES,FOLLOW_VALUES_in_inlineData3037); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VALUES.add(VALUES178);

            pushFollow(FOLLOW_dataBlock_in_inlineData3039);
            dataBlock179=dataBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dataBlock.add(dataBlock179.getTree());


            // AST REWRITE
            // elements: dataBlock, VALUES
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 443:27: -> ^( VALUES dataBlock )
            {
                // IbmSparqlExt.g:443:30: ^( VALUES dataBlock )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_VALUES.nextNode(), root_1);

                adaptor.addChild(root_1, stream_dataBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineData"

    public static class dataBlock_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dataBlock"
    // IbmSparqlExt.g:446:1: dataBlock : ( inlineDataOneVar | inlineDataFull );
    public final IbmSparqlExtParser.dataBlock_return dataBlock() throws RecognitionException {
        IbmSparqlExtParser.dataBlock_return retval = new IbmSparqlExtParser.dataBlock_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.inlineDataOneVar_return inlineDataOneVar180 = null;

        IbmSparqlExtParser.inlineDataFull_return inlineDataFull181 = null;



        try {
            // IbmSparqlExt.g:447:5: ( inlineDataOneVar | inlineDataFull )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( ((LA78_0>=VAR1 && LA78_0<=VAR2)) ) {
                alt78=1;
            }
            else if ( (LA78_0==OPEN_BRACE) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // IbmSparqlExt.g:447:10: inlineDataOneVar
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_inlineDataOneVar_in_dataBlock3067);
                    inlineDataOneVar180=inlineDataOneVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDataOneVar180.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:447:29: inlineDataFull
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_inlineDataFull_in_dataBlock3071);
                    inlineDataFull181=inlineDataFull();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDataFull181.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "dataBlock"

    public static class inlineDataOneVar_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineDataOneVar"
    // IbmSparqlExt.g:450:1: inlineDataOneVar : v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA $v ( $b)* ) ;
    public final IbmSparqlExtParser.inlineDataOneVar_return inlineDataOneVar() throws RecognitionException {
        IbmSparqlExtParser.inlineDataOneVar_return retval = new IbmSparqlExtParser.inlineDataOneVar_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_CURLY_BRACE182=null;
        Token CLOSE_CURLY_BRACE183=null;
        List list_b=null;
        IbmSparqlExtParser.var_return v = null;

        RuleReturnScope b = null;
        XTree OPEN_CURLY_BRACE182_tree=null;
        XTree CLOSE_CURLY_BRACE183_tree=null;
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_dataBlockValue=new RewriteRuleSubtreeStream(adaptor,"rule dataBlockValue");
        try {
            // IbmSparqlExt.g:451:5: (v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA $v ( $b)* ) )
            // IbmSparqlExt.g:451:10: v= var OPEN_CURLY_BRACE (b+= dataBlockValue )* CLOSE_CURLY_BRACE
            {
            pushFollow(FOLLOW_var_in_inlineDataOneVar3093);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());
            OPEN_CURLY_BRACE182=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_inlineDataOneVar3095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE182);

            // IbmSparqlExt.g:451:34: (b+= dataBlockValue )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==IRI_REF||LA79_0==PNAME_NS||LA79_0==STRING_LITERAL2||LA79_0==INTEGER||LA79_0==UNDEF||(LA79_0>=DECIMAL && LA79_0<=PNAME_LN)) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // IbmSparqlExt.g:451:34: b+= dataBlockValue
            	    {
            	    pushFollow(FOLLOW_dataBlockValue_in_inlineDataOneVar3099);
            	    b=dataBlockValue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dataBlockValue.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            CLOSE_CURLY_BRACE183=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataOneVar3102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE183);



            // AST REWRITE
            // elements: b, v
            // token labels: 
            // rule labels: v, retval
            // token list labels: 
            // rule list labels: b
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (XTree)adaptor.nil();
            // 451:70: -> ^( INLINE_DATA $v ( $b)* )
            {
                // IbmSparqlExt.g:451:73: ^( INLINE_DATA $v ( $b)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INLINE_DATA, "INLINE_DATA"), root_1);

                adaptor.addChild(root_1, stream_v.nextTree());
                // IbmSparqlExt.g:451:90: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineDataOneVar"

    public static class inlineDataFull_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inlineDataFull"
    // IbmSparqlExt.g:454:1: inlineDataFull : OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA ( $v)* ( $b)* ) ;
    public final IbmSparqlExtParser.inlineDataFull_return inlineDataFull() throws RecognitionException {
        IbmSparqlExtParser.inlineDataFull_return retval = new IbmSparqlExtParser.inlineDataFull_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE184=null;
        Token CLOSE_BRACE185=null;
        Token OPEN_CURLY_BRACE186=null;
        Token OPEN_BRACE187=null;
        Token CLOSE_BRACE188=null;
        Token CLOSE_CURLY_BRACE189=null;
        List list_v=null;
        List list_b=null;
        RuleReturnScope v = null;
        RuleReturnScope b = null;
        XTree OPEN_BRACE184_tree=null;
        XTree CLOSE_BRACE185_tree=null;
        XTree OPEN_CURLY_BRACE186_tree=null;
        XTree OPEN_BRACE187_tree=null;
        XTree CLOSE_BRACE188_tree=null;
        XTree CLOSE_CURLY_BRACE189_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_dataBlockValue=new RewriteRuleSubtreeStream(adaptor,"rule dataBlockValue");
        try {
            // IbmSparqlExt.g:455:5: ( OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE -> ^( INLINE_DATA ( $v)* ( $b)* ) )
            // IbmSparqlExt.g:455:10: OPEN_BRACE (v+= var )* CLOSE_BRACE OPEN_CURLY_BRACE ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )* CLOSE_CURLY_BRACE
            {
            OPEN_BRACE184=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_inlineDataFull3135); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE184);

            // IbmSparqlExt.g:455:22: (v+= var )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( ((LA80_0>=VAR1 && LA80_0<=VAR2)) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // IbmSparqlExt.g:455:22: v+= var
            	    {
            	    pushFollow(FOLLOW_var_in_inlineDataFull3139);
            	    v=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
            	    if (list_v==null) list_v=new ArrayList();
            	    list_v.add(v.getTree());


            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);

            CLOSE_BRACE185=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_inlineDataFull3142); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE185);

            OPEN_CURLY_BRACE186=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_inlineDataFull3144); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(OPEN_CURLY_BRACE186);

            // IbmSparqlExt.g:455:58: ( OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==OPEN_BRACE) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // IbmSparqlExt.g:455:60: OPEN_BRACE (b+= dataBlockValue )* CLOSE_BRACE
            	    {
            	    OPEN_BRACE187=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_inlineDataFull3148); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE187);

            	    // IbmSparqlExt.g:455:72: (b+= dataBlockValue )*
            	    loop81:
            	    do {
            	        int alt81=2;
            	        int LA81_0 = input.LA(1);

            	        if ( (LA81_0==IRI_REF||LA81_0==PNAME_NS||LA81_0==STRING_LITERAL2||LA81_0==INTEGER||LA81_0==UNDEF||(LA81_0>=DECIMAL && LA81_0<=PNAME_LN)) ) {
            	            alt81=1;
            	        }


            	        switch (alt81) {
            	    	case 1 :
            	    	    // IbmSparqlExt.g:455:72: b+= dataBlockValue
            	    	    {
            	    	    pushFollow(FOLLOW_dataBlockValue_in_inlineDataFull3152);
            	    	    b=dataBlockValue();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) stream_dataBlockValue.add(b.getTree());
            	    	    if (list_b==null) list_b=new ArrayList();
            	    	    list_b.add(b.getTree());


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop81;
            	        }
            	    } while (true);

            	    CLOSE_BRACE188=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_inlineDataFull3155); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE188);


            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            CLOSE_CURLY_BRACE189=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataFull3160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(CLOSE_CURLY_BRACE189);



            // AST REWRITE
            // elements: b, v
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: v, b
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
            root_0 = (XTree)adaptor.nil();
            // 455:124: -> ^( INLINE_DATA ( $v)* ( $b)* )
            {
                // IbmSparqlExt.g:455:127: ^( INLINE_DATA ( $v)* ( $b)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INLINE_DATA, "INLINE_DATA"), root_1);

                // IbmSparqlExt.g:455:141: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();
                // IbmSparqlExt.g:455:145: ( $b)*
                while ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextTree());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "inlineDataFull"

    public static class dataBlockValue_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dataBlockValue"
    // IbmSparqlExt.g:458:1: dataBlockValue : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF );
    public final IbmSparqlExtParser.dataBlockValue_return dataBlockValue() throws RecognitionException {
        IbmSparqlExtParser.dataBlockValue_return retval = new IbmSparqlExtParser.dataBlockValue_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token UNDEF194=null;
        IbmSparqlExtParser.iRIref_return iRIref190 = null;

        IbmSparqlExtParser.rDFLiteral_return rDFLiteral191 = null;

        IbmSparqlExtParser.numericLiteral_return numericLiteral192 = null;

        IbmSparqlExtParser.booleanLiteral_return booleanLiteral193 = null;


        XTree UNDEF194_tree=null;

        try {
            // IbmSparqlExt.g:459:2: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | UNDEF )
            int alt83=5;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt83=1;
                }
                break;
            case STRING_LITERAL2:
            case STRING_LITERAL1:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt83=2;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt83=3;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt83=4;
                }
                break;
            case UNDEF:
                {
                alt83=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }

            switch (alt83) {
                case 1 :
                    // IbmSparqlExt.g:459:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIref_in_dataBlockValue3194);
                    iRIref190=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref190.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:459:16: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_rDFLiteral_in_dataBlockValue3198);
                    rDFLiteral191=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral191.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:459:29: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_dataBlockValue3202);
                    numericLiteral192=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral192.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:459:46: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_dataBlockValue3206);
                    booleanLiteral193=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral193.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparqlExt.g:459:63: UNDEF
                    {
                    root_0 = (XTree)adaptor.nil();

                    UNDEF194=(Token)match(input,UNDEF,FOLLOW_UNDEF_in_dataBlockValue3210); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNDEF194_tree = (XTree)adaptor.create(UNDEF194);
                    adaptor.addChild(root_0, UNDEF194_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "dataBlockValue"

    public static class optionalGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "optionalGraphPattern"
    // IbmSparqlExt.g:461:1: optionalGraphPattern : OPTIONAL g= groupGraphPattern -> ^( OPTIONAL $g) ;
    public final IbmSparqlExtParser.optionalGraphPattern_return optionalGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.optionalGraphPattern_return retval = new IbmSparqlExtParser.optionalGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPTIONAL195=null;
        IbmSparqlExtParser.groupGraphPattern_return g = null;


        XTree OPTIONAL195_tree=null;
        RewriteRuleTokenStream stream_OPTIONAL=new RewriteRuleTokenStream(adaptor,"token OPTIONAL");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparqlExt.g:462:2: ( OPTIONAL g= groupGraphPattern -> ^( OPTIONAL $g) )
            // IbmSparqlExt.g:462:7: OPTIONAL g= groupGraphPattern
            {
            OPTIONAL195=(Token)match(input,OPTIONAL,FOLLOW_OPTIONAL_in_optionalGraphPattern3223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPTIONAL.add(OPTIONAL195);

            pushFollow(FOLLOW_groupGraphPattern_in_optionalGraphPattern3227);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());


            // AST REWRITE
            // elements: OPTIONAL, g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 464:3: -> ^( OPTIONAL $g)
            {
                // IbmSparqlExt.g:464:7: ^( OPTIONAL $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_OPTIONAL.nextNode(), root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "optionalGraphPattern"

    public static class graphGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphGraphPattern"
    // IbmSparqlExt.g:467:1: graphGraphPattern : GRAPH v= varOrIRIref g= groupGraphPattern -> ^( GRAPH $v $g) ;
    public final IbmSparqlExtParser.graphGraphPattern_return graphGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.graphGraphPattern_return retval = new IbmSparqlExtParser.graphGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token GRAPH196=null;
        IbmSparqlExtParser.varOrIRIref_return v = null;

        IbmSparqlExtParser.groupGraphPattern_return g = null;


        XTree GRAPH196_tree=null;
        RewriteRuleTokenStream stream_GRAPH=new RewriteRuleTokenStream(adaptor,"token GRAPH");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparqlExt.g:468:2: ( GRAPH v= varOrIRIref g= groupGraphPattern -> ^( GRAPH $v $g) )
            // IbmSparqlExt.g:468:7: GRAPH v= varOrIRIref g= groupGraphPattern
            {
            GRAPH196=(Token)match(input,GRAPH,FOLLOW_GRAPH_in_graphGraphPattern3257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GRAPH.add(GRAPH196);

            pushFollow(FOLLOW_varOrIRIref_in_graphGraphPattern3261);
            v=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());
            pushFollow(FOLLOW_groupGraphPattern_in_graphGraphPattern3265);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());


            // AST REWRITE
            // elements: GRAPH, v, g
            // token labels: 
            // rule labels: g, v, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 470:3: -> ^( GRAPH $v $g)
            {
                // IbmSparqlExt.g:470:7: ^( GRAPH $v $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_GRAPH.nextNode(), root_1);

                adaptor.addChild(root_1, stream_v.nextTree());
                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphGraphPattern"

    public static class serviceGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "serviceGraphPattern"
    // IbmSparqlExt.g:473:1: serviceGraphPattern : SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern -> ^( SERVICE ( $s)? $v $g) ;
    public final IbmSparqlExtParser.serviceGraphPattern_return serviceGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.serviceGraphPattern_return retval = new IbmSparqlExtParser.serviceGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token s=null;
        Token SERVICE197=null;
        IbmSparqlExtParser.varOrIRIref_return v = null;

        IbmSparqlExtParser.groupGraphPattern_return g = null;


        XTree s_tree=null;
        XTree SERVICE197_tree=null;
        RewriteRuleTokenStream stream_SILENT=new RewriteRuleTokenStream(adaptor,"token SILENT");
        RewriteRuleTokenStream stream_SERVICE=new RewriteRuleTokenStream(adaptor,"token SERVICE");
        RewriteRuleSubtreeStream stream_varOrIRIref=new RewriteRuleSubtreeStream(adaptor,"rule varOrIRIref");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparqlExt.g:475:2: ( SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern -> ^( SERVICE ( $s)? $v $g) )
            // IbmSparqlExt.g:475:7: SERVICE (s= SILENT )? v= varOrIRIref g= groupGraphPattern
            {
            SERVICE197=(Token)match(input,SERVICE,FOLLOW_SERVICE_in_serviceGraphPattern3307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SERVICE.add(SERVICE197);

            // IbmSparqlExt.g:475:16: (s= SILENT )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==SILENT) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // IbmSparqlExt.g:475:16: s= SILENT
                    {
                    s=(Token)match(input,SILENT,FOLLOW_SILENT_in_serviceGraphPattern3311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SILENT.add(s);


                    }
                    break;

            }

            pushFollow(FOLLOW_varOrIRIref_in_serviceGraphPattern3316);
            v=varOrIRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_varOrIRIref.add(v.getTree());
            pushFollow(FOLLOW_groupGraphPattern_in_serviceGraphPattern3320);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());


            // AST REWRITE
            // elements: SERVICE, s, g, v
            // token labels: s
            // rule labels: v, g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 477:3: -> ^( SERVICE ( $s)? $v $g)
            {
                // IbmSparqlExt.g:477:7: ^( SERVICE ( $s)? $v $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_SERVICE.nextNode(), root_1);

                // IbmSparqlExt.g:477:19: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_v.nextTree());
                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               ((XTree)retval.tree).matched = input.toString(retval.start,input.LT(-1)); 
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "serviceGraphPattern"

    public static class bind_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bind"
    // IbmSparqlExt.g:481:1: bind : ( bind1 | bind2 );
    public final IbmSparqlExtParser.bind_return bind() throws RecognitionException {
        IbmSparqlExtParser.bind_return retval = new IbmSparqlExtParser.bind_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.bind1_return bind1198 = null;

        IbmSparqlExtParser.bind2_return bind2199 = null;



        try {
            // IbmSparqlExt.g:482:2: ( bind1 | bind2 )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==BIND) ) {
                int LA85_1 = input.LA(2);

                if ( (LA85_1==OPEN_BRACE) ) {
                    int LA85_2 = input.LA(3);

                    if ( (LA85_2==IRI_REF||LA85_2==PNAME_NS||LA85_2==OPEN_BRACE||LA85_2==STRING_LITERAL2||LA85_2==INTEGER||(LA85_2>=VAR1 && LA85_2<=VAR2)||(LA85_2>=NOT && LA85_2<=GROUP_CONCAT)||(LA85_2>=DECIMAL && LA85_2<=PNAME_LN)||(LA85_2>=262 && LA85_2<=263)||LA85_2==268) ) {
                        alt85=1;
                    }
                    else if ( (LA85_2==VARNAME) ) {
                        alt85=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    // IbmSparqlExt.g:482:4: bind1
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_bind1_in_bind3359);
                    bind1198=bind1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bind1198.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:483:4: bind2
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_bind2_in_bind3364);
                    bind2199=bind2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bind2199.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "bind"

    public static class bind1_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bind1"
    // IbmSparqlExt.g:487:1: bind1 : BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( BIND $v $e) ;
    public final IbmSparqlExtParser.bind1_return bind1() throws RecognitionException {
        IbmSparqlExtParser.bind1_return retval = new IbmSparqlExtParser.bind1_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token BIND200=null;
        Token OPEN_BRACE201=null;
        Token AS202=null;
        Token CLOSE_BRACE203=null;
        IbmSparqlExtParser.expression_return e = null;

        IbmSparqlExtParser.var_return v = null;


        XTree BIND200_tree=null;
        XTree OPEN_BRACE201_tree=null;
        XTree AS202_tree=null;
        XTree CLOSE_BRACE203_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // IbmSparqlExt.g:488:2: ( BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE -> ^( BIND $v $e) )
            // IbmSparqlExt.g:488:7: BIND OPEN_BRACE e= expression AS v= var CLOSE_BRACE
            {
            BIND200=(Token)match(input,BIND,FOLLOW_BIND_in_bind13380); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND200);

            OPEN_BRACE201=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bind13382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE201);

            pushFollow(FOLLOW_expression_in_bind13386);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());
            AS202=(Token)match(input,AS,FOLLOW_AS_in_bind13388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS202);

            pushFollow(FOLLOW_var_in_bind13392);
            v=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_var.add(v.getTree());
            CLOSE_BRACE203=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bind13394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE203);



            // AST REWRITE
            // elements: v, BIND, e
            // token labels: 
            // rule labels: v, retval, e
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 490:3: -> ^( BIND $v $e)
            {
                // IbmSparqlExt.g:490:7: ^( BIND $v $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_BIND.nextNode(), root_1);

                adaptor.addChild(root_1, stream_v.nextTree());
                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "bind1"

    public static class bind2_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bind2"
    // IbmSparqlExt.g:494:1: bind2 : BIND OPEN_BRACE f= funcCall AS OPEN_BRACE (v+= var )+ CLOSE_BRACE CLOSE_BRACE -> ^( BIND $f ( $v)* ) ;
    public final IbmSparqlExtParser.bind2_return bind2() throws RecognitionException {
        IbmSparqlExtParser.bind2_return retval = new IbmSparqlExtParser.bind2_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token BIND204=null;
        Token OPEN_BRACE205=null;
        Token AS206=null;
        Token OPEN_BRACE207=null;
        Token CLOSE_BRACE208=null;
        Token CLOSE_BRACE209=null;
        List list_v=null;
        IbmSparqlExtParser.funcCall_return f = null;

        RuleReturnScope v = null;
        XTree BIND204_tree=null;
        XTree OPEN_BRACE205_tree=null;
        XTree AS206_tree=null;
        XTree OPEN_BRACE207_tree=null;
        XTree CLOSE_BRACE208_tree=null;
        XTree CLOSE_BRACE209_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_funcCall=new RewriteRuleSubtreeStream(adaptor,"rule funcCall");
        try {
            // IbmSparqlExt.g:495:2: ( BIND OPEN_BRACE f= funcCall AS OPEN_BRACE (v+= var )+ CLOSE_BRACE CLOSE_BRACE -> ^( BIND $f ( $v)* ) )
            // IbmSparqlExt.g:495:7: BIND OPEN_BRACE f= funcCall AS OPEN_BRACE (v+= var )+ CLOSE_BRACE CLOSE_BRACE
            {
            BIND204=(Token)match(input,BIND,FOLLOW_BIND_in_bind23430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BIND.add(BIND204);

            OPEN_BRACE205=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bind23432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE205);

            pushFollow(FOLLOW_funcCall_in_bind23436);
            f=funcCall();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcCall.add(f.getTree());
            AS206=(Token)match(input,AS,FOLLOW_AS_in_bind23438); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS206);

            OPEN_BRACE207=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_bind23440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE207);

            // IbmSparqlExt.g:495:49: (v+= var )+
            int cnt86=0;
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( ((LA86_0>=VAR1 && LA86_0<=VAR2)) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // IbmSparqlExt.g:495:49: v+= var
            	    {
            	    pushFollow(FOLLOW_var_in_bind23444);
            	    v=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
            	    if (list_v==null) list_v=new ArrayList();
            	    list_v.add(v.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt86 >= 1 ) break loop86;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(86, input);
                        throw eee;
                }
                cnt86++;
            } while (true);

            CLOSE_BRACE208=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bind23447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE208);

            CLOSE_BRACE209=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_bind23449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE209);



            // AST REWRITE
            // elements: v, f, BIND
            // token labels: 
            // rule labels: f, retval
            // token list labels: 
            // rule list labels: v
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (XTree)adaptor.nil();
            // 497:3: -> ^( BIND $f ( $v)* )
            {
                // IbmSparqlExt.g:497:7: ^( BIND $f ( $v)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_BIND.nextNode(), root_1);

                adaptor.addChild(root_1, stream_f.nextTree());
                // IbmSparqlExt.g:497:20: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "bind2"

    public static class funcCall_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcCall"
    // IbmSparqlExt.g:500:1: funcCall : fn= VARNAME OPEN_BRACE (v+= var )+ CLOSE_BRACE -> ^( FUNCCALL $fn ( $v)* ) ;
    public final IbmSparqlExtParser.funcCall_return funcCall() throws RecognitionException {
        IbmSparqlExtParser.funcCall_return retval = new IbmSparqlExtParser.funcCall_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token fn=null;
        Token OPEN_BRACE210=null;
        Token CLOSE_BRACE211=null;
        List list_v=null;
        RuleReturnScope v = null;
        XTree fn_tree=null;
        XTree OPEN_BRACE210_tree=null;
        XTree CLOSE_BRACE211_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_VARNAME=new RewriteRuleTokenStream(adaptor,"token VARNAME");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        try {
            // IbmSparqlExt.g:501:2: (fn= VARNAME OPEN_BRACE (v+= var )+ CLOSE_BRACE -> ^( FUNCCALL $fn ( $v)* ) )
            // IbmSparqlExt.g:501:7: fn= VARNAME OPEN_BRACE (v+= var )+ CLOSE_BRACE
            {
            fn=(Token)match(input,VARNAME,FOLLOW_VARNAME_in_funcCall3488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARNAME.add(fn);

            OPEN_BRACE210=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_funcCall3490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE210);

            // IbmSparqlExt.g:501:30: (v+= var )+
            int cnt87=0;
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( ((LA87_0>=VAR1 && LA87_0<=VAR2)) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // IbmSparqlExt.g:501:30: v+= var
            	    {
            	    pushFollow(FOLLOW_var_in_funcCall3494);
            	    v=var();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_var.add(v.getTree());
            	    if (list_v==null) list_v=new ArrayList();
            	    list_v.add(v.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt87 >= 1 ) break loop87;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(87, input);
                        throw eee;
                }
                cnt87++;
            } while (true);

            CLOSE_BRACE211=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_funcCall3497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE211);



            // AST REWRITE
            // elements: fn, v
            // token labels: fn
            // rule labels: retval
            // token list labels: 
            // rule list labels: v
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_fn=new RewriteRuleTokenStream(adaptor,"token fn",fn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",list_v);
            root_0 = (XTree)adaptor.nil();
            // 502:3: -> ^( FUNCCALL $fn ( $v)* )
            {
                // IbmSparqlExt.g:502:7: ^( FUNCCALL $fn ( $v)* )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(FUNCCALL, "FUNCCALL"), root_1);

                adaptor.addChild(root_1, stream_fn.nextNode());
                // IbmSparqlExt.g:502:25: ( $v)*
                while ( stream_v.hasNext() ) {
                    adaptor.addChild(root_1, stream_v.nextTree());

                }
                stream_v.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcCall"

    public static class groupOrUnionGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupOrUnionGraphPattern"
    // IbmSparqlExt.g:505:1: groupOrUnionGraphPattern : g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1) ;
    public final IbmSparqlExtParser.groupOrUnionGraphPattern_return groupOrUnionGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.groupOrUnionGraphPattern_return retval = new IbmSparqlExtParser.groupOrUnionGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token UNION212=null;
        List list_g2=null;
        IbmSparqlExtParser.groupGraphPattern_return g1 = null;

        RuleReturnScope g2 = null;
        XTree UNION212_tree=null;
        RewriteRuleTokenStream stream_UNION=new RewriteRuleTokenStream(adaptor,"token UNION");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparqlExt.g:506:2: (g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1) )
            // IbmSparqlExt.g:506:7: g1= groupGraphPattern ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1)
            {
            pushFollow(FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3533);
            g1=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g1.getTree());
            // IbmSparqlExt.g:506:28: ( ( UNION g2+= groupGraphPattern )+ -> ^( UNION $g1 ( $g2)+ ) | -> $g1)
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==UNION) ) {
                alt89=1;
            }
            else if ( (LA89_0==IRI_REF||LA89_0==PNAME_NS||LA89_0==OPEN_BRACE||(LA89_0>=OPEN_CURLY_BRACE && LA89_0<=CLOSE_CURLY_BRACE)||LA89_0==INTEGER||LA89_0==GRAPH||(LA89_0>=DOT && LA89_0<=BIND)||(LA89_0>=MINUS && LA89_0<=FILTER)||LA89_0==OPEN_SQ_BRACKET||(LA89_0>=VAR1 && LA89_0<=VAR2)||(LA89_0>=DECIMAL && LA89_0<=BLANK_NODE_LABEL)) ) {
                alt89=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // IbmSparqlExt.g:506:30: ( UNION g2+= groupGraphPattern )+
                    {
                    // IbmSparqlExt.g:506:30: ( UNION g2+= groupGraphPattern )+
                    int cnt88=0;
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==UNION) ) {
                            alt88=1;
                        }


                        switch (alt88) {
                    	case 1 :
                    	    // IbmSparqlExt.g:506:32: UNION g2+= groupGraphPattern
                    	    {
                    	    UNION212=(Token)match(input,UNION,FOLLOW_UNION_in_groupOrUnionGraphPattern3539); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_UNION.add(UNION212);

                    	    pushFollow(FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3543);
                    	    g2=groupGraphPattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_groupGraphPattern.add(g2.getTree());
                    	    if (list_g2==null) list_g2=new ArrayList();
                    	    list_g2.add(g2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt88 >= 1 ) break loop88;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(88, input);
                                throw eee;
                        }
                        cnt88++;
                    } while (true);



                    // AST REWRITE
                    // elements: UNION, g2, g1
                    // token labels: 
                    // rule labels: retval, g1
                    // token list labels: 
                    // rule list labels: g2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_g1=new RewriteRuleSubtreeStream(adaptor,"rule g1",g1!=null?g1.tree:null);
                    RewriteRuleSubtreeStream stream_g2=new RewriteRuleSubtreeStream(adaptor,"token g2",list_g2);
                    root_0 = (XTree)adaptor.nil();
                    // 506:63: -> ^( UNION $g1 ( $g2)+ )
                    {
                        // IbmSparqlExt.g:506:66: ^( UNION $g1 ( $g2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_UNION.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_g1.nextTree());
                        if ( !(stream_g2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_g2.hasNext() ) {
                            adaptor.addChild(root_1, stream_g2.nextTree());

                        }
                        stream_g2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:506:90: 
                    {

                    // AST REWRITE
                    // elements: g1
                    // token labels: 
                    // rule labels: retval, g1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_g1=new RewriteRuleSubtreeStream(adaptor,"rule g1",g1!=null?g1.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 506:90: -> $g1
                    {
                        adaptor.addChild(root_0, stream_g1.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupOrUnionGraphPattern"

    public static class minusGraphPattern_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minusGraphPattern"
    // IbmSparqlExt.g:509:1: minusGraphPattern : MINUS n= groupGraphPattern -> ^( MINUS $n) ;
    public final IbmSparqlExtParser.minusGraphPattern_return minusGraphPattern() throws RecognitionException {
        IbmSparqlExtParser.minusGraphPattern_return retval = new IbmSparqlExtParser.minusGraphPattern_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token MINUS213=null;
        IbmSparqlExtParser.groupGraphPattern_return n = null;


        XTree MINUS213_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparqlExt.g:510:5: ( MINUS n= groupGraphPattern -> ^( MINUS $n) )
            // IbmSparqlExt.g:510:10: MINUS n= groupGraphPattern
            {
            MINUS213=(Token)match(input,MINUS,FOLLOW_MINUS_in_minusGraphPattern3590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(MINUS213);

            pushFollow(FOLLOW_groupGraphPattern_in_minusGraphPattern3594);
            n=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(n.getTree());


            // AST REWRITE
            // elements: n, MINUS
            // token labels: 
            // rule labels: retval, n
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 510:36: -> ^( MINUS $n)
            {
                // IbmSparqlExt.g:510:39: ^( MINUS $n)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_MINUS.nextNode(), root_1);

                adaptor.addChild(root_1, stream_n.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "minusGraphPattern"

    public static class filter_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "filter"
    // IbmSparqlExt.g:513:1: filter : FILTER c= constraint -> ^( FILTER $c) ;
    public final IbmSparqlExtParser.filter_return filter() throws RecognitionException {
        IbmSparqlExtParser.filter_return retval = new IbmSparqlExtParser.filter_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token FILTER214=null;
        IbmSparqlExtParser.constraint_return c = null;


        XTree FILTER214_tree=null;
        RewriteRuleTokenStream stream_FILTER=new RewriteRuleTokenStream(adaptor,"token FILTER");
        RewriteRuleSubtreeStream stream_constraint=new RewriteRuleSubtreeStream(adaptor,"rule constraint");
        try {
            // IbmSparqlExt.g:514:2: ( FILTER c= constraint -> ^( FILTER $c) )
            // IbmSparqlExt.g:514:7: FILTER c= constraint
            {
            FILTER214=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter3620); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FILTER.add(FILTER214);

            pushFollow(FOLLOW_constraint_in_filter3624);
            c=constraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constraint.add(c.getTree());


            // AST REWRITE
            // elements: FILTER, c
            // token labels: 
            // rule labels: retval, c
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 516:3: -> ^( FILTER $c)
            {
                // IbmSparqlExt.g:516:7: ^( FILTER $c)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_FILTER.nextNode(), root_1);

                adaptor.addChild(root_1, stream_c.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "filter"

    public static class constraint_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constraint"
    // IbmSparqlExt.g:519:1: constraint : ( brackettedExpression | builtInCall | functionCall );
    public final IbmSparqlExtParser.constraint_return constraint() throws RecognitionException {
        IbmSparqlExtParser.constraint_return retval = new IbmSparqlExtParser.constraint_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.brackettedExpression_return brackettedExpression215 = null;

        IbmSparqlExtParser.builtInCall_return builtInCall216 = null;

        IbmSparqlExtParser.functionCall_return functionCall217 = null;



        try {
            // IbmSparqlExt.g:520:2: ( brackettedExpression | builtInCall | functionCall )
            int alt90=3;
            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt90=1;
                }
                break;
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case UUID:
            case STRUUID:
            case MD5:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
                {
                alt90=2;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt90=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // IbmSparqlExt.g:520:7: brackettedExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_brackettedExpression_in_constraint3655);
                    brackettedExpression215=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression215.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:520:30: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_builtInCall_in_constraint3659);
                    builtInCall216=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall216.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:520:44: functionCall
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_functionCall_in_constraint3663);
                    functionCall217=functionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionCall217.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "constraint"

    public static class functionCall_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionCall"
    // IbmSparqlExt.g:523:1: functionCall : i= iRIref a= argList -> ^( FUNCTION $i $a) ;
    public final IbmSparqlExtParser.functionCall_return functionCall() throws RecognitionException {
        IbmSparqlExtParser.functionCall_return retval = new IbmSparqlExtParser.functionCall_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.iRIref_return i = null;

        IbmSparqlExtParser.argList_return a = null;


        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
        try {
            // IbmSparqlExt.g:524:2: (i= iRIref a= argList -> ^( FUNCTION $i $a) )
            // IbmSparqlExt.g:524:7: i= iRIref a= argList
            {
            pushFollow(FOLLOW_iRIref_in_functionCall3679);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());
            pushFollow(FOLLOW_argList_in_functionCall3683);
            a=argList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_argList.add(a.getTree());


            // AST REWRITE
            // elements: i, a
            // token labels: 
            // rule labels: retval, a, i
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 526:3: -> ^( FUNCTION $i $a)
            {
                // IbmSparqlExt.g:526:7: ^( FUNCTION $i $a)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_i.nextTree());
                adaptor.addChild(root_1, stream_a.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "functionCall"

    public static class argList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argList"
    // IbmSparqlExt.g:529:1: argList : ( nil -> NIL | OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> ( $d)? $e1 ( $e2)* );
    public final IbmSparqlExtParser.argList_return argList() throws RecognitionException {
        IbmSparqlExtParser.argList_return retval = new IbmSparqlExtParser.argList_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token d=null;
        Token OPEN_BRACE219=null;
        Token COMMA220=null;
        Token CLOSE_BRACE221=null;
        List list_e2=null;
        IbmSparqlExtParser.expression_return e1 = null;

        IbmSparqlExtParser.nil_return nil218 = null;

        RuleReturnScope e2 = null;
        XTree d_tree=null;
        XTree OPEN_BRACE219_tree=null;
        XTree COMMA220_tree=null;
        XTree CLOSE_BRACE221_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try {
            // IbmSparqlExt.g:530:2: ( nil -> NIL | OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> ( $d)? $e1 ( $e2)* )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==OPEN_BRACE) ) {
                int LA93_1 = input.LA(2);

                if ( (LA93_1==CLOSE_BRACE) ) {
                    alt93=1;
                }
                else if ( (LA93_1==IRI_REF||LA93_1==PNAME_NS||LA93_1==OPEN_BRACE||LA93_1==STRING_LITERAL2||LA93_1==DISTINCT||LA93_1==INTEGER||(LA93_1>=VAR1 && LA93_1<=VAR2)||(LA93_1>=NOT && LA93_1<=GROUP_CONCAT)||(LA93_1>=DECIMAL && LA93_1<=PNAME_LN)||(LA93_1>=262 && LA93_1<=263)||LA93_1==268) ) {
                    alt93=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // IbmSparqlExt.g:530:7: nil
                    {
                    pushFollow(FOLLOW_nil_in_argList3716);
                    nil218=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil218.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 530:13: -> NIL
                    {
                        adaptor.addChild(root_0, (XTree)adaptor.create(NIL, "NIL"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:531:7: OPEN_BRACE (d= DISTINCT )? e1= expression ( COMMA e2+= expression )* CLOSE_BRACE
                    {
                    OPEN_BRACE219=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_argList3731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE219);

                    // IbmSparqlExt.g:531:19: (d= DISTINCT )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==DISTINCT) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // IbmSparqlExt.g:531:19: d= DISTINCT
                            {
                            d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_argList3735); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_argList3740);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
                    // IbmSparqlExt.g:531:44: ( COMMA e2+= expression )*
                    loop92:
                    do {
                        int alt92=2;
                        int LA92_0 = input.LA(1);

                        if ( (LA92_0==COMMA) ) {
                            alt92=1;
                        }


                        switch (alt92) {
                    	case 1 :
                    	    // IbmSparqlExt.g:531:46: COMMA e2+= expression
                    	    {
                    	    COMMA220=(Token)match(input,COMMA,FOLLOW_COMMA_in_argList3744); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA220);

                    	    pushFollow(FOLLOW_expression_in_argList3748);
                    	    e2=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    	    if (list_e2==null) list_e2=new ArrayList();
                    	    list_e2.add(e2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop92;
                        }
                    } while (true);

                    CLOSE_BRACE221=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_argList3753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE221);



                    // AST REWRITE
                    // elements: e2, e1, d
                    // token labels: d
                    // rule labels: retval, e1
                    // token list labels: 
                    // rule list labels: e2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"token e2",list_e2);
                    root_0 = (XTree)adaptor.nil();
                    // 532:10: -> ( $d)? $e1 ( $e2)*
                    {
                        // IbmSparqlExt.g:532:14: ( $d)?
                        if ( stream_d.hasNext() ) {
                            adaptor.addChild(root_0, stream_d.nextNode());

                        }
                        stream_d.reset();
                        adaptor.addChild(root_0, stream_e1.nextTree());
                        // IbmSparqlExt.g:532:23: ( $e2)*
                        while ( stream_e2.hasNext() ) {
                            adaptor.addChild(root_0, stream_e2.nextTree());

                        }
                        stream_e2.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "argList"

    public static class expressionList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // IbmSparqlExt.g:535:1: expressionList : ( nil -> NIL | OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> $e1 ( $e2)* );
    public final IbmSparqlExtParser.expressionList_return expressionList() throws RecognitionException {
        IbmSparqlExtParser.expressionList_return retval = new IbmSparqlExtParser.expressionList_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE223=null;
        Token COMMA224=null;
        Token CLOSE_BRACE225=null;
        List list_e2=null;
        IbmSparqlExtParser.expression_return e1 = null;

        IbmSparqlExtParser.nil_return nil222 = null;

        RuleReturnScope e2 = null;
        XTree OPEN_BRACE223_tree=null;
        XTree COMMA224_tree=null;
        XTree CLOSE_BRACE225_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try {
            // IbmSparqlExt.g:536:2: ( nil -> NIL | OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE -> $e1 ( $e2)* )
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==OPEN_BRACE) ) {
                int LA95_1 = input.LA(2);

                if ( (LA95_1==CLOSE_BRACE) ) {
                    alt95=1;
                }
                else if ( (LA95_1==IRI_REF||LA95_1==PNAME_NS||LA95_1==OPEN_BRACE||LA95_1==STRING_LITERAL2||LA95_1==INTEGER||(LA95_1>=VAR1 && LA95_1<=VAR2)||(LA95_1>=NOT && LA95_1<=GROUP_CONCAT)||(LA95_1>=DECIMAL && LA95_1<=PNAME_LN)||(LA95_1>=262 && LA95_1<=263)||LA95_1==268) ) {
                    alt95=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;
            }
            switch (alt95) {
                case 1 :
                    // IbmSparqlExt.g:536:7: nil
                    {
                    pushFollow(FOLLOW_nil_in_expressionList3791);
                    nil222=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil222.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 536:13: -> NIL
                    {
                        adaptor.addChild(root_0, (XTree)adaptor.create(NIL, "NIL"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:537:7: OPEN_BRACE e1= expression ( COMMA e2+= expression )* CLOSE_BRACE
                    {
                    OPEN_BRACE223=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_expressionList3806); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE223);

                    pushFollow(FOLLOW_expression_in_expressionList3810);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
                    // IbmSparqlExt.g:537:32: ( COMMA e2+= expression )*
                    loop94:
                    do {
                        int alt94=2;
                        int LA94_0 = input.LA(1);

                        if ( (LA94_0==COMMA) ) {
                            alt94=1;
                        }


                        switch (alt94) {
                    	case 1 :
                    	    // IbmSparqlExt.g:537:34: COMMA e2+= expression
                    	    {
                    	    COMMA224=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList3814); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA224);

                    	    pushFollow(FOLLOW_expression_in_expressionList3818);
                    	    e2=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    	    if (list_e2==null) list_e2=new ArrayList();
                    	    list_e2.add(e2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop94;
                        }
                    } while (true);

                    CLOSE_BRACE225=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_expressionList3823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE225);



                    // AST REWRITE
                    // elements: e1, e2
                    // token labels: 
                    // rule labels: retval, e1
                    // token list labels: 
                    // rule list labels: e2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"token e2",list_e2);
                    root_0 = (XTree)adaptor.nil();
                    // 538:13: -> $e1 ( $e2)*
                    {
                        adaptor.addChild(root_0, stream_e1.nextTree());
                        // IbmSparqlExt.g:538:22: ( $e2)*
                        while ( stream_e2.hasNext() ) {
                            adaptor.addChild(root_0, stream_e2.nextTree());

                        }
                        stream_e2.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class constructTemplate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructTemplate"
    // IbmSparqlExt.g:541:1: constructTemplate : OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE ;
    public final IbmSparqlExtParser.constructTemplate_return constructTemplate() throws RecognitionException {
        IbmSparqlExtParser.constructTemplate_return retval = new IbmSparqlExtParser.constructTemplate_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_CURLY_BRACE226=null;
        Token CLOSE_CURLY_BRACE228=null;
        IbmSparqlExtParser.constructTriples_return constructTriples227 = null;


        XTree OPEN_CURLY_BRACE226_tree=null;
        XTree CLOSE_CURLY_BRACE228_tree=null;

        try {
            // IbmSparqlExt.g:542:2: ( OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE )
            // IbmSparqlExt.g:542:7: OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE
            {
            root_0 = (XTree)adaptor.nil();

            OPEN_CURLY_BRACE226=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate3860); if (state.failed) return retval;
            // IbmSparqlExt.g:542:25: ( constructTriples )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==IRI_REF||LA96_0==PNAME_NS||LA96_0==OPEN_BRACE||LA96_0==STRING_LITERAL2||LA96_0==INTEGER||LA96_0==OPEN_SQ_BRACKET||(LA96_0>=VAR1 && LA96_0<=VAR2)||(LA96_0>=DECIMAL && LA96_0<=BLANK_NODE_LABEL)) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // IbmSparqlExt.g:542:25: constructTriples
                    {
                    pushFollow(FOLLOW_constructTriples_in_constructTemplate3863);
                    constructTriples227=constructTriples();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructTriples227.getTree());

                    }
                    break;

            }

            CLOSE_CURLY_BRACE228=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate3866); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructTemplate"

    public static class constructTriples_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructTriples"
    // IbmSparqlExt.g:545:1: constructTriples : triplesSameSubject ( DOT ( constructTriples )? )? ;
    public final IbmSparqlExtParser.constructTriples_return constructTriples() throws RecognitionException {
        IbmSparqlExtParser.constructTriples_return retval = new IbmSparqlExtParser.constructTriples_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token DOT230=null;
        IbmSparqlExtParser.triplesSameSubject_return triplesSameSubject229 = null;

        IbmSparqlExtParser.constructTriples_return constructTriples231 = null;


        XTree DOT230_tree=null;

        try {
            // IbmSparqlExt.g:546:2: ( triplesSameSubject ( DOT ( constructTriples )? )? )
            // IbmSparqlExt.g:546:7: triplesSameSubject ( DOT ( constructTriples )? )?
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_triplesSameSubject_in_constructTriples3881);
            triplesSameSubject229=triplesSameSubject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesSameSubject229.getTree());
            // IbmSparqlExt.g:546:26: ( DOT ( constructTriples )? )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==DOT) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // IbmSparqlExt.g:546:28: DOT ( constructTriples )?
                    {
                    DOT230=(Token)match(input,DOT,FOLLOW_DOT_in_constructTriples3885); if (state.failed) return retval;
                    // IbmSparqlExt.g:546:33: ( constructTriples )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==IRI_REF||LA97_0==PNAME_NS||LA97_0==OPEN_BRACE||LA97_0==STRING_LITERAL2||LA97_0==INTEGER||LA97_0==OPEN_SQ_BRACKET||(LA97_0>=VAR1 && LA97_0<=VAR2)||(LA97_0>=DECIMAL && LA97_0<=BLANK_NODE_LABEL)) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // IbmSparqlExt.g:546:33: constructTriples
                            {
                            pushFollow(FOLLOW_constructTriples_in_constructTriples3888);
                            constructTriples231=constructTriples();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructTriples231.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "constructTriples"

    public static class triplesSameSubject_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesSameSubject"
    // IbmSparqlExt.g:549:1: triplesSameSubject : ( (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmpty | (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) );
    public final IbmSparqlExtParser.triplesSameSubject_return triplesSameSubject() throws RecognitionException {
        IbmSparqlExtParser.triplesSameSubject_return retval = new IbmSparqlExtParser.triplesSameSubject_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.varOrTerm_return s1 = null;

        IbmSparqlExtParser.propertyListNotEmpty_return p1 = null;

        IbmSparqlExtParser.triplesNode_return s2 = null;

        IbmSparqlExtParser.propertyList_return p2 = null;


        RewriteRuleSubtreeStream stream_varOrTerm=new RewriteRuleSubtreeStream(adaptor,"rule varOrTerm");
        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        RewriteRuleSubtreeStream stream_triplesNode=new RewriteRuleSubtreeStream(adaptor,"rule triplesNode");
        RewriteRuleSubtreeStream stream_propertyList=new RewriteRuleSubtreeStream(adaptor,"rule propertyList");
        try {
            // IbmSparqlExt.g:550:2: ( (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmpty | (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) )
            int alt99=2;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case STRING_LITERAL2:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt99=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA99_2 = input.LA(2);

                if ( (LA99_2==CLOSE_SQ_BRACKET) ) {
                    alt99=1;
                }
                else if ( (LA99_2==IRI_REF||LA99_2==PNAME_NS||(LA99_2>=VAR1 && LA99_2<=VAR2)||LA99_2==PNAME_LN||LA99_2==257) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);

                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA99_3 = input.LA(2);

                if ( (LA99_3==CLOSE_BRACE) ) {
                    alt99=1;
                }
                else if ( (LA99_3==IRI_REF||LA99_3==PNAME_NS||LA99_3==OPEN_BRACE||LA99_3==STRING_LITERAL2||LA99_3==INTEGER||LA99_3==OPEN_SQ_BRACKET||(LA99_3>=VAR1 && LA99_3<=VAR2)||(LA99_3>=DECIMAL && LA99_3<=BLANK_NODE_LABEL)) ) {
                    alt99=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // IbmSparqlExt.g:550:6: (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] )
                    {
                    // IbmSparqlExt.g:550:6: (s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1] )
                    // IbmSparqlExt.g:550:7: s1= varOrTerm p1= propertyListNotEmpty[(CommonTree)$s1.tree, 1]
                    {
                    pushFollow(FOLLOW_varOrTerm_in_triplesSameSubject3908);
                    s1=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrTerm.add(s1.getTree());
                    pushFollow(FOLLOW_propertyListNotEmpty_in_triplesSameSubject3912);
                    p1=propertyListNotEmpty((CommonTree)(s1!=null?((XTree)s1.tree):null), 1);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmpty.add(p1.getTree());

                    }



                    // AST REWRITE
                    // elements: propertyListNotEmpty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 550:72: -> propertyListNotEmpty
                    {
                        adaptor.addChild(root_0, stream_propertyListNotEmpty.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:551:6: (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] )
                    {
                    // IbmSparqlExt.g:551:6: (s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2] )
                    // IbmSparqlExt.g:551:7: s2= triplesNode p2= propertyList[(CommonTree)$s2.tree, 2]
                    {
                    pushFollow(FOLLOW_triplesNode_in_triplesSameSubject3932);
                    s2=triplesNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesNode.add(s2.getTree());
                    pushFollow(FOLLOW_propertyList_in_triplesSameSubject3936);
                    p2=propertyList((CommonTree)(s2!=null?((XTree)s2.tree):null), 2);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyList.add(p2.getTree());

                    }



                    // AST REWRITE
                    // elements: p2, s2
                    // token labels: 
                    // rule labels: retval, s2, p2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_p2=new RewriteRuleSubtreeStream(adaptor,"rule p2",p2!=null?p2.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 551:72: -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                    {
                        // IbmSparqlExt.g:551:76: ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLE2, "TRIPLE2"), root_1);

                        // IbmSparqlExt.g:551:87: ^( SUBJECT $s2)
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SUBJECT, "SUBJECT"), root_2);

                        adaptor.addChild(root_2, stream_s2.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // IbmSparqlExt.g:551:104: ( $p2)?
                        if ( stream_p2.hasNext() ) {
                            adaptor.addChild(root_1, stream_p2.nextTree());

                        }
                        stream_p2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesSameSubject"

    public static class propertyListNotEmpty_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyListNotEmpty"
    // IbmSparqlExt.g:554:1: propertyListNotEmpty[CommonTree s, int t] : p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )* -> ( objectList )+ ;
    public final IbmSparqlExtParser.propertyListNotEmpty_return propertyListNotEmpty(CommonTree s, int t) throws RecognitionException {
        IbmSparqlExtParser.propertyListNotEmpty_return retval = new IbmSparqlExtParser.propertyListNotEmpty_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token SEMICOLON233=null;
        IbmSparqlExtParser.verb_return p1 = null;

        IbmSparqlExtParser.verb_return p2 = null;

        IbmSparqlExtParser.objectList_return objectList232 = null;

        IbmSparqlExtParser.objectList_return objectList234 = null;


        XTree SEMICOLON233_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_verb=new RewriteRuleSubtreeStream(adaptor,"rule verb");
        RewriteRuleSubtreeStream stream_objectList=new RewriteRuleSubtreeStream(adaptor,"rule objectList");
        try {
            // IbmSparqlExt.g:555:2: (p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )* -> ( objectList )+ )
            // IbmSparqlExt.g:555:6: p1= verb objectList[$s, (CommonTree)$p1.tree, $t] ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )*
            {
            pushFollow(FOLLOW_verb_in_propertyListNotEmpty3985);
            p1=verb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verb.add(p1.getTree());
            pushFollow(FOLLOW_objectList_in_propertyListNotEmpty3987);
            objectList232=objectList(s, (CommonTree)(p1!=null?((XTree)p1.tree):null), t);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_objectList.add(objectList232.getTree());
            // IbmSparqlExt.g:556:3: ( SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )? )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==SEMICOLON) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // IbmSparqlExt.g:556:5: SEMICOLON (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )?
            	    {
            	    SEMICOLON233=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_propertyListNotEmpty3994); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON233);

            	    // IbmSparqlExt.g:556:15: (p2= verb objectList[$s, (CommonTree)$p2.tree, $t] )?
            	    int alt100=2;
            	    int LA100_0 = input.LA(1);

            	    if ( (LA100_0==IRI_REF||LA100_0==PNAME_NS||(LA100_0>=VAR1 && LA100_0<=VAR2)||LA100_0==PNAME_LN||LA100_0==257) ) {
            	        alt100=1;
            	    }
            	    switch (alt100) {
            	        case 1 :
            	            // IbmSparqlExt.g:556:16: p2= verb objectList[$s, (CommonTree)$p2.tree, $t]
            	            {
            	            pushFollow(FOLLOW_verb_in_propertyListNotEmpty3999);
            	            p2=verb();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_verb.add(p2.getTree());
            	            pushFollow(FOLLOW_objectList_in_propertyListNotEmpty4001);
            	            objectList234=objectList(s, (CommonTree)(p2!=null?((XTree)p2.tree):null), t);

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_objectList.add(objectList234.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);



            // AST REWRITE
            // elements: objectList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 558:3: -> ( objectList )+
            {
                if ( !(stream_objectList.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectList.hasNext() ) {
                    adaptor.addChild(root_0, stream_objectList.nextTree());

                }
                stream_objectList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyListNotEmpty"

    public static class propertyList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyList"
    // IbmSparqlExt.g:561:1: propertyList[CommonTree s, int t] : ( propertyListNotEmpty[$s, $t] )? ;
    public final IbmSparqlExtParser.propertyList_return propertyList(CommonTree s, int t) throws RecognitionException {
        IbmSparqlExtParser.propertyList_return retval = new IbmSparqlExtParser.propertyList_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.propertyListNotEmpty_return propertyListNotEmpty235 = null;



        try {
            // IbmSparqlExt.g:562:2: ( ( propertyListNotEmpty[$s, $t] )? )
            // IbmSparqlExt.g:562:7: ( propertyListNotEmpty[$s, $t] )?
            {
            root_0 = (XTree)adaptor.nil();

            // IbmSparqlExt.g:562:7: ( propertyListNotEmpty[$s, $t] )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==IRI_REF||LA102_0==PNAME_NS||(LA102_0>=VAR1 && LA102_0<=VAR2)||LA102_0==PNAME_LN||LA102_0==257) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // IbmSparqlExt.g:562:7: propertyListNotEmpty[$s, $t]
                    {
                    pushFollow(FOLLOW_propertyListNotEmpty_in_propertyList4033);
                    propertyListNotEmpty235=propertyListNotEmpty(s, t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyListNotEmpty235.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyList"

    public static class objectList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectList"
    // IbmSparqlExt.g:565:1: objectList[CommonTree s, CommonTree p, int t] : object ( COMMA object )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+ ;
    public final IbmSparqlExtParser.objectList_return objectList(CommonTree s, CommonTree p, int t) throws RecognitionException {
        IbmSparqlExtParser.objectList_return retval = new IbmSparqlExtParser.objectList_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token COMMA237=null;
        IbmSparqlExtParser.object_return object236 = null;

        IbmSparqlExtParser.object_return object238 = null;


        XTree COMMA237_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_object=new RewriteRuleSubtreeStream(adaptor,"rule object");
        try {
            // IbmSparqlExt.g:566:2: ( object ( COMMA object )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+ )
            // IbmSparqlExt.g:567:3: object ( COMMA object )*
            {
            pushFollow(FOLLOW_object_in_objectList4053);
            object236=object();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object.add(object236.getTree());
            // IbmSparqlExt.g:567:10: ( COMMA object )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==COMMA) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // IbmSparqlExt.g:567:11: COMMA object
            	    {
            	    COMMA237=(Token)match(input,COMMA,FOLLOW_COMMA_in_objectList4056); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA237);

            	    pushFollow(FOLLOW_object_in_objectList4058);
            	    object238=object();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_object.add(object238.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);



            // AST REWRITE
            // elements: object, object, object
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 569:3: -> {t==3}? ( ^( PREDICATE ) ^( VALUE object ) )+
            if (t==3) {
                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // IbmSparqlExt.g:569:17: ^( PREDICATE )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_1);

                    adaptor.addChild(root_1, p);

                    adaptor.addChild(root_0, root_1);
                    }
                    // IbmSparqlExt.g:569:35: ^( VALUE object )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_1);

                    adaptor.addChild(root_1, stream_object.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_object.reset();

            }
            else // 570:3: -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ )
            if (t==2) {
                // IbmSparqlExt.g:570:15: ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE object ) )+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST"), root_1);

                // IbmSparqlExt.g:570:32: ^( PREDICATE )
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_2);

                adaptor.addChild(root_2, p);

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // IbmSparqlExt.g:570:51: ^( VALUE object )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_2);

                    adaptor.addChild(root_2, stream_object.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_object.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 571:3: -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) ) )+
            {
                if ( !(stream_object.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object.hasNext() ) {
                    // IbmSparqlExt.g:571:10: ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE object ) )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLE, "TRIPLE"), root_1);

                    // IbmSparqlExt.g:571:20: ^( SUBJECT )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SUBJECT, "SUBJECT"), root_2);

                    adaptor.addChild(root_2, s);

                    adaptor.addChild(root_1, root_2);
                    }
                    // IbmSparqlExt.g:571:36: ^( PREDICATE )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_2);

                    adaptor.addChild(root_2, p);

                    adaptor.addChild(root_1, root_2);
                    }
                    // IbmSparqlExt.g:571:54: ^( VALUE object )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_2);

                    adaptor.addChild(root_2, stream_object.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_object.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "objectList"

    public static class objectListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectListPath"
    // IbmSparqlExt.g:574:1: objectListPath[CommonTree s, CommonTree p, int t] : objectPath ( COMMA objectPath )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+ ;
    public final IbmSparqlExtParser.objectListPath_return objectListPath(CommonTree s, CommonTree p, int t) throws RecognitionException {
        IbmSparqlExtParser.objectListPath_return retval = new IbmSparqlExtParser.objectListPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token COMMA240=null;
        IbmSparqlExtParser.objectPath_return objectPath239 = null;

        IbmSparqlExtParser.objectPath_return objectPath241 = null;


        XTree COMMA240_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_objectPath=new RewriteRuleSubtreeStream(adaptor,"rule objectPath");
        try {
            // IbmSparqlExt.g:575:2: ( objectPath ( COMMA objectPath )* -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+ -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ ) -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+ )
            // IbmSparqlExt.g:576:3: objectPath ( COMMA objectPath )*
            {
            pushFollow(FOLLOW_objectPath_in_objectListPath4167);
            objectPath239=objectPath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_objectPath.add(objectPath239.getTree());
            // IbmSparqlExt.g:576:14: ( COMMA objectPath )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==COMMA) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // IbmSparqlExt.g:576:15: COMMA objectPath
            	    {
            	    COMMA240=(Token)match(input,COMMA,FOLLOW_COMMA_in_objectListPath4170); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA240);

            	    pushFollow(FOLLOW_objectPath_in_objectListPath4172);
            	    objectPath241=objectPath();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_objectPath.add(objectPath241.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);



            // AST REWRITE
            // elements: objectPath, objectPath, objectPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 578:3: -> {t==3}? ( ^( PREDICATE ) ^( VALUE objectPath ) )+
            if (t==3) {
                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // IbmSparqlExt.g:578:17: ^( PREDICATE )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_1);

                    adaptor.addChild(root_1, p);

                    adaptor.addChild(root_0, root_1);
                    }
                    // IbmSparqlExt.g:578:35: ^( VALUE objectPath )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_1);

                    adaptor.addChild(root_1, stream_objectPath.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_objectPath.reset();

            }
            else // 579:3: -> {t==2}? ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ )
            if (t==2) {
                // IbmSparqlExt.g:579:15: ^( PROPERTY_LIST ^( PREDICATE ) ( ^( VALUE objectPath ) )+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST"), root_1);

                // IbmSparqlExt.g:579:32: ^( PREDICATE )
                {
                XTree root_2 = (XTree)adaptor.nil();
                root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_2);

                adaptor.addChild(root_2, p);

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // IbmSparqlExt.g:579:51: ^( VALUE objectPath )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_2);

                    adaptor.addChild(root_2, stream_objectPath.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_objectPath.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 580:3: -> ( ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) ) )+
            {
                if ( !(stream_objectPath.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_objectPath.hasNext() ) {
                    // IbmSparqlExt.g:580:10: ^( TRIPLE ^( SUBJECT ) ^( PREDICATE ) ^( VALUE objectPath ) )
                    {
                    XTree root_1 = (XTree)adaptor.nil();
                    root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLE, "TRIPLE"), root_1);

                    // IbmSparqlExt.g:580:20: ^( SUBJECT )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SUBJECT, "SUBJECT"), root_2);

                    adaptor.addChild(root_2, s);

                    adaptor.addChild(root_1, root_2);
                    }
                    // IbmSparqlExt.g:580:36: ^( PREDICATE )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREDICATE, "PREDICATE"), root_2);

                    adaptor.addChild(root_2, p);

                    adaptor.addChild(root_1, root_2);
                    }
                    // IbmSparqlExt.g:580:54: ^( VALUE objectPath )
                    {
                    XTree root_2 = (XTree)adaptor.nil();
                    root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VALUE, "VALUE"), root_2);

                    adaptor.addChild(root_2, stream_objectPath.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_objectPath.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "objectListPath"

    public static class object_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object"
    // IbmSparqlExt.g:583:1: object : graphNode ;
    public final IbmSparqlExtParser.object_return object() throws RecognitionException {
        IbmSparqlExtParser.object_return retval = new IbmSparqlExtParser.object_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.graphNode_return graphNode242 = null;



        try {
            // IbmSparqlExt.g:584:2: ( graphNode )
            // IbmSparqlExt.g:584:7: graphNode
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_graphNode_in_object4277);
            graphNode242=graphNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphNode242.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "object"

    public static class objectPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectPath"
    // IbmSparqlExt.g:587:1: objectPath : graphNodePath ;
    public final IbmSparqlExtParser.objectPath_return objectPath() throws RecognitionException {
        IbmSparqlExtParser.objectPath_return retval = new IbmSparqlExtParser.objectPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.graphNodePath_return graphNodePath243 = null;



        try {
            // IbmSparqlExt.g:588:2: ( graphNodePath )
            // IbmSparqlExt.g:588:7: graphNodePath
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_graphNodePath_in_objectPath4291);
            graphNodePath243=graphNodePath();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, graphNodePath243.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "objectPath"

    public static class verb_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // IbmSparqlExt.g:592:1: verb : (v= varOrIRIref | 'a' );
    public final IbmSparqlExtParser.verb_return verb() throws RecognitionException {
        IbmSparqlExtParser.verb_return retval = new IbmSparqlExtParser.verb_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal244=null;
        IbmSparqlExtParser.varOrIRIref_return v = null;


        XTree char_literal244_tree=null;

        try {
            // IbmSparqlExt.g:593:2: (v= varOrIRIref | 'a' )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==IRI_REF||LA105_0==PNAME_NS||(LA105_0>=VAR1 && LA105_0<=VAR2)||LA105_0==PNAME_LN) ) {
                alt105=1;
            }
            else if ( (LA105_0==257) ) {
                alt105=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // IbmSparqlExt.g:593:6: v= varOrIRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_varOrIRIref_in_verb4308);
                    v=varOrIRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:594:5: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal244=(Token)match(input,257,FOLLOW_257_in_verb4317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal244_tree = (XTree)adaptor.create(char_literal244);
                    adaptor.addChild(root_0, char_literal244_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class triplesSameSubjectPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesSameSubjectPath"
    // IbmSparqlExt.g:597:1: triplesSameSubjectPath : ( (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmptyPath | (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) );
    public final IbmSparqlExtParser.triplesSameSubjectPath_return triplesSameSubjectPath() throws RecognitionException {
        IbmSparqlExtParser.triplesSameSubjectPath_return retval = new IbmSparqlExtParser.triplesSameSubjectPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        List list_p1=null;
        List list_p2=null;
        IbmSparqlExtParser.varOrTerm_return s1 = null;

        IbmSparqlExtParser.triplesNodePath_return s2 = null;

        RuleReturnScope p1 = null;
        RuleReturnScope p2 = null;
        RewriteRuleSubtreeStream stream_triplesNodePath=new RewriteRuleSubtreeStream(adaptor,"rule triplesNodePath");
        RewriteRuleSubtreeStream stream_varOrTerm=new RewriteRuleSubtreeStream(adaptor,"rule varOrTerm");
        RewriteRuleSubtreeStream stream_propertyListPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListPath");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try {
            // IbmSparqlExt.g:598:2: ( (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] ) -> propertyListNotEmptyPath | (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] ) -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? ) )
            int alt106=2;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case STRING_LITERAL2:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt106=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA106_2 = input.LA(2);

                if ( (LA106_2==CLOSE_SQ_BRACKET) ) {
                    alt106=1;
                }
                else if ( (LA106_2==IRI_REF||LA106_2==PNAME_NS||LA106_2==OPEN_BRACE||(LA106_2>=VAR1 && LA106_2<=VAR2)||LA106_2==PNAME_LN||LA106_2==257||LA106_2==260||LA106_2==263) ) {
                    alt106=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 2, input);

                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA106_3 = input.LA(2);

                if ( (LA106_3==CLOSE_BRACE) ) {
                    alt106=1;
                }
                else if ( (LA106_3==IRI_REF||LA106_3==PNAME_NS||LA106_3==OPEN_BRACE||LA106_3==STRING_LITERAL2||LA106_3==INTEGER||LA106_3==OPEN_SQ_BRACKET||(LA106_3>=VAR1 && LA106_3<=VAR2)||(LA106_3>=DECIMAL && LA106_3<=BLANK_NODE_LABEL)) ) {
                    alt106=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }

            switch (alt106) {
                case 1 :
                    // IbmSparqlExt.g:598:6: (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] )
                    {
                    // IbmSparqlExt.g:598:6: (s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1] )
                    // IbmSparqlExt.g:598:7: s1= varOrTerm p1+= propertyListNotEmptyPath[(CommonTree)$s1.tree, 1]
                    {
                    pushFollow(FOLLOW_varOrTerm_in_triplesSameSubjectPath4335);
                    s1=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varOrTerm.add(s1.getTree());
                    pushFollow(FOLLOW_propertyListNotEmptyPath_in_triplesSameSubjectPath4339);
                    p1=propertyListNotEmptyPath((CommonTree)(s1!=null?((XTree)s1.tree):null), 1);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(p1.getTree());
                    if (list_p1==null) list_p1=new ArrayList();
                    list_p1.add(p1.getTree());


                    }



                    // AST REWRITE
                    // elements: propertyListNotEmptyPath
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 598:78: -> propertyListNotEmptyPath
                    {
                        adaptor.addChild(root_0, stream_propertyListNotEmptyPath.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:599:6: (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] )
                    {
                    // IbmSparqlExt.g:599:6: (s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2] )
                    // IbmSparqlExt.g:599:7: s2= triplesNodePath p2+= propertyListPath[(CommonTree)$s2.tree, 2]
                    {
                    pushFollow(FOLLOW_triplesNodePath_in_triplesSameSubjectPath4359);
                    s2=triplesNodePath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_triplesNodePath.add(s2.getTree());
                    pushFollow(FOLLOW_propertyListPath_in_triplesSameSubjectPath4363);
                    p2=propertyListPath((CommonTree)(s2!=null?((XTree)s2.tree):null), 2);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListPath.add(p2.getTree());
                    if (list_p2==null) list_p2=new ArrayList();
                    list_p2.add(p2.getTree());


                    }



                    // AST REWRITE
                    // elements: s2, p2
                    // token labels: 
                    // rule labels: retval, s2
                    // token list labels: 
                    // rule list labels: p2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"rule s2",s2!=null?s2.tree:null);
                    RewriteRuleSubtreeStream stream_p2=new RewriteRuleSubtreeStream(adaptor,"token p2",list_p2);
                    root_0 = (XTree)adaptor.nil();
                    // 599:79: -> ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                    {
                        // IbmSparqlExt.g:599:83: ^( TRIPLE2 ^( SUBJECT $s2) ( $p2)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLE2, "TRIPLE2"), root_1);

                        // IbmSparqlExt.g:599:94: ^( SUBJECT $s2)
                        {
                        XTree root_2 = (XTree)adaptor.nil();
                        root_2 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SUBJECT, "SUBJECT"), root_2);

                        adaptor.addChild(root_2, stream_s2.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // IbmSparqlExt.g:599:111: ( $p2)?
                        if ( stream_p2.hasNext() ) {
                            adaptor.addChild(root_1, stream_p2.nextTree());

                        }
                        stream_p2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesSameSubjectPath"

    public static class propertyListNotEmptyPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyListNotEmptyPath"
    // IbmSparqlExt.g:602:1: propertyListNotEmptyPath[CommonTree s, int t] : (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] | p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )* -> objectListPath ( objectList )* ;
    public final IbmSparqlExtParser.propertyListNotEmptyPath_return propertyListNotEmptyPath(CommonTree s, int t) throws RecognitionException {
        IbmSparqlExtParser.propertyListNotEmptyPath_return retval = new IbmSparqlExtParser.propertyListNotEmptyPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token SEMICOLON245=null;
        IbmSparqlExtParser.verbPath_return p1 = null;

        IbmSparqlExtParser.objectListPath_return v1 = null;

        IbmSparqlExtParser.verbSimple_return p2 = null;

        IbmSparqlExtParser.objectListPath_return v2 = null;

        IbmSparqlExtParser.verbPath_return p3 = null;

        IbmSparqlExtParser.objectList_return v3 = null;

        IbmSparqlExtParser.verbSimple_return p4 = null;

        IbmSparqlExtParser.objectList_return v4 = null;


        XTree SEMICOLON245_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_verbPath=new RewriteRuleSubtreeStream(adaptor,"rule verbPath");
        RewriteRuleSubtreeStream stream_objectList=new RewriteRuleSubtreeStream(adaptor,"rule objectList");
        RewriteRuleSubtreeStream stream_verbSimple=new RewriteRuleSubtreeStream(adaptor,"rule verbSimple");
        RewriteRuleSubtreeStream stream_objectListPath=new RewriteRuleSubtreeStream(adaptor,"rule objectListPath");
        try {
            // IbmSparqlExt.g:603:2: ( (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] | p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )* -> objectListPath ( objectList )* )
            // IbmSparqlExt.g:603:7: (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] | p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] ) ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )*
            {
            // IbmSparqlExt.g:603:7: (p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t] | p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t] )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==IRI_REF||LA107_0==PNAME_NS||LA107_0==OPEN_BRACE||LA107_0==PNAME_LN||LA107_0==257||LA107_0==260||LA107_0==263) ) {
                alt107=1;
            }
            else if ( ((LA107_0>=VAR1 && LA107_0<=VAR2)) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // IbmSparqlExt.g:603:9: p1= verbPath v1= objectListPath[$s,(CommonTree)$p1.tree, $t]
                    {
                    pushFollow(FOLLOW_verbPath_in_propertyListNotEmptyPath4413);
                    p1=verbPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_verbPath.add(p1.getTree());
                    pushFollow(FOLLOW_objectListPath_in_propertyListNotEmptyPath4417);
                    v1=objectListPath(s, (CommonTree)(p1!=null?((XTree)p1.tree):null), t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objectListPath.add(v1.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:604:6: p2= verbSimple v2= objectListPath[$s,(CommonTree)$p2.tree, $t]
                    {
                    pushFollow(FOLLOW_verbSimple_in_propertyListNotEmptyPath4436);
                    p2=verbSimple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_verbSimple.add(p2.getTree());
                    pushFollow(FOLLOW_objectListPath_in_propertyListNotEmptyPath4440);
                    v2=objectListPath(s, (CommonTree)(p2!=null?((XTree)p2.tree):null), t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objectListPath.add(v2.getTree());

                    }
                    break;

            }

            // IbmSparqlExt.g:606:4: ( SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )? )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==SEMICOLON) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // IbmSparqlExt.g:606:6: SEMICOLON ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )?
            	    {
            	    SEMICOLON245=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_propertyListNotEmptyPath4456); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON245);

            	    // IbmSparqlExt.g:606:16: ( (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] ) )?
            	    int alt109=2;
            	    int LA109_0 = input.LA(1);

            	    if ( (LA109_0==IRI_REF||LA109_0==PNAME_NS||LA109_0==OPEN_BRACE||(LA109_0>=VAR1 && LA109_0<=VAR2)||LA109_0==PNAME_LN||LA109_0==257||LA109_0==260||LA109_0==263) ) {
            	        alt109=1;
            	    }
            	    switch (alt109) {
            	        case 1 :
            	            // IbmSparqlExt.g:606:18: (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] )
            	            {
            	            // IbmSparqlExt.g:606:18: (p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t] | p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t] )
            	            int alt108=2;
            	            int LA108_0 = input.LA(1);

            	            if ( (LA108_0==IRI_REF||LA108_0==PNAME_NS||LA108_0==OPEN_BRACE||LA108_0==PNAME_LN||LA108_0==257||LA108_0==260||LA108_0==263) ) {
            	                alt108=1;
            	            }
            	            else if ( ((LA108_0>=VAR1 && LA108_0<=VAR2)) ) {
            	                alt108=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 108, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt108) {
            	                case 1 :
            	                    // IbmSparqlExt.g:606:20: p3= verbPath v3= objectList[$s,(CommonTree)$p3.tree, $t]
            	                    {
            	                    pushFollow(FOLLOW_verbPath_in_propertyListNotEmptyPath4464);
            	                    p3=verbPath();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_verbPath.add(p3.getTree());
            	                    pushFollow(FOLLOW_objectList_in_propertyListNotEmptyPath4468);
            	                    v3=objectList(s, (CommonTree)(p3!=null?((XTree)p3.tree):null), t);

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_objectList.add(v3.getTree());

            	                    }
            	                    break;
            	                case 2 :
            	                    // IbmSparqlExt.g:607:21: p4= verbSimple v4= objectList[$s,(CommonTree)$p4.tree, $t]
            	                    {
            	                    pushFollow(FOLLOW_verbSimple_in_propertyListNotEmptyPath4496);
            	                    p4=verbSimple();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_verbSimple.add(p4.getTree());
            	                    pushFollow(FOLLOW_objectList_in_propertyListNotEmptyPath4500);
            	                    v4=objectList(s, (CommonTree)(p4!=null?((XTree)p4.tree):null), t);

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_objectList.add(v4.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);



            // AST REWRITE
            // elements: objectListPath, objectList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 612:4: -> objectListPath ( objectList )*
            {
                adaptor.addChild(root_0, stream_objectListPath.nextTree());
                // IbmSparqlExt.g:612:23: ( objectList )*
                while ( stream_objectList.hasNext() ) {
                    adaptor.addChild(root_0, stream_objectList.nextTree());

                }
                stream_objectList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyListNotEmptyPath"

    public static class propertyListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyListPath"
    // IbmSparqlExt.g:615:1: propertyListPath[CommonTree s, int t] : ( propertyListNotEmptyPath[$s, $t] )? -> ( propertyListNotEmptyPath )? ;
    public final IbmSparqlExtParser.propertyListPath_return propertyListPath(CommonTree s, int t) throws RecognitionException {
        IbmSparqlExtParser.propertyListPath_return retval = new IbmSparqlExtParser.propertyListPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.propertyListNotEmptyPath_return propertyListNotEmptyPath246 = null;


        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try {
            // IbmSparqlExt.g:616:2: ( ( propertyListNotEmptyPath[$s, $t] )? -> ( propertyListNotEmptyPath )? )
            // IbmSparqlExt.g:616:7: ( propertyListNotEmptyPath[$s, $t] )?
            {
            // IbmSparqlExt.g:616:7: ( propertyListNotEmptyPath[$s, $t] )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==IRI_REF||LA111_0==PNAME_NS||LA111_0==OPEN_BRACE||(LA111_0>=VAR1 && LA111_0<=VAR2)||LA111_0==PNAME_LN||LA111_0==257||LA111_0==260||LA111_0==263) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // IbmSparqlExt.g:616:7: propertyListNotEmptyPath[$s, $t]
                    {
                    pushFollow(FOLLOW_propertyListNotEmptyPath_in_propertyListPath4582);
                    propertyListNotEmptyPath246=propertyListNotEmptyPath(s, t);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(propertyListNotEmptyPath246.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: propertyListNotEmptyPath
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 616:43: -> ( propertyListNotEmptyPath )?
            {
                // IbmSparqlExt.g:616:47: ( propertyListNotEmptyPath )?
                if ( stream_propertyListNotEmptyPath.hasNext() ) {
                    adaptor.addChild(root_0, stream_propertyListNotEmptyPath.nextTree());

                }
                stream_propertyListNotEmptyPath.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyListPath"

    public static class verbPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbPath"
    // IbmSparqlExt.g:619:1: verbPath : path ;
    public final IbmSparqlExtParser.verbPath_return verbPath() throws RecognitionException {
        IbmSparqlExtParser.verbPath_return retval = new IbmSparqlExtParser.verbPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.path_return path247 = null;



        try {
            // IbmSparqlExt.g:620:2: ( path )
            // IbmSparqlExt.g:620:7: path
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_path_in_verbPath4606);
            path247=path();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path247.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbPath"

    public static class verbSimple_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbSimple"
    // IbmSparqlExt.g:623:1: verbSimple : var ;
    public final IbmSparqlExtParser.verbSimple_return verbSimple() throws RecognitionException {
        IbmSparqlExtParser.verbSimple_return retval = new IbmSparqlExtParser.verbSimple_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.var_return var248 = null;



        try {
            // IbmSparqlExt.g:624:2: ( var )
            // IbmSparqlExt.g:624:7: var
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_var_in_verbSimple4620);
            var248=var();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, var248.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbSimple"

    public static class path_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "path"
    // IbmSparqlExt.g:627:1: path : pathAlternative ;
    public final IbmSparqlExtParser.path_return path() throws RecognitionException {
        IbmSparqlExtParser.path_return retval = new IbmSparqlExtParser.path_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.pathAlternative_return pathAlternative249 = null;



        try {
            // IbmSparqlExt.g:628:2: ( pathAlternative )
            // IbmSparqlExt.g:628:7: pathAlternative
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_pathAlternative_in_path4634);
            pathAlternative249=pathAlternative();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pathAlternative249.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "path"

    public static class pathAlternative_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathAlternative"
    // IbmSparqlExt.g:631:1: pathAlternative : s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1) ;
    public final IbmSparqlExtParser.pathAlternative_return pathAlternative() throws RecognitionException {
        IbmSparqlExtParser.pathAlternative_return retval = new IbmSparqlExtParser.pathAlternative_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal250=null;
        List list_s2=null;
        IbmSparqlExtParser.pathSequence_return s1 = null;

        RuleReturnScope s2 = null;
        XTree char_literal250_tree=null;
        RewriteRuleTokenStream stream_258=new RewriteRuleTokenStream(adaptor,"token 258");
        RewriteRuleSubtreeStream stream_pathSequence=new RewriteRuleSubtreeStream(adaptor,"rule pathSequence");
        try {
            // IbmSparqlExt.g:632:2: (s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1) )
            // IbmSparqlExt.g:632:7: s1= pathSequence ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1)
            {
            pushFollow(FOLLOW_pathSequence_in_pathAlternative4650);
            s1=pathSequence();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathSequence.add(s1.getTree());
            // IbmSparqlExt.g:633:10: ( ( '|' s2+= pathSequence )+ -> ^( ALT $s1 ( $s2)+ ) | -> $s1)
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==258) ) {
                alt113=1;
            }
            else if ( (LA113_0==IRI_REF||LA113_0==PNAME_NS||LA113_0==OPEN_BRACE||LA113_0==CLOSE_BRACE||LA113_0==STRING_LITERAL2||LA113_0==INTEGER||LA113_0==OPEN_SQ_BRACKET||(LA113_0>=VAR1 && LA113_0<=VAR2)||(LA113_0>=DECIMAL && LA113_0<=BLANK_NODE_LABEL)) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    // IbmSparqlExt.g:633:12: ( '|' s2+= pathSequence )+
                    {
                    // IbmSparqlExt.g:633:12: ( '|' s2+= pathSequence )+
                    int cnt112=0;
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==258) ) {
                            alt112=1;
                        }


                        switch (alt112) {
                    	case 1 :
                    	    // IbmSparqlExt.g:633:13: '|' s2+= pathSequence
                    	    {
                    	    char_literal250=(Token)match(input,258,FOLLOW_258_in_pathAlternative4665); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_258.add(char_literal250);

                    	    pushFollow(FOLLOW_pathSequence_in_pathAlternative4669);
                    	    s2=pathSequence();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pathSequence.add(s2.getTree());
                    	    if (list_s2==null) list_s2=new ArrayList();
                    	    list_s2.add(s2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt112 >= 1 ) break loop112;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(112, input);
                                throw eee;
                        }
                        cnt112++;
                    } while (true);



                    // AST REWRITE
                    // elements: s2, s1
                    // token labels: 
                    // rule labels: retval, s1
                    // token list labels: 
                    // rule list labels: s2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"token s2",list_s2);
                    root_0 = (XTree)adaptor.nil();
                    // 633:36: -> ^( ALT $s1 ( $s2)+ )
                    {
                        // IbmSparqlExt.g:633:39: ^( ALT $s1 ( $s2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(ALT, "ALT"), root_1);

                        adaptor.addChild(root_1, stream_s1.nextTree());
                        if ( !(stream_s2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_s2.hasNext() ) {
                            adaptor.addChild(root_1, stream_s2.nextTree());

                        }
                        stream_s2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:634:14: 
                    {

                    // AST REWRITE
                    // elements: s1
                    // token labels: 
                    // rule labels: retval, s1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 634:14: -> $s1
                    {
                        adaptor.addChild(root_0, stream_s1.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathAlternative"

    public static class pathSequence_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathSequence"
    // IbmSparqlExt.g:637:1: pathSequence : s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1) ;
    public final IbmSparqlExtParser.pathSequence_return pathSequence() throws RecognitionException {
        IbmSparqlExtParser.pathSequence_return retval = new IbmSparqlExtParser.pathSequence_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal251=null;
        List list_s2=null;
        IbmSparqlExtParser.pathEltOrInverse_return s1 = null;

        RuleReturnScope s2 = null;
        XTree char_literal251_tree=null;
        RewriteRuleTokenStream stream_259=new RewriteRuleTokenStream(adaptor,"token 259");
        RewriteRuleSubtreeStream stream_pathEltOrInverse=new RewriteRuleSubtreeStream(adaptor,"rule pathEltOrInverse");
        try {
            // IbmSparqlExt.g:638:2: (s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1) )
            // IbmSparqlExt.g:638:7: s1= pathEltOrInverse ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1)
            {
            pushFollow(FOLLOW_pathEltOrInverse_in_pathSequence4720);
            s1=pathEltOrInverse();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathEltOrInverse.add(s1.getTree());
            // IbmSparqlExt.g:639:9: ( ( '/' s2+= pathEltOrInverse )+ -> ^( SEQ $s1 ( $s2)+ ) | -> $s1)
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==259) ) {
                alt115=1;
            }
            else if ( (LA115_0==IRI_REF||LA115_0==PNAME_NS||LA115_0==OPEN_BRACE||LA115_0==CLOSE_BRACE||LA115_0==STRING_LITERAL2||LA115_0==INTEGER||LA115_0==OPEN_SQ_BRACKET||(LA115_0>=VAR1 && LA115_0<=VAR2)||(LA115_0>=DECIMAL && LA115_0<=BLANK_NODE_LABEL)||LA115_0==258) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    // IbmSparqlExt.g:639:11: ( '/' s2+= pathEltOrInverse )+
                    {
                    // IbmSparqlExt.g:639:11: ( '/' s2+= pathEltOrInverse )+
                    int cnt114=0;
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==259) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    // IbmSparqlExt.g:639:12: '/' s2+= pathEltOrInverse
                    	    {
                    	    char_literal251=(Token)match(input,259,FOLLOW_259_in_pathSequence4734); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_259.add(char_literal251);

                    	    pushFollow(FOLLOW_pathEltOrInverse_in_pathSequence4738);
                    	    s2=pathEltOrInverse();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pathEltOrInverse.add(s2.getTree());
                    	    if (list_s2==null) list_s2=new ArrayList();
                    	    list_s2.add(s2.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt114 >= 1 ) break loop114;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(114, input);
                                throw eee;
                        }
                        cnt114++;
                    } while (true);



                    // AST REWRITE
                    // elements: s1, s2
                    // token labels: 
                    // rule labels: retval, s1
                    // token list labels: 
                    // rule list labels: s2
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);
                    RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"token s2",list_s2);
                    root_0 = (XTree)adaptor.nil();
                    // 639:39: -> ^( SEQ $s1 ( $s2)+ )
                    {
                        // IbmSparqlExt.g:639:42: ^( SEQ $s1 ( $s2)+ )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(SEQ, "SEQ"), root_1);

                        adaptor.addChild(root_1, stream_s1.nextTree());
                        if ( !(stream_s2.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_s2.hasNext() ) {
                            adaptor.addChild(root_1, stream_s2.nextTree());

                        }
                        stream_s2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:640:13: 
                    {

                    // AST REWRITE
                    // elements: s1
                    // token labels: 
                    // rule labels: retval, s1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"rule s1",s1!=null?s1.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 640:13: -> $s1
                    {
                        adaptor.addChild(root_0, stream_s1.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathSequence"

    public static class pathElt_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathElt"
    // IbmSparqlExt.g:643:1: pathElt : pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary ) ;
    public final IbmSparqlExtParser.pathElt_return pathElt() throws RecognitionException {
        IbmSparqlExtParser.pathElt_return retval = new IbmSparqlExtParser.pathElt_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.pathPrimary_return pathPrimary252 = null;

        IbmSparqlExtParser.pathMod_return pathMod253 = null;


        RewriteRuleSubtreeStream stream_pathMod=new RewriteRuleSubtreeStream(adaptor,"rule pathMod");
        RewriteRuleSubtreeStream stream_pathPrimary=new RewriteRuleSubtreeStream(adaptor,"rule pathPrimary");
        try {
            // IbmSparqlExt.g:644:2: ( pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary ) )
            // IbmSparqlExt.g:644:6: pathPrimary ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary )
            {
            pushFollow(FOLLOW_pathPrimary_in_pathElt4785);
            pathPrimary252=pathPrimary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pathPrimary.add(pathPrimary252.getTree());
            // IbmSparqlExt.g:645:9: ( ( pathMod -> ^( ELT pathPrimary pathMod ) ) | -> pathPrimary )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==256||(LA116_0>=261 && LA116_0<=262)) ) {
                alt116=1;
            }
            else if ( (LA116_0==IRI_REF||LA116_0==PNAME_NS||LA116_0==OPEN_BRACE||LA116_0==CLOSE_BRACE||LA116_0==STRING_LITERAL2||LA116_0==INTEGER||LA116_0==OPEN_SQ_BRACKET||(LA116_0>=VAR1 && LA116_0<=VAR2)||(LA116_0>=DECIMAL && LA116_0<=BLANK_NODE_LABEL)||(LA116_0>=258 && LA116_0<=259)) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    // IbmSparqlExt.g:645:11: ( pathMod -> ^( ELT pathPrimary pathMod ) )
                    {
                    // IbmSparqlExt.g:645:11: ( pathMod -> ^( ELT pathPrimary pathMod ) )
                    // IbmSparqlExt.g:645:12: pathMod
                    {
                    pushFollow(FOLLOW_pathMod_in_pathElt4799);
                    pathMod253=pathMod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pathMod.add(pathMod253.getTree());


                    // AST REWRITE
                    // elements: pathMod, pathPrimary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 645:20: -> ^( ELT pathPrimary pathMod )
                    {
                        // IbmSparqlExt.g:645:23: ^( ELT pathPrimary pathMod )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(ELT, "ELT"), root_1);

                        adaptor.addChild(root_1, stream_pathPrimary.nextTree());
                        adaptor.addChild(root_1, stream_pathMod.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:646:10: 
                    {

                    // AST REWRITE
                    // elements: pathPrimary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 646:10: -> pathPrimary
                    {
                        adaptor.addChild(root_0, stream_pathPrimary.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathElt"

    public static class pathEltOrInverse_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathEltOrInverse"
    // IbmSparqlExt.g:649:1: pathEltOrInverse : ( pathElt | ( '^' pathElt -> ^( INV pathElt ) ) );
    public final IbmSparqlExtParser.pathEltOrInverse_return pathEltOrInverse() throws RecognitionException {
        IbmSparqlExtParser.pathEltOrInverse_return retval = new IbmSparqlExtParser.pathEltOrInverse_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal255=null;
        IbmSparqlExtParser.pathElt_return pathElt254 = null;

        IbmSparqlExtParser.pathElt_return pathElt256 = null;


        XTree char_literal255_tree=null;
        RewriteRuleTokenStream stream_260=new RewriteRuleTokenStream(adaptor,"token 260");
        RewriteRuleSubtreeStream stream_pathElt=new RewriteRuleSubtreeStream(adaptor,"rule pathElt");
        try {
            // IbmSparqlExt.g:650:2: ( pathElt | ( '^' pathElt -> ^( INV pathElt ) ) )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==IRI_REF||LA117_0==PNAME_NS||LA117_0==OPEN_BRACE||LA117_0==PNAME_LN||LA117_0==257||LA117_0==263) ) {
                alt117=1;
            }
            else if ( (LA117_0==260) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // IbmSparqlExt.g:650:7: pathElt
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_pathElt_in_pathEltOrInverse4841);
                    pathElt254=pathElt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathElt254.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:650:17: ( '^' pathElt -> ^( INV pathElt ) )
                    {
                    // IbmSparqlExt.g:650:17: ( '^' pathElt -> ^( INV pathElt ) )
                    // IbmSparqlExt.g:650:18: '^' pathElt
                    {
                    char_literal255=(Token)match(input,260,FOLLOW_260_in_pathEltOrInverse4846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_260.add(char_literal255);

                    pushFollow(FOLLOW_pathElt_in_pathEltOrInverse4848);
                    pathElt256=pathElt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pathElt.add(pathElt256.getTree());


                    // AST REWRITE
                    // elements: pathElt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 650:30: -> ^( INV pathElt )
                    {
                        // IbmSparqlExt.g:650:33: ^( INV pathElt )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_pathElt.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathEltOrInverse"

    public static class pathMod_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathMod"
    // IbmSparqlExt.g:653:1: pathMod : ( '*' | '?' | '+' );
    public final IbmSparqlExtParser.pathMod_return pathMod() throws RecognitionException {
        IbmSparqlExtParser.pathMod_return retval = new IbmSparqlExtParser.pathMod_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token set257=null;

        XTree set257_tree=null;

        try {
            // IbmSparqlExt.g:654:2: ( '*' | '?' | '+' )
            // IbmSparqlExt.g:
            {
            root_0 = (XTree)adaptor.nil();

            set257=(Token)input.LT(1);
            if ( input.LA(1)==256||(input.LA(1)>=261 && input.LA(1)<=262) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XTree)adaptor.create(set257));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathMod"

    public static class pathPrimary_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathPrimary"
    // IbmSparqlExt.g:657:1: pathPrimary : ( iRIref | 'a' | '!' pathNegatedPropertySet | OPEN_BRACE path CLOSE_BRACE );
    public final IbmSparqlExtParser.pathPrimary_return pathPrimary() throws RecognitionException {
        IbmSparqlExtParser.pathPrimary_return retval = new IbmSparqlExtParser.pathPrimary_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal259=null;
        Token char_literal260=null;
        Token OPEN_BRACE262=null;
        Token CLOSE_BRACE264=null;
        IbmSparqlExtParser.iRIref_return iRIref258 = null;

        IbmSparqlExtParser.pathNegatedPropertySet_return pathNegatedPropertySet261 = null;

        IbmSparqlExtParser.path_return path263 = null;


        XTree char_literal259_tree=null;
        XTree char_literal260_tree=null;
        XTree OPEN_BRACE262_tree=null;
        XTree CLOSE_BRACE264_tree=null;

        try {
            // IbmSparqlExt.g:658:2: ( iRIref | 'a' | '!' pathNegatedPropertySet | OPEN_BRACE path CLOSE_BRACE )
            int alt118=4;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt118=1;
                }
                break;
            case 257:
                {
                alt118=2;
                }
                break;
            case 263:
                {
                alt118=3;
                }
                break;
            case OPEN_BRACE:
                {
                alt118=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }

            switch (alt118) {
                case 1 :
                    // IbmSparqlExt.g:658:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIref_in_pathPrimary4894);
                    iRIref258=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref258.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:658:16: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal259=(Token)match(input,257,FOLLOW_257_in_pathPrimary4898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal259_tree = (XTree)adaptor.create(char_literal259);
                    adaptor.addChild(root_0, char_literal259_tree);
                    }

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:658:22: '!' pathNegatedPropertySet
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal260=(Token)match(input,263,FOLLOW_263_in_pathPrimary4902); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal260_tree = (XTree)adaptor.create(char_literal260);
                    adaptor.addChild(root_0, char_literal260_tree);
                    }
                    pushFollow(FOLLOW_pathNegatedPropertySet_in_pathPrimary4904);
                    pathNegatedPropertySet261=pathNegatedPropertySet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathNegatedPropertySet261.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:658:51: OPEN_BRACE path CLOSE_BRACE
                    {
                    root_0 = (XTree)adaptor.nil();

                    OPEN_BRACE262=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_pathPrimary4908); if (state.failed) return retval;
                    pushFollow(FOLLOW_path_in_pathPrimary4911);
                    path263=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path263.getTree());
                    CLOSE_BRACE264=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_pathPrimary4913); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathPrimary"

    public static class pathNegatedPropertySet_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathNegatedPropertySet"
    // IbmSparqlExt.g:661:1: pathNegatedPropertySet : ( pathOneInPropertySet | OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE );
    public final IbmSparqlExtParser.pathNegatedPropertySet_return pathNegatedPropertySet() throws RecognitionException {
        IbmSparqlExtParser.pathNegatedPropertySet_return retval = new IbmSparqlExtParser.pathNegatedPropertySet_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE266=null;
        Token char_literal268=null;
        Token CLOSE_BRACE270=null;
        IbmSparqlExtParser.pathOneInPropertySet_return pathOneInPropertySet265 = null;

        IbmSparqlExtParser.pathOneInPropertySet_return pathOneInPropertySet267 = null;

        IbmSparqlExtParser.pathOneInPropertySet_return pathOneInPropertySet269 = null;


        XTree OPEN_BRACE266_tree=null;
        XTree char_literal268_tree=null;
        XTree CLOSE_BRACE270_tree=null;

        try {
            // IbmSparqlExt.g:662:2: ( pathOneInPropertySet | OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==IRI_REF||LA121_0==PNAME_NS||LA121_0==PNAME_LN||LA121_0==257||LA121_0==260) ) {
                alt121=1;
            }
            else if ( (LA121_0==OPEN_BRACE) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // IbmSparqlExt.g:662:7: pathOneInPropertySet
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4928);
                    pathOneInPropertySet265=pathOneInPropertySet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet265.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:662:30: OPEN_BRACE ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )? CLOSE_BRACE
                    {
                    root_0 = (XTree)adaptor.nil();

                    OPEN_BRACE266=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_pathNegatedPropertySet4932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OPEN_BRACE266_tree = (XTree)adaptor.create(OPEN_BRACE266);
                    adaptor.addChild(root_0, OPEN_BRACE266_tree);
                    }
                    // IbmSparqlExt.g:662:41: ( pathOneInPropertySet ( '|' pathOneInPropertySet )* )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==IRI_REF||LA120_0==PNAME_NS||LA120_0==PNAME_LN||LA120_0==257||LA120_0==260) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // IbmSparqlExt.g:662:43: pathOneInPropertySet ( '|' pathOneInPropertySet )*
                            {
                            pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4936);
                            pathOneInPropertySet267=pathOneInPropertySet();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet267.getTree());
                            // IbmSparqlExt.g:662:64: ( '|' pathOneInPropertySet )*
                            loop119:
                            do {
                                int alt119=2;
                                int LA119_0 = input.LA(1);

                                if ( (LA119_0==258) ) {
                                    alt119=1;
                                }


                                switch (alt119) {
                            	case 1 :
                            	    // IbmSparqlExt.g:662:66: '|' pathOneInPropertySet
                            	    {
                            	    char_literal268=(Token)match(input,258,FOLLOW_258_in_pathNegatedPropertySet4940); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal268_tree = (XTree)adaptor.create(char_literal268);
                            	    adaptor.addChild(root_0, char_literal268_tree);
                            	    }
                            	    pushFollow(FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4942);
                            	    pathOneInPropertySet269=pathOneInPropertySet();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pathOneInPropertySet269.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop119;
                                }
                            } while (true);


                            }
                            break;

                    }

                    CLOSE_BRACE270=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_pathNegatedPropertySet4950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CLOSE_BRACE270_tree = (XTree)adaptor.create(CLOSE_BRACE270);
                    adaptor.addChild(root_0, CLOSE_BRACE270_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathNegatedPropertySet"

    public static class pathOneInPropertySet_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pathOneInPropertySet"
    // IbmSparqlExt.g:665:1: pathOneInPropertySet : ( iRIref | 'a' | ( '^' iRIref -> ^( INV iRIref ) ) | ( '^' 'a' -> ^( INV 'a' ) ) );
    public final IbmSparqlExtParser.pathOneInPropertySet_return pathOneInPropertySet() throws RecognitionException {
        IbmSparqlExtParser.pathOneInPropertySet_return retval = new IbmSparqlExtParser.pathOneInPropertySet_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal272=null;
        Token char_literal273=null;
        Token char_literal275=null;
        Token char_literal276=null;
        IbmSparqlExtParser.iRIref_return iRIref271 = null;

        IbmSparqlExtParser.iRIref_return iRIref274 = null;


        XTree char_literal272_tree=null;
        XTree char_literal273_tree=null;
        XTree char_literal275_tree=null;
        XTree char_literal276_tree=null;
        RewriteRuleTokenStream stream_260=new RewriteRuleTokenStream(adaptor,"token 260");
        RewriteRuleTokenStream stream_257=new RewriteRuleTokenStream(adaptor,"token 257");
        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        try {
            // IbmSparqlExt.g:666:2: ( iRIref | 'a' | ( '^' iRIref -> ^( INV iRIref ) ) | ( '^' 'a' -> ^( INV 'a' ) ) )
            int alt122=4;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt122=1;
                }
                break;
            case 257:
                {
                alt122=2;
                }
                break;
            case 260:
                {
                int LA122_3 = input.LA(2);

                if ( (LA122_3==257) ) {
                    alt122=4;
                }
                else if ( (LA122_3==IRI_REF||LA122_3==PNAME_NS||LA122_3==PNAME_LN) ) {
                    alt122=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 122, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // IbmSparqlExt.g:666:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIref_in_pathOneInPropertySet4964);
                    iRIref271=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref271.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:666:16: 'a'
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal272=(Token)match(input,257,FOLLOW_257_in_pathOneInPropertySet4968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal272_tree = (XTree)adaptor.create(char_literal272);
                    adaptor.addChild(root_0, char_literal272_tree);
                    }

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:666:22: ( '^' iRIref -> ^( INV iRIref ) )
                    {
                    // IbmSparqlExt.g:666:22: ( '^' iRIref -> ^( INV iRIref ) )
                    // IbmSparqlExt.g:666:23: '^' iRIref
                    {
                    char_literal273=(Token)match(input,260,FOLLOW_260_in_pathOneInPropertySet4973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_260.add(char_literal273);

                    pushFollow(FOLLOW_iRIref_in_pathOneInPropertySet4975);
                    iRIref274=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_iRIref.add(iRIref274.getTree());


                    // AST REWRITE
                    // elements: iRIref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 666:34: -> ^( INV iRIref )
                    {
                        // IbmSparqlExt.g:666:37: ^( INV iRIref )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_iRIref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:666:55: ( '^' 'a' -> ^( INV 'a' ) )
                    {
                    // IbmSparqlExt.g:666:55: ( '^' 'a' -> ^( INV 'a' ) )
                    // IbmSparqlExt.g:666:56: '^' 'a'
                    {
                    char_literal275=(Token)match(input,260,FOLLOW_260_in_pathOneInPropertySet4990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_260.add(char_literal275);

                    char_literal276=(Token)match(input,257,FOLLOW_257_in_pathOneInPropertySet4992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_257.add(char_literal276);



                    // AST REWRITE
                    // elements: 257
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 666:64: -> ^( INV 'a' )
                    {
                        // IbmSparqlExt.g:666:67: ^( INV 'a' )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_257.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pathOneInPropertySet"

    public static class integer_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integer"
    // IbmSparqlExt.g:669:1: integer : INTEGER ;
    public final IbmSparqlExtParser.integer_return integer() throws RecognitionException {
        IbmSparqlExtParser.integer_return retval = new IbmSparqlExtParser.integer_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INTEGER277=null;

        XTree INTEGER277_tree=null;

        try {
            // IbmSparqlExt.g:670:2: ( INTEGER )
            // IbmSparqlExt.g:670:7: INTEGER
            {
            root_0 = (XTree)adaptor.nil();

            INTEGER277=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_integer5015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER277_tree = (XTree)adaptor.create(INTEGER277);
            adaptor.addChild(root_0, INTEGER277_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "integer"

    public static class triplesNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesNode"
    // IbmSparqlExt.g:673:1: triplesNode : (c= collection | p= blankNodePropertyList ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) ;
    public final IbmSparqlExtParser.triplesNode_return triplesNode() throws RecognitionException {
        IbmSparqlExtParser.triplesNode_return retval = new IbmSparqlExtParser.triplesNode_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.collection_return c = null;

        IbmSparqlExtParser.blankNodePropertyList_return p = null;


        RewriteRuleSubtreeStream stream_blankNodePropertyList=new RewriteRuleSubtreeStream(adaptor,"rule blankNodePropertyList");
        RewriteRuleSubtreeStream stream_collection=new RewriteRuleSubtreeStream(adaptor,"rule collection");
        try {
            // IbmSparqlExt.g:674:2: ( (c= collection | p= blankNodePropertyList ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) )
            // IbmSparqlExt.g:674:7: (c= collection | p= blankNodePropertyList )
            {
            // IbmSparqlExt.g:674:7: (c= collection | p= blankNodePropertyList )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==OPEN_BRACE) ) {
                alt123=1;
            }
            else if ( (LA123_0==OPEN_SQ_BRACKET) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // IbmSparqlExt.g:674:9: c= collection
                    {
                    pushFollow(FOLLOW_collection_in_triplesNode5033);
                    c=collection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_collection.add(c.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:675:6: p= blankNodePropertyList
                    {
                    pushFollow(FOLLOW_blankNodePropertyList_in_triplesNode5042);
                    p=blankNodePropertyList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_blankNodePropertyList.add(p.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: c, p
            // token labels: 
            // rule labels: retval, c, p
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 677:4: -> ^( TRIPLES_NODE ( $c)? ( $p)? )
            {
                // IbmSparqlExt.g:677:7: ^( TRIPLES_NODE ( $c)? ( $p)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLES_NODE, "TRIPLES_NODE"), root_1);

                // IbmSparqlExt.g:677:22: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();
                // IbmSparqlExt.g:677:26: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesNode"

    public static class triplesNodePath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "triplesNodePath"
    // IbmSparqlExt.g:680:1: triplesNodePath : (c= collectionPath | p= blankNodePropertyListPath ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) ;
    public final IbmSparqlExtParser.triplesNodePath_return triplesNodePath() throws RecognitionException {
        IbmSparqlExtParser.triplesNodePath_return retval = new IbmSparqlExtParser.triplesNodePath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.collectionPath_return c = null;

        IbmSparqlExtParser.blankNodePropertyListPath_return p = null;


        RewriteRuleSubtreeStream stream_blankNodePropertyListPath=new RewriteRuleSubtreeStream(adaptor,"rule blankNodePropertyListPath");
        RewriteRuleSubtreeStream stream_collectionPath=new RewriteRuleSubtreeStream(adaptor,"rule collectionPath");
        try {
            // IbmSparqlExt.g:681:2: ( (c= collectionPath | p= blankNodePropertyListPath ) -> ^( TRIPLES_NODE ( $c)? ( $p)? ) )
            // IbmSparqlExt.g:681:7: (c= collectionPath | p= blankNodePropertyListPath )
            {
            // IbmSparqlExt.g:681:7: (c= collectionPath | p= blankNodePropertyListPath )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==OPEN_BRACE) ) {
                alt124=1;
            }
            else if ( (LA124_0==OPEN_SQ_BRACKET) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // IbmSparqlExt.g:681:9: c= collectionPath
                    {
                    pushFollow(FOLLOW_collectionPath_in_triplesNodePath5082);
                    c=collectionPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_collectionPath.add(c.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:682:6: p= blankNodePropertyListPath
                    {
                    pushFollow(FOLLOW_blankNodePropertyListPath_in_triplesNodePath5094);
                    p=blankNodePropertyListPath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_blankNodePropertyListPath.add(p.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: p, c
            // token labels: 
            // rule labels: retval, c, p
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 684:4: -> ^( TRIPLES_NODE ( $c)? ( $p)? )
            {
                // IbmSparqlExt.g:684:7: ^( TRIPLES_NODE ( $c)? ( $p)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(TRIPLES_NODE, "TRIPLES_NODE"), root_1);

                // IbmSparqlExt.g:684:22: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextTree());

                }
                stream_c.reset();
                // IbmSparqlExt.g:684:26: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextTree());

                }
                stream_p.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "triplesNodePath"

    public static class blankNodePropertyList_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blankNodePropertyList"
    // IbmSparqlExt.g:687:1: blankNodePropertyList : OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) ;
    public final IbmSparqlExtParser.blankNodePropertyList_return blankNodePropertyList() throws RecognitionException {
        IbmSparqlExtParser.blankNodePropertyList_return retval = new IbmSparqlExtParser.blankNodePropertyList_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_SQ_BRACKET278=null;
        Token CLOSE_SQ_BRACKET279=null;
        IbmSparqlExtParser.propertyListNotEmpty_return p = null;


        XTree OPEN_SQ_BRACKET278_tree=null;
        XTree CLOSE_SQ_BRACKET279_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");
        RewriteRuleSubtreeStream stream_propertyListNotEmpty=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmpty");
        try {
            // IbmSparqlExt.g:688:2: ( OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) )
            // IbmSparqlExt.g:688:7: OPEN_SQ_BRACKET p= propertyListNotEmpty[null, 3] CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET278=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyList5131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET278);

            pushFollow(FOLLOW_propertyListNotEmpty_in_blankNodePropertyList5135);
            p=propertyListNotEmpty(null, 3);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyListNotEmpty.add(p.getTree());
            CLOSE_SQ_BRACKET279=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyList5138); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET279);



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval, p
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 690:3: -> ^( PROPERTY_LIST $p)
            {
                // IbmSparqlExt.g:690:6: ^( PROPERTY_LIST $p)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST"), root_1);

                adaptor.addChild(root_1, stream_p.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "blankNodePropertyList"

    public static class blankNodePropertyListPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blankNodePropertyListPath"
    // IbmSparqlExt.g:693:1: blankNodePropertyListPath : OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) ;
    public final IbmSparqlExtParser.blankNodePropertyListPath_return blankNodePropertyListPath() throws RecognitionException {
        IbmSparqlExtParser.blankNodePropertyListPath_return retval = new IbmSparqlExtParser.blankNodePropertyListPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_SQ_BRACKET280=null;
        Token CLOSE_SQ_BRACKET281=null;
        IbmSparqlExtParser.propertyListNotEmptyPath_return p = null;


        XTree OPEN_SQ_BRACKET280_tree=null;
        XTree CLOSE_SQ_BRACKET281_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");
        RewriteRuleSubtreeStream stream_propertyListNotEmptyPath=new RewriteRuleSubtreeStream(adaptor,"rule propertyListNotEmptyPath");
        try {
            // IbmSparqlExt.g:694:2: ( OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET -> ^( PROPERTY_LIST $p) )
            // IbmSparqlExt.g:694:7: OPEN_SQ_BRACKET p= propertyListNotEmptyPath[null, 3] CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET280=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyListPath5167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET280);

            pushFollow(FOLLOW_propertyListNotEmptyPath_in_blankNodePropertyListPath5171);
            p=propertyListNotEmptyPath(null, 3);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyListNotEmptyPath.add(p.getTree());
            CLOSE_SQ_BRACKET281=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyListPath5174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET281);



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval, p
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 696:3: -> ^( PROPERTY_LIST $p)
            {
                // IbmSparqlExt.g:696:6: ^( PROPERTY_LIST $p)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PROPERTY_LIST, "PROPERTY_LIST"), root_1);

                adaptor.addChild(root_1, stream_p.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "blankNodePropertyListPath"

    public static class collection_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection"
    // IbmSparqlExt.g:699:1: collection : ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) ;
    public final IbmSparqlExtParser.collection_return collection() throws RecognitionException {
        IbmSparqlExtParser.collection_return retval = new IbmSparqlExtParser.collection_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE282=null;
        Token CLOSE_BRACE283=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree OPEN_BRACE282_tree=null;
        XTree CLOSE_BRACE283_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_graphNode=new RewriteRuleSubtreeStream(adaptor,"rule graphNode");
        try {
            // IbmSparqlExt.g:700:2: ( ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) )
            // IbmSparqlExt.g:700:6: ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE )
            {
            // IbmSparqlExt.g:700:6: ( OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE )
            // IbmSparqlExt.g:700:7: OPEN_BRACE (g+= graphNode )+ CLOSE_BRACE
            {
            OPEN_BRACE282=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collection5203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE282);

            // IbmSparqlExt.g:700:19: (g+= graphNode )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==IRI_REF||LA125_0==PNAME_NS||LA125_0==OPEN_BRACE||LA125_0==STRING_LITERAL2||LA125_0==INTEGER||LA125_0==OPEN_SQ_BRACKET||(LA125_0>=VAR1 && LA125_0<=VAR2)||(LA125_0>=DECIMAL && LA125_0<=BLANK_NODE_LABEL)) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // IbmSparqlExt.g:700:19: g+= graphNode
            	    {
            	    pushFollow(FOLLOW_graphNode_in_collection5207);
            	    g=graphNode();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_graphNode.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);

            CLOSE_BRACE283=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collection5210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE283);


            }



            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 702:3: -> ^( COLLECTION ( $g)+ )
            {
                // IbmSparqlExt.g:702:7: ^( COLLECTION ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(COLLECTION, "COLLECTION"), root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "collection"

    public static class collectionPath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collectionPath"
    // IbmSparqlExt.g:705:1: collectionPath : ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) ;
    public final IbmSparqlExtParser.collectionPath_return collectionPath() throws RecognitionException {
        IbmSparqlExtParser.collectionPath_return retval = new IbmSparqlExtParser.collectionPath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE284=null;
        Token CLOSE_BRACE285=null;
        List list_g=null;
        RuleReturnScope g = null;
        XTree OPEN_BRACE284_tree=null;
        XTree CLOSE_BRACE285_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_graphNodePath=new RewriteRuleSubtreeStream(adaptor,"rule graphNodePath");
        try {
            // IbmSparqlExt.g:706:2: ( ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE ) -> ^( COLLECTION ( $g)+ ) )
            // IbmSparqlExt.g:706:6: ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE )
            {
            // IbmSparqlExt.g:706:6: ( OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE )
            // IbmSparqlExt.g:706:7: OPEN_BRACE (g+= graphNodePath )+ CLOSE_BRACE
            {
            OPEN_BRACE284=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_collectionPath5242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE284);

            // IbmSparqlExt.g:706:19: (g+= graphNodePath )+
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==IRI_REF||LA126_0==PNAME_NS||LA126_0==OPEN_BRACE||LA126_0==STRING_LITERAL2||LA126_0==INTEGER||LA126_0==OPEN_SQ_BRACKET||(LA126_0>=VAR1 && LA126_0<=VAR2)||(LA126_0>=DECIMAL && LA126_0<=BLANK_NODE_LABEL)) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // IbmSparqlExt.g:706:19: g+= graphNodePath
            	    {
            	    pushFollow(FOLLOW_graphNodePath_in_collectionPath5246);
            	    g=graphNodePath();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_graphNodePath.add(g.getTree());
            	    if (list_g==null) list_g=new ArrayList();
            	    list_g.add(g.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);

            CLOSE_BRACE285=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_collectionPath5249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE285);


            }



            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: g
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"token g",list_g);
            root_0 = (XTree)adaptor.nil();
            // 708:3: -> ^( COLLECTION ( $g)+ )
            {
                // IbmSparqlExt.g:708:7: ^( COLLECTION ( $g)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(COLLECTION, "COLLECTION"), root_1);

                if ( !(stream_g.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_g.hasNext() ) {
                    adaptor.addChild(root_1, stream_g.nextTree());

                }
                stream_g.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "collectionPath"

    public static class graphNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphNode"
    // IbmSparqlExt.g:711:1: graphNode : ( varOrTerm | triplesNode );
    public final IbmSparqlExtParser.graphNode_return graphNode() throws RecognitionException {
        IbmSparqlExtParser.graphNode_return retval = new IbmSparqlExtParser.graphNode_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.varOrTerm_return varOrTerm286 = null;

        IbmSparqlExtParser.triplesNode_return triplesNode287 = null;



        try {
            // IbmSparqlExt.g:712:2: ( varOrTerm | triplesNode )
            int alt127=2;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case STRING_LITERAL2:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt127=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA127_2 = input.LA(2);

                if ( (LA127_2==CLOSE_SQ_BRACKET) ) {
                    alt127=1;
                }
                else if ( (LA127_2==IRI_REF||LA127_2==PNAME_NS||(LA127_2>=VAR1 && LA127_2<=VAR2)||LA127_2==PNAME_LN||LA127_2==257) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 2, input);

                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA127_3 = input.LA(2);

                if ( (LA127_3==CLOSE_BRACE) ) {
                    alt127=1;
                }
                else if ( (LA127_3==IRI_REF||LA127_3==PNAME_NS||LA127_3==OPEN_BRACE||LA127_3==STRING_LITERAL2||LA127_3==INTEGER||LA127_3==OPEN_SQ_BRACKET||(LA127_3>=VAR1 && LA127_3<=VAR2)||(LA127_3>=DECIMAL && LA127_3<=BLANK_NODE_LABEL)) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // IbmSparqlExt.g:712:7: varOrTerm
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_varOrTerm_in_graphNode5281);
                    varOrTerm286=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrTerm286.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:712:19: triplesNode
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_triplesNode_in_graphNode5285);
                    triplesNode287=triplesNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesNode287.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphNode"

    public static class graphNodePath_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphNodePath"
    // IbmSparqlExt.g:715:1: graphNodePath : ( varOrTerm | triplesNodePath );
    public final IbmSparqlExtParser.graphNodePath_return graphNodePath() throws RecognitionException {
        IbmSparqlExtParser.graphNodePath_return retval = new IbmSparqlExtParser.graphNodePath_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.varOrTerm_return varOrTerm288 = null;

        IbmSparqlExtParser.triplesNodePath_return triplesNodePath289 = null;



        try {
            // IbmSparqlExt.g:716:2: ( varOrTerm | triplesNodePath )
            int alt128=2;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case STRING_LITERAL2:
            case INTEGER:
            case VAR1:
            case VAR2:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
            case BLANK_NODE_LABEL:
                {
                alt128=1;
                }
                break;
            case OPEN_SQ_BRACKET:
                {
                int LA128_2 = input.LA(2);

                if ( (LA128_2==CLOSE_SQ_BRACKET) ) {
                    alt128=1;
                }
                else if ( (LA128_2==IRI_REF||LA128_2==PNAME_NS||LA128_2==OPEN_BRACE||(LA128_2>=VAR1 && LA128_2<=VAR2)||LA128_2==PNAME_LN||LA128_2==257||LA128_2==260||LA128_2==263) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 2, input);

                    throw nvae;
                }
                }
                break;
            case OPEN_BRACE:
                {
                int LA128_3 = input.LA(2);

                if ( (LA128_3==CLOSE_BRACE) ) {
                    alt128=1;
                }
                else if ( (LA128_3==IRI_REF||LA128_3==PNAME_NS||LA128_3==OPEN_BRACE||LA128_3==STRING_LITERAL2||LA128_3==INTEGER||LA128_3==OPEN_SQ_BRACKET||(LA128_3>=VAR1 && LA128_3<=VAR2)||(LA128_3>=DECIMAL && LA128_3<=BLANK_NODE_LABEL)) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // IbmSparqlExt.g:716:7: varOrTerm
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_varOrTerm_in_graphNodePath5299);
                    varOrTerm288=varOrTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varOrTerm288.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:716:19: triplesNodePath
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_triplesNodePath_in_graphNodePath5303);
                    triplesNodePath289=triplesNodePath();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, triplesNodePath289.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphNodePath"

    public static class varOrTerm_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varOrTerm"
    // IbmSparqlExt.g:720:1: varOrTerm : ( var | graphTerm );
    public final IbmSparqlExtParser.varOrTerm_return varOrTerm() throws RecognitionException {
        IbmSparqlExtParser.varOrTerm_return retval = new IbmSparqlExtParser.varOrTerm_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.var_return var290 = null;

        IbmSparqlExtParser.graphTerm_return graphTerm291 = null;



        try {
            // IbmSparqlExt.g:721:2: ( var | graphTerm )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( ((LA129_0>=VAR1 && LA129_0<=VAR2)) ) {
                alt129=1;
            }
            else if ( (LA129_0==IRI_REF||LA129_0==PNAME_NS||LA129_0==OPEN_BRACE||LA129_0==STRING_LITERAL2||LA129_0==INTEGER||LA129_0==OPEN_SQ_BRACKET||(LA129_0>=DECIMAL && LA129_0<=BLANK_NODE_LABEL)) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // IbmSparqlExt.g:721:7: var
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_var_in_varOrTerm5318);
                    var290=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var290.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:721:13: graphTerm
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_graphTerm_in_varOrTerm5322);
                    graphTerm291=graphTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, graphTerm291.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "varOrTerm"

    public static class varOrIRIref_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varOrIRIref"
    // IbmSparqlExt.g:724:1: varOrIRIref : ( var | iRIref );
    public final IbmSparqlExtParser.varOrIRIref_return varOrIRIref() throws RecognitionException {
        IbmSparqlExtParser.varOrIRIref_return retval = new IbmSparqlExtParser.varOrIRIref_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.var_return var292 = null;

        IbmSparqlExtParser.iRIref_return iRIref293 = null;



        try {
            // IbmSparqlExt.g:725:2: ( var | iRIref )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( ((LA130_0>=VAR1 && LA130_0<=VAR2)) ) {
                alt130=1;
            }
            else if ( (LA130_0==IRI_REF||LA130_0==PNAME_NS||LA130_0==PNAME_LN) ) {
                alt130=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }
            switch (alt130) {
                case 1 :
                    // IbmSparqlExt.g:725:7: var
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_var_in_varOrIRIref5336);
                    var292=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var292.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:725:13: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIref_in_varOrIRIref5340);
                    iRIref293=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref293.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "varOrIRIref"

    public static class var_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "var"
    // IbmSparqlExt.g:728:1: var : (v1= VAR1 -> ^( VAR $v1) | v2= VAR2 -> ^( VAR $v2) );
    public final IbmSparqlExtParser.var_return var() throws RecognitionException {
        IbmSparqlExtParser.var_return retval = new IbmSparqlExtParser.var_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token v1=null;
        Token v2=null;

        XTree v1_tree=null;
        XTree v2_tree=null;
        RewriteRuleTokenStream stream_VAR1=new RewriteRuleTokenStream(adaptor,"token VAR1");
        RewriteRuleTokenStream stream_VAR2=new RewriteRuleTokenStream(adaptor,"token VAR2");

        try {
            // IbmSparqlExt.g:729:2: (v1= VAR1 -> ^( VAR $v1) | v2= VAR2 -> ^( VAR $v2) )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==VAR1) ) {
                alt131=1;
            }
            else if ( (LA131_0==VAR2) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    // IbmSparqlExt.g:729:7: v1= VAR1
                    {
                    v1=(Token)match(input,VAR1,FOLLOW_VAR1_in_var5356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VAR1.add(v1);



                    // AST REWRITE
                    // elements: v1
                    // token labels: v1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_v1=new RewriteRuleTokenStream(adaptor,"token v1",v1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 729:18: -> ^( VAR $v1)
                    {
                        // IbmSparqlExt.g:729:22: ^( VAR $v1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VAR, "VAR"), root_1);

                        adaptor.addChild(root_1, stream_v1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:730:7: v2= VAR2
                    {
                    v2=(Token)match(input,VAR2,FOLLOW_VAR2_in_var5379); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VAR2.add(v2);



                    // AST REWRITE
                    // elements: v2
                    // token labels: v2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_v2=new RewriteRuleTokenStream(adaptor,"token v2",v2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 730:18: -> ^( VAR $v2)
                    {
                        // IbmSparqlExt.g:730:22: ^( VAR $v2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(VAR, "VAR"), root_1);

                        adaptor.addChild(root_1, stream_v2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "var"

    public static class graphTerm_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "graphTerm"
    // IbmSparqlExt.g:733:1: graphTerm : ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | blankNode | nil );
    public final IbmSparqlExtParser.graphTerm_return graphTerm() throws RecognitionException {
        IbmSparqlExtParser.graphTerm_return retval = new IbmSparqlExtParser.graphTerm_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.iRIref_return iRIref294 = null;

        IbmSparqlExtParser.rDFLiteral_return rDFLiteral295 = null;

        IbmSparqlExtParser.numericLiteral_return numericLiteral296 = null;

        IbmSparqlExtParser.booleanLiteral_return booleanLiteral297 = null;

        IbmSparqlExtParser.blankNode_return blankNode298 = null;

        IbmSparqlExtParser.nil_return nil299 = null;



        try {
            // IbmSparqlExt.g:734:2: ( iRIref | rDFLiteral | numericLiteral | booleanLiteral | blankNode | nil )
            int alt132=6;
            switch ( input.LA(1) ) {
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt132=1;
                }
                break;
            case STRING_LITERAL2:
            case STRING_LITERAL1:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt132=2;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt132=3;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt132=4;
                }
                break;
            case OPEN_SQ_BRACKET:
            case BLANK_NODE_LABEL:
                {
                alt132=5;
                }
                break;
            case OPEN_BRACE:
                {
                alt132=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }

            switch (alt132) {
                case 1 :
                    // IbmSparqlExt.g:734:7: iRIref
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIref_in_graphTerm5406);
                    iRIref294=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref294.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:734:16: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_rDFLiteral_in_graphTerm5410);
                    rDFLiteral295=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral295.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:734:29: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_graphTerm5414);
                    numericLiteral296=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral296.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:734:46: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_graphTerm5418);
                    booleanLiteral297=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral297.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparqlExt.g:734:63: blankNode
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_blankNode_in_graphTerm5422);
                    blankNode298=blankNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, blankNode298.getTree());

                    }
                    break;
                case 6 :
                    // IbmSparqlExt.g:734:75: nil
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_nil_in_graphTerm5426);
                    nil299=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nil299.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "graphTerm"

    public static class expression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // IbmSparqlExt.g:737:1: expression : conditionalOrExpression ;
    public final IbmSparqlExtParser.expression_return expression() throws RecognitionException {
        IbmSparqlExtParser.expression_return retval = new IbmSparqlExtParser.expression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.conditionalOrExpression_return conditionalOrExpression300 = null;



        try {
            // IbmSparqlExt.g:738:2: ( conditionalOrExpression )
            // IbmSparqlExt.g:738:7: conditionalOrExpression
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_expression5440);
            conditionalOrExpression300=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalOrExpression300.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // IbmSparqlExt.g:741:1: conditionalOrExpression : c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )* -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ ) -> $c1;
    public final IbmSparqlExtParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        IbmSparqlExtParser.conditionalOrExpression_return retval = new IbmSparqlExtParser.conditionalOrExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token LOGICAL_OR301=null;
        List list_c2=null;
        IbmSparqlExtParser.conditionalAndExpression_return c1 = null;

        RuleReturnScope c2 = null;
        XTree LOGICAL_OR301_tree=null;
        RewriteRuleTokenStream stream_LOGICAL_OR=new RewriteRuleTokenStream(adaptor,"token LOGICAL_OR");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        boolean isOR=false;
        try {
            // IbmSparqlExt.g:743:2: (c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )* -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ ) -> $c1)
            // IbmSparqlExt.g:743:7: c1= conditionalAndExpression ( LOGICAL_OR c2+= conditionalAndExpression )*
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5462);
            c1=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalAndExpression.add(c1.getTree());
            // IbmSparqlExt.g:743:35: ( LOGICAL_OR c2+= conditionalAndExpression )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==LOGICAL_OR) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // IbmSparqlExt.g:743:37: LOGICAL_OR c2+= conditionalAndExpression
            	    {
            	    LOGICAL_OR301=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_conditionalOrExpression5466); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LOGICAL_OR.add(LOGICAL_OR301);

            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5470);
            	    c2=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_conditionalAndExpression.add(c2.getTree());
            	    if (list_c2==null) list_c2=new ArrayList();
            	    list_c2.add(c2.getTree());

            	    if ( state.backtracking==0 ) {
            	      isOR=true;
            	    }

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);



            // AST REWRITE
            // elements: c2, c1, LOGICAL_OR, c1
            // token labels: 
            // rule labels: retval, c1
            // token list labels: 
            // rule list labels: c2
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);
            RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"token c2",list_c2);
            root_0 = (XTree)adaptor.nil();
            // 745:3: -> {isOR==true}? ^( LOGICAL_OR $c1 ( $c2)+ )
            if (isOR==true) {
                // IbmSparqlExt.g:745:22: ^( LOGICAL_OR $c1 ( $c2)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_LOGICAL_OR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_c1.nextTree());
                if ( !(stream_c2.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_c2.hasNext() ) {
                    adaptor.addChild(root_1, stream_c2.nextTree());

                }
                stream_c2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 746:3: -> $c1
            {
                adaptor.addChild(root_0, stream_c1.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // IbmSparqlExt.g:749:1: conditionalAndExpression : v1= valueLogical ( LOGICAL_AND v2+= valueLogical )* -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ ) -> $v1;
    public final IbmSparqlExtParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        IbmSparqlExtParser.conditionalAndExpression_return retval = new IbmSparqlExtParser.conditionalAndExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token LOGICAL_AND302=null;
        List list_v2=null;
        IbmSparqlExtParser.valueLogical_return v1 = null;

        RuleReturnScope v2 = null;
        XTree LOGICAL_AND302_tree=null;
        RewriteRuleTokenStream stream_LOGICAL_AND=new RewriteRuleTokenStream(adaptor,"token LOGICAL_AND");
        RewriteRuleSubtreeStream stream_valueLogical=new RewriteRuleSubtreeStream(adaptor,"rule valueLogical");
        boolean isAnd=false;
        try {
            // IbmSparqlExt.g:751:2: (v1= valueLogical ( LOGICAL_AND v2+= valueLogical )* -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ ) -> $v1)
            // IbmSparqlExt.g:751:7: v1= valueLogical ( LOGICAL_AND v2+= valueLogical )*
            {
            pushFollow(FOLLOW_valueLogical_in_conditionalAndExpression5530);
            v1=valueLogical();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_valueLogical.add(v1.getTree());
            // IbmSparqlExt.g:751:23: ( LOGICAL_AND v2+= valueLogical )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==LOGICAL_AND) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // IbmSparqlExt.g:751:25: LOGICAL_AND v2+= valueLogical
            	    {
            	    LOGICAL_AND302=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_conditionalAndExpression5534); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LOGICAL_AND.add(LOGICAL_AND302);

            	    pushFollow(FOLLOW_valueLogical_in_conditionalAndExpression5538);
            	    v2=valueLogical();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_valueLogical.add(v2.getTree());
            	    if (list_v2==null) list_v2=new ArrayList();
            	    list_v2.add(v2.getTree());

            	    if ( state.backtracking==0 ) {
            	      isAnd=true;
            	    }

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);



            // AST REWRITE
            // elements: v2, LOGICAL_AND, v1, v1
            // token labels: 
            // rule labels: v1, retval
            // token list labels: 
            // rule list labels: v2
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v1=new RewriteRuleSubtreeStream(adaptor,"rule v1",v1!=null?v1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v2=new RewriteRuleSubtreeStream(adaptor,"token v2",list_v2);
            root_0 = (XTree)adaptor.nil();
            // 753:3: -> {isAnd==true}? ^( LOGICAL_AND $v1 ( $v2)+ )
            if (isAnd==true) {
                // IbmSparqlExt.g:753:23: ^( LOGICAL_AND $v1 ( $v2)+ )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_LOGICAL_AND.nextNode(), root_1);

                adaptor.addChild(root_1, stream_v1.nextTree());
                if ( !(stream_v2.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_v2.hasNext() ) {
                    adaptor.addChild(root_1, stream_v2.nextTree());

                }
                stream_v2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 754:3: -> $v1
            {
                adaptor.addChild(root_0, stream_v1.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class valueLogical_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "valueLogical"
    // IbmSparqlExt.g:757:1: valueLogical : relationalExpression ;
    public final IbmSparqlExtParser.valueLogical_return valueLogical() throws RecognitionException {
        IbmSparqlExtParser.valueLogical_return retval = new IbmSparqlExtParser.valueLogical_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.relationalExpression_return relationalExpression303 = null;



        try {
            // IbmSparqlExt.g:758:2: ( relationalExpression )
            // IbmSparqlExt.g:758:7: relationalExpression
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_valueLogical5589);
            relationalExpression303=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression303.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "valueLogical"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // IbmSparqlExt.g:761:1: relationalExpression : n1= numericExpression ( '=' n2= numericExpression | '!=' n3= numericExpression | LT n4= numericExpression | '>' n5= numericExpression | LTE n6= numericExpression | '>=' n7= numericExpression | IN e1= expressionList | NOT IN e2= expressionList )? ;
    public final IbmSparqlExtParser.relationalExpression_return relationalExpression() throws RecognitionException {
        IbmSparqlExtParser.relationalExpression_return retval = new IbmSparqlExtParser.relationalExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal304=null;
        Token string_literal305=null;
        Token LT306=null;
        Token char_literal307=null;
        Token LTE308=null;
        Token string_literal309=null;
        Token IN310=null;
        Token NOT311=null;
        Token IN312=null;
        IbmSparqlExtParser.numericExpression_return n1 = null;

        IbmSparqlExtParser.numericExpression_return n2 = null;

        IbmSparqlExtParser.numericExpression_return n3 = null;

        IbmSparqlExtParser.numericExpression_return n4 = null;

        IbmSparqlExtParser.numericExpression_return n5 = null;

        IbmSparqlExtParser.numericExpression_return n6 = null;

        IbmSparqlExtParser.numericExpression_return n7 = null;

        IbmSparqlExtParser.expressionList_return e1 = null;

        IbmSparqlExtParser.expressionList_return e2 = null;


        XTree char_literal304_tree=null;
        XTree string_literal305_tree=null;
        XTree LT306_tree=null;
        XTree char_literal307_tree=null;
        XTree LTE308_tree=null;
        XTree string_literal309_tree=null;
        XTree IN310_tree=null;
        XTree NOT311_tree=null;
        XTree IN312_tree=null;

        try {
            // IbmSparqlExt.g:762:2: (n1= numericExpression ( '=' n2= numericExpression | '!=' n3= numericExpression | LT n4= numericExpression | '>' n5= numericExpression | LTE n6= numericExpression | '>=' n7= numericExpression | IN e1= expressionList | NOT IN e2= expressionList )? )
            // IbmSparqlExt.g:762:7: n1= numericExpression ( '=' n2= numericExpression | '!=' n3= numericExpression | LT n4= numericExpression | '>' n5= numericExpression | LTE n6= numericExpression | '>=' n7= numericExpression | IN e1= expressionList | NOT IN e2= expressionList )?
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_numericExpression_in_relationalExpression5605);
            n1=numericExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n1.getTree());
            // IbmSparqlExt.g:762:28: ( '=' n2= numericExpression | '!=' n3= numericExpression | LT n4= numericExpression | '>' n5= numericExpression | LTE n6= numericExpression | '>=' n7= numericExpression | IN e1= expressionList | NOT IN e2= expressionList )?
            int alt135=9;
            switch ( input.LA(1) ) {
                case 264:
                    {
                    alt135=1;
                    }
                    break;
                case 265:
                    {
                    alt135=2;
                    }
                    break;
                case LT:
                    {
                    alt135=3;
                    }
                    break;
                case 266:
                    {
                    alt135=4;
                    }
                    break;
                case LTE:
                    {
                    alt135=5;
                    }
                    break;
                case 267:
                    {
                    alt135=6;
                    }
                    break;
                case IN:
                    {
                    alt135=7;
                    }
                    break;
                case NOT:
                    {
                    alt135=8;
                    }
                    break;
            }

            switch (alt135) {
                case 1 :
                    // IbmSparqlExt.g:762:30: '=' n2= numericExpression
                    {
                    char_literal304=(Token)match(input,264,FOLLOW_264_in_relationalExpression5609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal304_tree = (XTree)adaptor.create(char_literal304);
                    root_0 = (XTree)adaptor.becomeRoot(char_literal304_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5616);
                    n2=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n2.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:763:15: '!=' n3= numericExpression
                    {
                    string_literal305=(Token)match(input,265,FOLLOW_265_in_relationalExpression5632); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal305_tree = (XTree)adaptor.create(string_literal305);
                    root_0 = (XTree)adaptor.becomeRoot(string_literal305_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5638);
                    n3=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n3.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:764:15: LT n4= numericExpression
                    {
                    LT306=(Token)match(input,LT,FOLLOW_LT_in_relationalExpression5657); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LT306_tree = (XTree)adaptor.create(LT306);
                    root_0 = (XTree)adaptor.becomeRoot(LT306_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5664);
                    n4=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n4.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:765:15: '>' n5= numericExpression
                    {
                    char_literal307=(Token)match(input,266,FOLLOW_266_in_relationalExpression5683); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal307_tree = (XTree)adaptor.create(char_literal307);
                    root_0 = (XTree)adaptor.becomeRoot(char_literal307_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5690);
                    n5=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n5.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparqlExt.g:766:15: LTE n6= numericExpression
                    {
                    LTE308=(Token)match(input,LTE,FOLLOW_LTE_in_relationalExpression5709); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LTE308_tree = (XTree)adaptor.create(LTE308);
                    root_0 = (XTree)adaptor.becomeRoot(LTE308_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5715);
                    n6=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n6.getTree());

                    }
                    break;
                case 6 :
                    // IbmSparqlExt.g:767:15: '>=' n7= numericExpression
                    {
                    string_literal309=(Token)match(input,267,FOLLOW_267_in_relationalExpression5734); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal309_tree = (XTree)adaptor.create(string_literal309);
                    root_0 = (XTree)adaptor.becomeRoot(string_literal309_tree, root_0);
                    }
                    pushFollow(FOLLOW_numericExpression_in_relationalExpression5740);
                    n7=numericExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, n7.getTree());

                    }
                    break;
                case 7 :
                    // IbmSparqlExt.g:768:15: IN e1= expressionList
                    {
                    IN310=(Token)match(input,IN,FOLLOW_IN_in_relationalExpression5759); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN310_tree = (XTree)adaptor.create(IN310);
                    root_0 = (XTree)adaptor.becomeRoot(IN310_tree, root_0);
                    }
                    pushFollow(FOLLOW_expressionList_in_relationalExpression5765);
                    e1=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());

                    }
                    break;
                case 8 :
                    // IbmSparqlExt.g:769:15: NOT IN e2= expressionList
                    {
                    NOT311=(Token)match(input,NOT,FOLLOW_NOT_in_relationalExpression5789); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT311_tree = (XTree)adaptor.create(NOT311);
                    root_0 = (XTree)adaptor.becomeRoot(NOT311_tree, root_0);
                    }
                    IN312=(Token)match(input,IN,FOLLOW_IN_in_relationalExpression5792); if (state.failed) return retval;
                    pushFollow(FOLLOW_expressionList_in_relationalExpression5798);
                    e2=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class numericExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericExpression"
    // IbmSparqlExt.g:773:1: numericExpression : additiveExpression ;
    public final IbmSparqlExtParser.numericExpression_return numericExpression() throws RecognitionException {
        IbmSparqlExtParser.numericExpression_return retval = new IbmSparqlExtParser.numericExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.additiveExpression_return additiveExpression313 = null;



        try {
            // IbmSparqlExt.g:774:2: ( additiveExpression )
            // IbmSparqlExt.g:774:6: additiveExpression
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_numericExpression5864);
            additiveExpression313=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression313.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // IbmSparqlExt.g:777:1: additiveExpression : (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) | litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) | litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )* ;
    public final IbmSparqlExtParser.additiveExpression_return additiveExpression() throws RecognitionException {
        IbmSparqlExtParser.additiveExpression_return retval = new IbmSparqlExtParser.additiveExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token op1=null;
        Token op2=null;
        Token char_literal314=null;
        Token char_literal315=null;
        Token char_literal316=null;
        Token char_literal317=null;
        Token char_literal318=null;
        Token char_literal319=null;
        IbmSparqlExtParser.multiplicativeExpression_return lhs = null;

        IbmSparqlExtParser.multiplicativeExpression_return rhs1 = null;

        IbmSparqlExtParser.multiplicativeExpression_return rhs2 = null;

        IbmSparqlExtParser.numericLiteralPositive_return litp = null;

        IbmSparqlExtParser.multiplicativeExpression_return rhs3 = null;

        IbmSparqlExtParser.numericLiteralNegative_return litn = null;

        IbmSparqlExtParser.multiplicativeExpression_return rhs4 = null;


        XTree op1_tree=null;
        XTree op2_tree=null;
        XTree char_literal314_tree=null;
        XTree char_literal315_tree=null;
        XTree char_literal316_tree=null;
        XTree char_literal317_tree=null;
        XTree char_literal318_tree=null;
        XTree char_literal319_tree=null;
        RewriteRuleTokenStream stream_262=new RewriteRuleTokenStream(adaptor,"token 262");
        RewriteRuleTokenStream stream_268=new RewriteRuleTokenStream(adaptor,"token 268");
        RewriteRuleTokenStream stream_259=new RewriteRuleTokenStream(adaptor,"token 259");
        RewriteRuleTokenStream stream_256=new RewriteRuleTokenStream(adaptor,"token 256");
        RewriteRuleSubtreeStream stream_numericLiteralNegative=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteralNegative");
        RewriteRuleSubtreeStream stream_numericLiteralPositive=new RewriteRuleSubtreeStream(adaptor,"rule numericLiteralPositive");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try {
            // IbmSparqlExt.g:778:2: ( (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) | litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) | litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )* )
            // IbmSparqlExt.g:778:6: (lhs= multiplicativeExpression -> $lhs) ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) | litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) | litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )*
            {
            // IbmSparqlExt.g:778:6: (lhs= multiplicativeExpression -> $lhs)
            // IbmSparqlExt.g:778:7: lhs= multiplicativeExpression
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5884);
            lhs=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(lhs.getTree());


            // AST REWRITE
            // elements: lhs
            // token labels: 
            // rule labels: retval, lhs
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 778:36: -> $lhs
            {
                adaptor.addChild(root_0, stream_lhs.nextTree());

            }

            retval.tree = root_0;}
            }

            // IbmSparqlExt.g:779:10: ( '+' rhs1= multiplicativeExpression -> ^( '+' $additiveExpression $rhs1) | '-' rhs2= multiplicativeExpression -> ^( '-' $additiveExpression $rhs2) | litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) ) | litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) ) )*
            loop140:
            do {
                int alt140=5;
                switch ( input.LA(1) ) {
                case 262:
                    {
                    alt140=1;
                    }
                    break;
                case 268:
                    {
                    alt140=2;
                    }
                    break;
                case INTEGER_POSITIVE:
                case DECIMAL_POSITIVE:
                case DOUBLE_POSITIVE:
                    {
                    alt140=3;
                    }
                    break;
                case INTEGER_NEGATIVE:
                case DECIMAL_NEGATIVE:
                case DOUBLE_NEGATIVE:
                    {
                    alt140=4;
                    }
                    break;

                }

                switch (alt140) {
            	case 1 :
            	    // IbmSparqlExt.g:779:12: '+' rhs1= multiplicativeExpression
            	    {
            	    char_literal314=(Token)match(input,262,FOLLOW_262_in_additiveExpression5903); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_262.add(char_literal314);

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5907);
            	    rhs1=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs1.getTree());


            	    // AST REWRITE
            	    // elements: rhs1, additiveExpression, 262
            	    // token labels: 
            	    // rule labels: retval, rhs1
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_rhs1=new RewriteRuleSubtreeStream(adaptor,"rule rhs1",rhs1!=null?rhs1.tree:null);

            	    root_0 = (XTree)adaptor.nil();
            	    // 779:46: -> ^( '+' $additiveExpression $rhs1)
            	    {
            	        // IbmSparqlExt.g:779:49: ^( '+' $additiveExpression $rhs1)
            	        {
            	        XTree root_1 = (XTree)adaptor.nil();
            	        root_1 = (XTree)adaptor.becomeRoot(stream_262.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_rhs1.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 2 :
            	    // IbmSparqlExt.g:780:12: '-' rhs2= multiplicativeExpression
            	    {
            	    char_literal315=(Token)match(input,268,FOLLOW_268_in_additiveExpression5932); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_268.add(char_literal315);

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5936);
            	    rhs2=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs2.getTree());


            	    // AST REWRITE
            	    // elements: rhs2, additiveExpression, 268
            	    // token labels: 
            	    // rule labels: retval, rhs2
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_rhs2=new RewriteRuleSubtreeStream(adaptor,"rule rhs2",rhs2!=null?rhs2.tree:null);

            	    root_0 = (XTree)adaptor.nil();
            	    // 780:46: -> ^( '-' $additiveExpression $rhs2)
            	    {
            	        // IbmSparqlExt.g:780:49: ^( '-' $additiveExpression $rhs2)
            	        {
            	        XTree root_1 = (XTree)adaptor.nil();
            	        root_1 = (XTree)adaptor.becomeRoot(stream_268.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.nextTree());
            	        adaptor.addChild(root_1, stream_rhs2.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    retval.tree = root_0;}
            	    }
            	    break;
            	case 3 :
            	    // IbmSparqlExt.g:781:12: litp= numericLiteralPositive (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) )
            	    {
            	    pushFollow(FOLLOW_numericLiteralPositive_in_additiveExpression5963);
            	    litp=numericLiteralPositive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericLiteralPositive.add(litp.getTree());
            	    // IbmSparqlExt.g:782:13: (op1= ( '*' | '/' ) rhs3= multiplicativeExpression -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) ) | -> ^( BROKEN_PLUS $additiveExpression $litp) )
            	    int alt137=2;
            	    int LA137_0 = input.LA(1);

            	    if ( (LA137_0==256||LA137_0==259) ) {
            	        alt137=1;
            	    }
            	    else if ( (LA137_0==LTE||LA137_0==CLOSE_BRACE||LA137_0==AS||LA137_0==SEMICOLON||LA137_0==COMMA||(LA137_0>=LOGICAL_OR && LA137_0<=NOT)||(LA137_0>=INTEGER_POSITIVE && LA137_0<=DOUBLE_NEGATIVE)||LA137_0==262||(LA137_0>=264 && LA137_0<=268)) ) {
            	        alt137=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 137, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt137) {
            	        case 1 :
            	            // IbmSparqlExt.g:782:15: op1= ( '*' | '/' ) rhs3= multiplicativeExpression
            	            {
            	            // IbmSparqlExt.g:782:19: ( '*' | '/' )
            	            int alt136=2;
            	            int LA136_0 = input.LA(1);

            	            if ( (LA136_0==256) ) {
            	                alt136=1;
            	            }
            	            else if ( (LA136_0==259) ) {
            	                alt136=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 136, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt136) {
            	                case 1 :
            	                    // IbmSparqlExt.g:782:20: '*'
            	                    {
            	                    char_literal316=(Token)match(input,256,FOLLOW_256_in_additiveExpression5983); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_256.add(char_literal316);


            	                    }
            	                    break;
            	                case 2 :
            	                    // IbmSparqlExt.g:782:24: '/'
            	                    {
            	                    char_literal317=(Token)match(input,259,FOLLOW_259_in_additiveExpression5985); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_259.add(char_literal317);


            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5990);
            	            rhs3=multiplicativeExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs3.getTree());


            	            // AST REWRITE
            	            // elements: litp, additiveExpression, op1, rhs3
            	            // token labels: op1
            	            // rule labels: rhs3, retval, litp
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_op1=new RewriteRuleTokenStream(adaptor,"token op1",op1);
            	            RewriteRuleSubtreeStream stream_rhs3=new RewriteRuleSubtreeStream(adaptor,"rule rhs3",rhs3!=null?rhs3.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	            RewriteRuleSubtreeStream stream_litp=new RewriteRuleSubtreeStream(adaptor,"rule litp",litp!=null?litp.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 783:15: -> ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) )
            	            {
            	                // IbmSparqlExt.g:783:18: ^( BROKEN_PLUS $additiveExpression ^( $op1 $litp $rhs3) )
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BROKEN_PLUS, "BROKEN_PLUS"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                // IbmSparqlExt.g:783:52: ^( $op1 $litp $rhs3)
            	                {
            	                XTree root_2 = (XTree)adaptor.nil();
            	                root_2 = (XTree)adaptor.becomeRoot(stream_op1.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_litp.nextTree());
            	                adaptor.addChild(root_2, stream_rhs3.nextTree());

            	                adaptor.addChild(root_1, root_2);
            	                }

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 2 :
            	            // IbmSparqlExt.g:785:15: 
            	            {

            	            // AST REWRITE
            	            // elements: additiveExpression, litp
            	            // token labels: 
            	            // rule labels: retval, litp
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            	            RewriteRuleSubtreeStream stream_litp=new RewriteRuleSubtreeStream(adaptor,"rule litp",litp!=null?litp.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 785:15: -> ^( BROKEN_PLUS $additiveExpression $litp)
            	            {
            	                // IbmSparqlExt.g:785:18: ^( BROKEN_PLUS $additiveExpression $litp)
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BROKEN_PLUS, "BROKEN_PLUS"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_litp.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // IbmSparqlExt.g:787:12: litn= numericLiteralNegative (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) )
            	    {
            	    pushFollow(FOLLOW_numericLiteralNegative_in_additiveExpression6093);
            	    litn=numericLiteralNegative();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericLiteralNegative.add(litn.getTree());
            	    // IbmSparqlExt.g:788:13: (op2= ( '*' | '/' ) rhs4= multiplicativeExpression -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) ) | -> ^( BROKEN_MINUS $additiveExpression $litn) )
            	    int alt139=2;
            	    int LA139_0 = input.LA(1);

            	    if ( (LA139_0==256||LA139_0==259) ) {
            	        alt139=1;
            	    }
            	    else if ( (LA139_0==LTE||LA139_0==CLOSE_BRACE||LA139_0==AS||LA139_0==SEMICOLON||LA139_0==COMMA||(LA139_0>=LOGICAL_OR && LA139_0<=NOT)||(LA139_0>=INTEGER_POSITIVE && LA139_0<=DOUBLE_NEGATIVE)||LA139_0==262||(LA139_0>=264 && LA139_0<=268)) ) {
            	        alt139=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 139, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt139) {
            	        case 1 :
            	            // IbmSparqlExt.g:788:15: op2= ( '*' | '/' ) rhs4= multiplicativeExpression
            	            {
            	            // IbmSparqlExt.g:788:19: ( '*' | '/' )
            	            int alt138=2;
            	            int LA138_0 = input.LA(1);

            	            if ( (LA138_0==256) ) {
            	                alt138=1;
            	            }
            	            else if ( (LA138_0==259) ) {
            	                alt138=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 138, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt138) {
            	                case 1 :
            	                    // IbmSparqlExt.g:788:20: '*'
            	                    {
            	                    char_literal318=(Token)match(input,256,FOLLOW_256_in_additiveExpression6113); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_256.add(char_literal318);


            	                    }
            	                    break;
            	                case 2 :
            	                    // IbmSparqlExt.g:788:24: '/'
            	                    {
            	                    char_literal319=(Token)match(input,259,FOLLOW_259_in_additiveExpression6115); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_259.add(char_literal319);


            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6120);
            	            rhs4=multiplicativeExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(rhs4.getTree());


            	            // AST REWRITE
            	            // elements: op2, rhs4, additiveExpression, litn
            	            // token labels: op2
            	            // rule labels: litn, rhs4, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleTokenStream stream_op2=new RewriteRuleTokenStream(adaptor,"token op2",op2);
            	            RewriteRuleSubtreeStream stream_litn=new RewriteRuleSubtreeStream(adaptor,"rule litn",litn!=null?litn.tree:null);
            	            RewriteRuleSubtreeStream stream_rhs4=new RewriteRuleSubtreeStream(adaptor,"rule rhs4",rhs4!=null?rhs4.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 789:15: -> ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) )
            	            {
            	                // IbmSparqlExt.g:789:18: ^( BROKEN_MINUS $additiveExpression ^( $op2 $litn $rhs4) )
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BROKEN_MINUS, "BROKEN_MINUS"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                // IbmSparqlExt.g:789:53: ^( $op2 $litn $rhs4)
            	                {
            	                XTree root_2 = (XTree)adaptor.nil();
            	                root_2 = (XTree)adaptor.becomeRoot(stream_op2.nextNode(), root_2);

            	                adaptor.addChild(root_2, stream_litn.nextTree());
            	                adaptor.addChild(root_2, stream_rhs4.nextTree());

            	                adaptor.addChild(root_1, root_2);
            	                }

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;
            	        case 2 :
            	            // IbmSparqlExt.g:791:15: 
            	            {

            	            // AST REWRITE
            	            // elements: litn, additiveExpression
            	            // token labels: 
            	            // rule labels: litn, retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {
            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_litn=new RewriteRuleSubtreeStream(adaptor,"rule litn",litn!=null?litn.tree:null);
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (XTree)adaptor.nil();
            	            // 791:15: -> ^( BROKEN_MINUS $additiveExpression $litn)
            	            {
            	                // IbmSparqlExt.g:791:18: ^( BROKEN_MINUS $additiveExpression $litn)
            	                {
            	                XTree root_1 = (XTree)adaptor.nil();
            	                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BROKEN_MINUS, "BROKEN_MINUS"), root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());
            	                adaptor.addChild(root_1, stream_litn.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            retval.tree = root_0;}
            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // IbmSparqlExt.g:796:1: multiplicativeExpression : unaryExpression ( '*' unaryExpression | '/' unaryExpression )* ;
    public final IbmSparqlExtParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        IbmSparqlExtParser.multiplicativeExpression_return retval = new IbmSparqlExtParser.multiplicativeExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal321=null;
        Token char_literal323=null;
        IbmSparqlExtParser.unaryExpression_return unaryExpression320 = null;

        IbmSparqlExtParser.unaryExpression_return unaryExpression322 = null;

        IbmSparqlExtParser.unaryExpression_return unaryExpression324 = null;


        XTree char_literal321_tree=null;
        XTree char_literal323_tree=null;

        try {
            // IbmSparqlExt.g:797:2: ( unaryExpression ( '*' unaryExpression | '/' unaryExpression )* )
            // IbmSparqlExt.g:797:6: unaryExpression ( '*' unaryExpression | '/' unaryExpression )*
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6237);
            unaryExpression320=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression320.getTree());
            // IbmSparqlExt.g:797:23: ( '*' unaryExpression | '/' unaryExpression )*
            loop141:
            do {
                int alt141=3;
                int LA141_0 = input.LA(1);

                if ( (LA141_0==256) ) {
                    alt141=1;
                }
                else if ( (LA141_0==259) ) {
                    alt141=2;
                }


                switch (alt141) {
            	case 1 :
            	    // IbmSparqlExt.g:797:25: '*' unaryExpression
            	    {
            	    char_literal321=(Token)match(input,256,FOLLOW_256_in_multiplicativeExpression6242); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal321_tree = (XTree)adaptor.create(char_literal321);
            	    root_0 = (XTree)adaptor.becomeRoot(char_literal321_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6245);
            	    unaryExpression322=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression322.getTree());

            	    }
            	    break;
            	case 2 :
            	    // IbmSparqlExt.g:798:10: '/' unaryExpression
            	    {
            	    char_literal323=(Token)match(input,259,FOLLOW_259_in_multiplicativeExpression6257); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal323_tree = (XTree)adaptor.create(char_literal323);
            	    root_0 = (XTree)adaptor.becomeRoot(char_literal323_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6260);
            	    unaryExpression324=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression324.getTree());

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // IbmSparqlExt.g:802:1: unaryExpression : ( '!' primaryExpression | '+' primaryExpression | '-' primaryExpression | primaryExpression );
    public final IbmSparqlExtParser.unaryExpression_return unaryExpression() throws RecognitionException {
        IbmSparqlExtParser.unaryExpression_return retval = new IbmSparqlExtParser.unaryExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token char_literal325=null;
        Token char_literal327=null;
        Token char_literal329=null;
        IbmSparqlExtParser.primaryExpression_return primaryExpression326 = null;

        IbmSparqlExtParser.primaryExpression_return primaryExpression328 = null;

        IbmSparqlExtParser.primaryExpression_return primaryExpression330 = null;

        IbmSparqlExtParser.primaryExpression_return primaryExpression331 = null;


        XTree char_literal325_tree=null;
        XTree char_literal327_tree=null;
        XTree char_literal329_tree=null;

        try {
            // IbmSparqlExt.g:803:2: ( '!' primaryExpression | '+' primaryExpression | '-' primaryExpression | primaryExpression )
            int alt142=4;
            switch ( input.LA(1) ) {
            case 263:
                {
                alt142=1;
                }
                break;
            case 262:
                {
                alt142=2;
                }
                break;
            case 268:
                {
                alt142=3;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case OPEN_BRACE:
            case STRING_LITERAL2:
            case INTEGER:
            case VAR1:
            case VAR2:
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case UUID:
            case STRUUID:
            case MD5:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
            case COUNT:
            case SUM:
            case MIN:
            case MAX:
            case AVG:
            case SAMPLE:
            case GROUP_CONCAT:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
            case TRUE:
            case FALSE:
            case STRING_LITERAL1:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
            case PNAME_LN:
                {
                alt142=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // IbmSparqlExt.g:803:4: '!' primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal325=(Token)match(input,263,FOLLOW_263_in_unaryExpression6286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal325_tree = (XTree)adaptor.create(char_literal325);
                    root_0 = (XTree)adaptor.becomeRoot(char_literal325_tree, root_0);
                    }
                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6289);
                    primaryExpression326=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression326.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:804:5: '+' primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal327=(Token)match(input,262,FOLLOW_262_in_unaryExpression6295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal327_tree = (XTree)adaptor.create(char_literal327);
                    root_0 = (XTree)adaptor.becomeRoot(char_literal327_tree, root_0);
                    }
                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6298);
                    primaryExpression328=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression328.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:805:5: '-' primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    char_literal329=(Token)match(input,268,FOLLOW_268_in_unaryExpression6304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal329_tree = (XTree)adaptor.create(char_literal329);
                    root_0 = (XTree)adaptor.becomeRoot(char_literal329_tree, root_0);
                    }
                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6307);
                    primaryExpression330=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression330.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:806:5: primaryExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_primaryExpression_in_unaryExpression6313);
                    primaryExpression331=primaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primaryExpression331.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class primaryExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primaryExpression"
    // IbmSparqlExt.g:809:1: primaryExpression : ( brackettedExpression | builtInCall | iRIrefOrFunction | rDFLiteral | numericLiteral | booleanLiteral | var | aggregate );
    public final IbmSparqlExtParser.primaryExpression_return primaryExpression() throws RecognitionException {
        IbmSparqlExtParser.primaryExpression_return retval = new IbmSparqlExtParser.primaryExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.brackettedExpression_return brackettedExpression332 = null;

        IbmSparqlExtParser.builtInCall_return builtInCall333 = null;

        IbmSparqlExtParser.iRIrefOrFunction_return iRIrefOrFunction334 = null;

        IbmSparqlExtParser.rDFLiteral_return rDFLiteral335 = null;

        IbmSparqlExtParser.numericLiteral_return numericLiteral336 = null;

        IbmSparqlExtParser.booleanLiteral_return booleanLiteral337 = null;

        IbmSparqlExtParser.var_return var338 = null;

        IbmSparqlExtParser.aggregate_return aggregate339 = null;



        try {
            // IbmSparqlExt.g:810:2: ( brackettedExpression | builtInCall | iRIrefOrFunction | rDFLiteral | numericLiteral | booleanLiteral | var | aggregate )
            int alt143=8;
            switch ( input.LA(1) ) {
            case OPEN_BRACE:
                {
                alt143=1;
                }
                break;
            case NOT:
            case STR:
            case LANG:
            case LANGMATCHES:
            case DATATYPE:
            case BOUND:
            case IRI:
            case URI:
            case BNODE:
            case RAND:
            case ABS:
            case CEIL:
            case FLOOR:
            case ROUND:
            case CONCAT:
            case STRLEN:
            case UCASE:
            case LCASE:
            case ENCODE_FOR_URI:
            case CONTAINS:
            case STRSTARTS:
            case STRENDS:
            case STRBEFORE:
            case STRAFTER:
            case YEAR:
            case MONTH:
            case DAY:
            case HOURS:
            case MINUTES:
            case SECONDS:
            case TIMEZONE:
            case TZ:
            case NOW:
            case UUID:
            case STRUUID:
            case MD5:
            case SHA1:
            case SHA224:
            case SHA256:
            case SHA384:
            case SHA512:
            case COALESCE:
            case IF:
            case STRLANG:
            case STRDT:
            case SAMETERM:
            case ISIRI:
            case ISURI:
            case ISBLANK:
            case ISLITERAL:
            case ISNUMERIC:
            case REGEX:
            case SUBSTR:
            case REPLACE:
            case EXISTS:
                {
                alt143=2;
                }
                break;
            case IRI_REF:
            case PNAME_NS:
            case PNAME_LN:
                {
                alt143=3;
                }
                break;
            case STRING_LITERAL2:
            case STRING_LITERAL1:
            case STRING_LITERAL_LONG1:
            case STRING_LITERAL_LONG2:
                {
                alt143=4;
                }
                break;
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt143=5;
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt143=6;
                }
                break;
            case VAR1:
            case VAR2:
                {
                alt143=7;
                }
                break;
            case COUNT:
            case SUM:
            case MIN:
            case MAX:
            case AVG:
            case SAMPLE:
            case GROUP_CONCAT:
                {
                alt143=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // IbmSparqlExt.g:810:6: brackettedExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_brackettedExpression_in_primaryExpression6330);
                    brackettedExpression332=brackettedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackettedExpression332.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:811:5: builtInCall
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_builtInCall_in_primaryExpression6337);
                    builtInCall333=builtInCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtInCall333.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:812:5: iRIrefOrFunction
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_iRIrefOrFunction_in_primaryExpression6344);
                    iRIrefOrFunction334=iRIrefOrFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIrefOrFunction334.getTree());

                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:813:5: rDFLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_rDFLiteral_in_primaryExpression6351);
                    rDFLiteral335=rDFLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rDFLiteral335.getTree());

                    }
                    break;
                case 5 :
                    // IbmSparqlExt.g:814:5: numericLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_primaryExpression6358);
                    numericLiteral336=numericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteral336.getTree());

                    }
                    break;
                case 6 :
                    // IbmSparqlExt.g:815:5: booleanLiteral
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_primaryExpression6365);
                    booleanLiteral337=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booleanLiteral337.getTree());

                    }
                    break;
                case 7 :
                    // IbmSparqlExt.g:816:5: var
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_var_in_primaryExpression6372);
                    var338=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var338.getTree());

                    }
                    break;
                case 8 :
                    // IbmSparqlExt.g:817:5: aggregate
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_aggregate_in_primaryExpression6379);
                    aggregate339=aggregate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aggregate339.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"

    public static class brackettedExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackettedExpression"
    // IbmSparqlExt.g:820:1: brackettedExpression : ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE ) -> ^( EXPRESSION $e) ;
    public final IbmSparqlExtParser.brackettedExpression_return brackettedExpression() throws RecognitionException {
        IbmSparqlExtParser.brackettedExpression_return retval = new IbmSparqlExtParser.brackettedExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE340=null;
        Token CLOSE_BRACE341=null;
        IbmSparqlExtParser.expression_return e = null;


        XTree OPEN_BRACE340_tree=null;
        XTree CLOSE_BRACE341_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // IbmSparqlExt.g:821:2: ( ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE ) -> ^( EXPRESSION $e) )
            // IbmSparqlExt.g:821:6: ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE )
            {
            // IbmSparqlExt.g:821:6: ( options {backtrack=true; } : OPEN_BRACE e= expression CLOSE_BRACE )
            // IbmSparqlExt.g:821:36: OPEN_BRACE e= expression CLOSE_BRACE
            {
            OPEN_BRACE340=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_brackettedExpression6409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE340);

            pushFollow(FOLLOW_expression_in_brackettedExpression6413);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e.getTree());
            CLOSE_BRACE341=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_brackettedExpression6415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE341);


            }



            // AST REWRITE
            // elements: e
            // token labels: 
            // rule labels: retval, e
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"rule e",e!=null?e.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 823:3: -> ^( EXPRESSION $e)
            {
                // IbmSparqlExt.g:823:7: ^( EXPRESSION $e)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(EXPRESSION, "EXPRESSION"), root_1);

                adaptor.addChild(root_1, stream_e.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "brackettedExpression"

    public static class builtInCall_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtInCall"
    // IbmSparqlExt.g:826:1: builtInCall : ( STR OPEN_BRACE e1= expression CLOSE_BRACE -> ^( STR $e1) | LANG OPEN_BRACE e2= expression CLOSE_BRACE -> ^( LANG $e2) | LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE -> ^( LANGMATCHES $e3 $e4) | DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE -> ^( DATATYPE $e5) | BOUND OPEN_BRACE v= var CLOSE_BRACE -> ^( BOUND $v) | IRI OPEN_BRACE e51= expression CLOSE_BRACE -> ^( IRI $e51) | URI OPEN_BRACE e6= expression CLOSE_BRACE -> ^( URI $e6) | BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil ) -> ^( BNODE ( $e7)? ) | RAND nil -> ^( RAND NIL ) | ABS OPEN_BRACE e8= expression CLOSE_BRACE -> ^( ABS $e8) | CEIL OPEN_BRACE e9= expression CLOSE_BRACE -> ^( CEIL $e9) | FLOOR OPEN_BRACE e10= expression CLOSE_BRACE -> ^( FLOOR $e10) | ROUND OPEN_BRACE e11= expression CLOSE_BRACE -> ^( ROUND $e11) | CONCAT e12= expressionList -> ^( CONCAT $e12) | s= substringExpression -> $s | STRLEN OPEN_BRACE e13= expression CLOSE_BRACE -> ^( STRLEN $e13) | strReplaceExpression | UCASE OPEN_BRACE e14= expression CLOSE_BRACE -> ^( UCASE $e14) | LCASE OPEN_BRACE e15= expression CLOSE_BRACE -> ^( LCASE $e15) | ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE -> ^( ENCODE_FOR_URI $e16) | CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE -> ^( CONTAINS $e17 $e18) | STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE -> ^( STRSTARTS $e19 $e20) | STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRENDS $e21 $e22) | STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRBEFORE $e21 $e22) | STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRAFTER $e21 $e22) | YEAR OPEN_BRACE e23= expression CLOSE_BRACE -> ^( YEAR $e23) | MONTH OPEN_BRACE e24= expression CLOSE_BRACE -> ^( MONTH $e24) | DAY OPEN_BRACE e25= expression CLOSE_BRACE -> ^( DAY $e25) | HOURS OPEN_BRACE e26= expression CLOSE_BRACE -> ^( HOURS $e26) | MINUTES OPEN_BRACE e27= expression CLOSE_BRACE -> ^( MINUTES $e27) | SECONDS OPEN_BRACE e28= expression CLOSE_BRACE -> ^( SECONDS $e28) | TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE -> ^( TIMEZONE $e29) | TZ OPEN_BRACE e30= expression CLOSE_BRACE -> ^( TZ $e30) | NOW nil -> NOW | UUID nil -> UUID | STRUUID nil -> STRUUID | MD5 OPEN_BRACE e31= expression CLOSE_BRACE -> ^( MD5 $e31) | SHA1 OPEN_BRACE e32= expression CLOSE_BRACE -> ^( SHA1 $e32) | SHA224 OPEN_BRACE e33= expression CLOSE_BRACE -> ^( SHA224 $e33) | SHA256 OPEN_BRACE e34= expression CLOSE_BRACE -> ^( SHA256 $e34) | SHA384 OPEN_BRACE e35= expression CLOSE_BRACE -> ^( SHA384 $e35) | SHA512 OPEN_BRACE e36= expression CLOSE_BRACE -> ^( SHA512 $e36) | COALESCE e37= expressionList -> ^( COALESCE $e37) | IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE -> ^( IF $e38 $e39 $e40) | STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE -> ^( STRLANG $e41 $e42) | STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE -> ^( STRDT $e43 $e44) | SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE -> ^( SAMETERM $e45 $e46) | ISIRI OPEN_BRACE e47= expression CLOSE_BRACE -> ^( ISIRI $e47) | ISURI OPEN_BRACE e48= expression CLOSE_BRACE -> ^( ISURI $e48) | ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE -> ^( ISBLANK $e52) | ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE -> ^( ISLITERAL $e49) | ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE -> ^( ISNUMERIC $e50) | regexExpression | existsFunc | notExistsFunc );
    public final IbmSparqlExtParser.builtInCall_return builtInCall() throws RecognitionException {
        IbmSparqlExtParser.builtInCall_return retval = new IbmSparqlExtParser.builtInCall_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token STR342=null;
        Token OPEN_BRACE343=null;
        Token CLOSE_BRACE344=null;
        Token LANG345=null;
        Token OPEN_BRACE346=null;
        Token CLOSE_BRACE347=null;
        Token LANGMATCHES348=null;
        Token OPEN_BRACE349=null;
        Token COMMA350=null;
        Token CLOSE_BRACE351=null;
        Token DATATYPE352=null;
        Token OPEN_BRACE353=null;
        Token CLOSE_BRACE354=null;
        Token BOUND355=null;
        Token OPEN_BRACE356=null;
        Token CLOSE_BRACE357=null;
        Token IRI358=null;
        Token OPEN_BRACE359=null;
        Token CLOSE_BRACE360=null;
        Token URI361=null;
        Token OPEN_BRACE362=null;
        Token CLOSE_BRACE363=null;
        Token BNODE364=null;
        Token OPEN_BRACE365=null;
        Token CLOSE_BRACE366=null;
        Token RAND368=null;
        Token ABS370=null;
        Token OPEN_BRACE371=null;
        Token CLOSE_BRACE372=null;
        Token CEIL373=null;
        Token OPEN_BRACE374=null;
        Token CLOSE_BRACE375=null;
        Token FLOOR376=null;
        Token OPEN_BRACE377=null;
        Token CLOSE_BRACE378=null;
        Token ROUND379=null;
        Token OPEN_BRACE380=null;
        Token CLOSE_BRACE381=null;
        Token CONCAT382=null;
        Token STRLEN383=null;
        Token OPEN_BRACE384=null;
        Token CLOSE_BRACE385=null;
        Token UCASE387=null;
        Token OPEN_BRACE388=null;
        Token CLOSE_BRACE389=null;
        Token LCASE390=null;
        Token OPEN_BRACE391=null;
        Token CLOSE_BRACE392=null;
        Token ENCODE_FOR_URI393=null;
        Token OPEN_BRACE394=null;
        Token CLOSE_BRACE395=null;
        Token CONTAINS396=null;
        Token OPEN_BRACE397=null;
        Token COMMA398=null;
        Token CLOSE_BRACE399=null;
        Token STRSTARTS400=null;
        Token OPEN_BRACE401=null;
        Token COMMA402=null;
        Token CLOSE_BRACE403=null;
        Token STRENDS404=null;
        Token OPEN_BRACE405=null;
        Token COMMA406=null;
        Token CLOSE_BRACE407=null;
        Token STRBEFORE408=null;
        Token OPEN_BRACE409=null;
        Token COMMA410=null;
        Token CLOSE_BRACE411=null;
        Token STRAFTER412=null;
        Token OPEN_BRACE413=null;
        Token COMMA414=null;
        Token CLOSE_BRACE415=null;
        Token YEAR416=null;
        Token OPEN_BRACE417=null;
        Token CLOSE_BRACE418=null;
        Token MONTH419=null;
        Token OPEN_BRACE420=null;
        Token CLOSE_BRACE421=null;
        Token DAY422=null;
        Token OPEN_BRACE423=null;
        Token CLOSE_BRACE424=null;
        Token HOURS425=null;
        Token OPEN_BRACE426=null;
        Token CLOSE_BRACE427=null;
        Token MINUTES428=null;
        Token OPEN_BRACE429=null;
        Token CLOSE_BRACE430=null;
        Token SECONDS431=null;
        Token OPEN_BRACE432=null;
        Token CLOSE_BRACE433=null;
        Token TIMEZONE434=null;
        Token OPEN_BRACE435=null;
        Token CLOSE_BRACE436=null;
        Token TZ437=null;
        Token OPEN_BRACE438=null;
        Token CLOSE_BRACE439=null;
        Token NOW440=null;
        Token UUID442=null;
        Token STRUUID444=null;
        Token MD5446=null;
        Token OPEN_BRACE447=null;
        Token CLOSE_BRACE448=null;
        Token SHA1449=null;
        Token OPEN_BRACE450=null;
        Token CLOSE_BRACE451=null;
        Token SHA224452=null;
        Token OPEN_BRACE453=null;
        Token CLOSE_BRACE454=null;
        Token SHA256455=null;
        Token OPEN_BRACE456=null;
        Token CLOSE_BRACE457=null;
        Token SHA384458=null;
        Token OPEN_BRACE459=null;
        Token CLOSE_BRACE460=null;
        Token SHA512461=null;
        Token OPEN_BRACE462=null;
        Token CLOSE_BRACE463=null;
        Token COALESCE464=null;
        Token IF465=null;
        Token OPEN_BRACE466=null;
        Token COMMA467=null;
        Token COMMA468=null;
        Token CLOSE_BRACE469=null;
        Token STRLANG470=null;
        Token OPEN_BRACE471=null;
        Token COMMA472=null;
        Token CLOSE_BRACE473=null;
        Token STRDT474=null;
        Token OPEN_BRACE475=null;
        Token COMMA476=null;
        Token CLOSE_BRACE477=null;
        Token SAMETERM478=null;
        Token OPEN_BRACE479=null;
        Token COMMA480=null;
        Token CLOSE_BRACE481=null;
        Token ISIRI482=null;
        Token OPEN_BRACE483=null;
        Token CLOSE_BRACE484=null;
        Token ISURI485=null;
        Token OPEN_BRACE486=null;
        Token CLOSE_BRACE487=null;
        Token ISBLANK488=null;
        Token OPEN_BRACE489=null;
        Token CLOSE_BRACE490=null;
        Token ISLITERAL491=null;
        Token OPEN_BRACE492=null;
        Token CLOSE_BRACE493=null;
        Token ISNUMERIC494=null;
        Token OPEN_BRACE495=null;
        Token CLOSE_BRACE496=null;
        IbmSparqlExtParser.expression_return e1 = null;

        IbmSparqlExtParser.expression_return e2 = null;

        IbmSparqlExtParser.expression_return e3 = null;

        IbmSparqlExtParser.expression_return e4 = null;

        IbmSparqlExtParser.expression_return e5 = null;

        IbmSparqlExtParser.var_return v = null;

        IbmSparqlExtParser.expression_return e51 = null;

        IbmSparqlExtParser.expression_return e6 = null;

        IbmSparqlExtParser.expression_return e7 = null;

        IbmSparqlExtParser.expression_return e8 = null;

        IbmSparqlExtParser.expression_return e9 = null;

        IbmSparqlExtParser.expression_return e10 = null;

        IbmSparqlExtParser.expression_return e11 = null;

        IbmSparqlExtParser.expressionList_return e12 = null;

        IbmSparqlExtParser.substringExpression_return s = null;

        IbmSparqlExtParser.expression_return e13 = null;

        IbmSparqlExtParser.expression_return e14 = null;

        IbmSparqlExtParser.expression_return e15 = null;

        IbmSparqlExtParser.expression_return e16 = null;

        IbmSparqlExtParser.expression_return e17 = null;

        IbmSparqlExtParser.expression_return e18 = null;

        IbmSparqlExtParser.expression_return e19 = null;

        IbmSparqlExtParser.expression_return e20 = null;

        IbmSparqlExtParser.expression_return e21 = null;

        IbmSparqlExtParser.expression_return e22 = null;

        IbmSparqlExtParser.expression_return e23 = null;

        IbmSparqlExtParser.expression_return e24 = null;

        IbmSparqlExtParser.expression_return e25 = null;

        IbmSparqlExtParser.expression_return e26 = null;

        IbmSparqlExtParser.expression_return e27 = null;

        IbmSparqlExtParser.expression_return e28 = null;

        IbmSparqlExtParser.expression_return e29 = null;

        IbmSparqlExtParser.expression_return e30 = null;

        IbmSparqlExtParser.expression_return e31 = null;

        IbmSparqlExtParser.expression_return e32 = null;

        IbmSparqlExtParser.expression_return e33 = null;

        IbmSparqlExtParser.expression_return e34 = null;

        IbmSparqlExtParser.expression_return e35 = null;

        IbmSparqlExtParser.expression_return e36 = null;

        IbmSparqlExtParser.expressionList_return e37 = null;

        IbmSparqlExtParser.expression_return e38 = null;

        IbmSparqlExtParser.expression_return e39 = null;

        IbmSparqlExtParser.expression_return e40 = null;

        IbmSparqlExtParser.expression_return e41 = null;

        IbmSparqlExtParser.expression_return e42 = null;

        IbmSparqlExtParser.expression_return e43 = null;

        IbmSparqlExtParser.expression_return e44 = null;

        IbmSparqlExtParser.expression_return e45 = null;

        IbmSparqlExtParser.expression_return e46 = null;

        IbmSparqlExtParser.expression_return e47 = null;

        IbmSparqlExtParser.expression_return e48 = null;

        IbmSparqlExtParser.expression_return e52 = null;

        IbmSparqlExtParser.expression_return e49 = null;

        IbmSparqlExtParser.expression_return e50 = null;

        IbmSparqlExtParser.nil_return nil367 = null;

        IbmSparqlExtParser.nil_return nil369 = null;

        IbmSparqlExtParser.strReplaceExpression_return strReplaceExpression386 = null;

        IbmSparqlExtParser.nil_return nil441 = null;

        IbmSparqlExtParser.nil_return nil443 = null;

        IbmSparqlExtParser.nil_return nil445 = null;

        IbmSparqlExtParser.regexExpression_return regexExpression497 = null;

        IbmSparqlExtParser.existsFunc_return existsFunc498 = null;

        IbmSparqlExtParser.notExistsFunc_return notExistsFunc499 = null;


        XTree STR342_tree=null;
        XTree OPEN_BRACE343_tree=null;
        XTree CLOSE_BRACE344_tree=null;
        XTree LANG345_tree=null;
        XTree OPEN_BRACE346_tree=null;
        XTree CLOSE_BRACE347_tree=null;
        XTree LANGMATCHES348_tree=null;
        XTree OPEN_BRACE349_tree=null;
        XTree COMMA350_tree=null;
        XTree CLOSE_BRACE351_tree=null;
        XTree DATATYPE352_tree=null;
        XTree OPEN_BRACE353_tree=null;
        XTree CLOSE_BRACE354_tree=null;
        XTree BOUND355_tree=null;
        XTree OPEN_BRACE356_tree=null;
        XTree CLOSE_BRACE357_tree=null;
        XTree IRI358_tree=null;
        XTree OPEN_BRACE359_tree=null;
        XTree CLOSE_BRACE360_tree=null;
        XTree URI361_tree=null;
        XTree OPEN_BRACE362_tree=null;
        XTree CLOSE_BRACE363_tree=null;
        XTree BNODE364_tree=null;
        XTree OPEN_BRACE365_tree=null;
        XTree CLOSE_BRACE366_tree=null;
        XTree RAND368_tree=null;
        XTree ABS370_tree=null;
        XTree OPEN_BRACE371_tree=null;
        XTree CLOSE_BRACE372_tree=null;
        XTree CEIL373_tree=null;
        XTree OPEN_BRACE374_tree=null;
        XTree CLOSE_BRACE375_tree=null;
        XTree FLOOR376_tree=null;
        XTree OPEN_BRACE377_tree=null;
        XTree CLOSE_BRACE378_tree=null;
        XTree ROUND379_tree=null;
        XTree OPEN_BRACE380_tree=null;
        XTree CLOSE_BRACE381_tree=null;
        XTree CONCAT382_tree=null;
        XTree STRLEN383_tree=null;
        XTree OPEN_BRACE384_tree=null;
        XTree CLOSE_BRACE385_tree=null;
        XTree UCASE387_tree=null;
        XTree OPEN_BRACE388_tree=null;
        XTree CLOSE_BRACE389_tree=null;
        XTree LCASE390_tree=null;
        XTree OPEN_BRACE391_tree=null;
        XTree CLOSE_BRACE392_tree=null;
        XTree ENCODE_FOR_URI393_tree=null;
        XTree OPEN_BRACE394_tree=null;
        XTree CLOSE_BRACE395_tree=null;
        XTree CONTAINS396_tree=null;
        XTree OPEN_BRACE397_tree=null;
        XTree COMMA398_tree=null;
        XTree CLOSE_BRACE399_tree=null;
        XTree STRSTARTS400_tree=null;
        XTree OPEN_BRACE401_tree=null;
        XTree COMMA402_tree=null;
        XTree CLOSE_BRACE403_tree=null;
        XTree STRENDS404_tree=null;
        XTree OPEN_BRACE405_tree=null;
        XTree COMMA406_tree=null;
        XTree CLOSE_BRACE407_tree=null;
        XTree STRBEFORE408_tree=null;
        XTree OPEN_BRACE409_tree=null;
        XTree COMMA410_tree=null;
        XTree CLOSE_BRACE411_tree=null;
        XTree STRAFTER412_tree=null;
        XTree OPEN_BRACE413_tree=null;
        XTree COMMA414_tree=null;
        XTree CLOSE_BRACE415_tree=null;
        XTree YEAR416_tree=null;
        XTree OPEN_BRACE417_tree=null;
        XTree CLOSE_BRACE418_tree=null;
        XTree MONTH419_tree=null;
        XTree OPEN_BRACE420_tree=null;
        XTree CLOSE_BRACE421_tree=null;
        XTree DAY422_tree=null;
        XTree OPEN_BRACE423_tree=null;
        XTree CLOSE_BRACE424_tree=null;
        XTree HOURS425_tree=null;
        XTree OPEN_BRACE426_tree=null;
        XTree CLOSE_BRACE427_tree=null;
        XTree MINUTES428_tree=null;
        XTree OPEN_BRACE429_tree=null;
        XTree CLOSE_BRACE430_tree=null;
        XTree SECONDS431_tree=null;
        XTree OPEN_BRACE432_tree=null;
        XTree CLOSE_BRACE433_tree=null;
        XTree TIMEZONE434_tree=null;
        XTree OPEN_BRACE435_tree=null;
        XTree CLOSE_BRACE436_tree=null;
        XTree TZ437_tree=null;
        XTree OPEN_BRACE438_tree=null;
        XTree CLOSE_BRACE439_tree=null;
        XTree NOW440_tree=null;
        XTree UUID442_tree=null;
        XTree STRUUID444_tree=null;
        XTree MD5446_tree=null;
        XTree OPEN_BRACE447_tree=null;
        XTree CLOSE_BRACE448_tree=null;
        XTree SHA1449_tree=null;
        XTree OPEN_BRACE450_tree=null;
        XTree CLOSE_BRACE451_tree=null;
        XTree SHA224452_tree=null;
        XTree OPEN_BRACE453_tree=null;
        XTree CLOSE_BRACE454_tree=null;
        XTree SHA256455_tree=null;
        XTree OPEN_BRACE456_tree=null;
        XTree CLOSE_BRACE457_tree=null;
        XTree SHA384458_tree=null;
        XTree OPEN_BRACE459_tree=null;
        XTree CLOSE_BRACE460_tree=null;
        XTree SHA512461_tree=null;
        XTree OPEN_BRACE462_tree=null;
        XTree CLOSE_BRACE463_tree=null;
        XTree COALESCE464_tree=null;
        XTree IF465_tree=null;
        XTree OPEN_BRACE466_tree=null;
        XTree COMMA467_tree=null;
        XTree COMMA468_tree=null;
        XTree CLOSE_BRACE469_tree=null;
        XTree STRLANG470_tree=null;
        XTree OPEN_BRACE471_tree=null;
        XTree COMMA472_tree=null;
        XTree CLOSE_BRACE473_tree=null;
        XTree STRDT474_tree=null;
        XTree OPEN_BRACE475_tree=null;
        XTree COMMA476_tree=null;
        XTree CLOSE_BRACE477_tree=null;
        XTree SAMETERM478_tree=null;
        XTree OPEN_BRACE479_tree=null;
        XTree COMMA480_tree=null;
        XTree CLOSE_BRACE481_tree=null;
        XTree ISIRI482_tree=null;
        XTree OPEN_BRACE483_tree=null;
        XTree CLOSE_BRACE484_tree=null;
        XTree ISURI485_tree=null;
        XTree OPEN_BRACE486_tree=null;
        XTree CLOSE_BRACE487_tree=null;
        XTree ISBLANK488_tree=null;
        XTree OPEN_BRACE489_tree=null;
        XTree CLOSE_BRACE490_tree=null;
        XTree ISLITERAL491_tree=null;
        XTree OPEN_BRACE492_tree=null;
        XTree CLOSE_BRACE493_tree=null;
        XTree ISNUMERIC494_tree=null;
        XTree OPEN_BRACE495_tree=null;
        XTree CLOSE_BRACE496_tree=null;
        RewriteRuleTokenStream stream_SHA256=new RewriteRuleTokenStream(adaptor,"token SHA256");
        RewriteRuleTokenStream stream_YEAR=new RewriteRuleTokenStream(adaptor,"token YEAR");
        RewriteRuleTokenStream stream_UUID=new RewriteRuleTokenStream(adaptor,"token UUID");
        RewriteRuleTokenStream stream_TIMEZONE=new RewriteRuleTokenStream(adaptor,"token TIMEZONE");
        RewriteRuleTokenStream stream_CONTAINS=new RewriteRuleTokenStream(adaptor,"token CONTAINS");
        RewriteRuleTokenStream stream_STRENDS=new RewriteRuleTokenStream(adaptor,"token STRENDS");
        RewriteRuleTokenStream stream_LCASE=new RewriteRuleTokenStream(adaptor,"token LCASE");
        RewriteRuleTokenStream stream_BNODE=new RewriteRuleTokenStream(adaptor,"token BNODE");
        RewriteRuleTokenStream stream_SHA512=new RewriteRuleTokenStream(adaptor,"token SHA512");
        RewriteRuleTokenStream stream_SECONDS=new RewriteRuleTokenStream(adaptor,"token SECONDS");
        RewriteRuleTokenStream stream_NOW=new RewriteRuleTokenStream(adaptor,"token NOW");
        RewriteRuleTokenStream stream_DAY=new RewriteRuleTokenStream(adaptor,"token DAY");
        RewriteRuleTokenStream stream_SHA224=new RewriteRuleTokenStream(adaptor,"token SHA224");
        RewriteRuleTokenStream stream_STRAFTER=new RewriteRuleTokenStream(adaptor,"token STRAFTER");
        RewriteRuleTokenStream stream_STRLEN=new RewriteRuleTokenStream(adaptor,"token STRLEN");
        RewriteRuleTokenStream stream_MONTH=new RewriteRuleTokenStream(adaptor,"token MONTH");
        RewriteRuleTokenStream stream_ENCODE_FOR_URI=new RewriteRuleTokenStream(adaptor,"token ENCODE_FOR_URI");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_ISURI=new RewriteRuleTokenStream(adaptor,"token ISURI");
        RewriteRuleTokenStream stream_STR=new RewriteRuleTokenStream(adaptor,"token STR");
        RewriteRuleTokenStream stream_ISLITERAL=new RewriteRuleTokenStream(adaptor,"token ISLITERAL");
        RewriteRuleTokenStream stream_STRDT=new RewriteRuleTokenStream(adaptor,"token STRDT");
        RewriteRuleTokenStream stream_SAMETERM=new RewriteRuleTokenStream(adaptor,"token SAMETERM");
        RewriteRuleTokenStream stream_MD5=new RewriteRuleTokenStream(adaptor,"token MD5");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RAND=new RewriteRuleTokenStream(adaptor,"token RAND");
        RewriteRuleTokenStream stream_IRI=new RewriteRuleTokenStream(adaptor,"token IRI");
        RewriteRuleTokenStream stream_LANGMATCHES=new RewriteRuleTokenStream(adaptor,"token LANGMATCHES");
        RewriteRuleTokenStream stream_TZ=new RewriteRuleTokenStream(adaptor,"token TZ");
        RewriteRuleTokenStream stream_STRLANG=new RewriteRuleTokenStream(adaptor,"token STRLANG");
        RewriteRuleTokenStream stream_BOUND=new RewriteRuleTokenStream(adaptor,"token BOUND");
        RewriteRuleTokenStream stream_ISIRI=new RewriteRuleTokenStream(adaptor,"token ISIRI");
        RewriteRuleTokenStream stream_COALESCE=new RewriteRuleTokenStream(adaptor,"token COALESCE");
        RewriteRuleTokenStream stream_ISNUMERIC=new RewriteRuleTokenStream(adaptor,"token ISNUMERIC");
        RewriteRuleTokenStream stream_CONCAT=new RewriteRuleTokenStream(adaptor,"token CONCAT");
        RewriteRuleTokenStream stream_STRSTARTS=new RewriteRuleTokenStream(adaptor,"token STRSTARTS");
        RewriteRuleTokenStream stream_STRBEFORE=new RewriteRuleTokenStream(adaptor,"token STRBEFORE");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_SHA1=new RewriteRuleTokenStream(adaptor,"token SHA1");
        RewriteRuleTokenStream stream_FLOOR=new RewriteRuleTokenStream(adaptor,"token FLOOR");
        RewriteRuleTokenStream stream_ISBLANK=new RewriteRuleTokenStream(adaptor,"token ISBLANK");
        RewriteRuleTokenStream stream_UCASE=new RewriteRuleTokenStream(adaptor,"token UCASE");
        RewriteRuleTokenStream stream_URI=new RewriteRuleTokenStream(adaptor,"token URI");
        RewriteRuleTokenStream stream_ABS=new RewriteRuleTokenStream(adaptor,"token ABS");
        RewriteRuleTokenStream stream_MINUTES=new RewriteRuleTokenStream(adaptor,"token MINUTES");
        RewriteRuleTokenStream stream_STRUUID=new RewriteRuleTokenStream(adaptor,"token STRUUID");
        RewriteRuleTokenStream stream_ROUND=new RewriteRuleTokenStream(adaptor,"token ROUND");
        RewriteRuleTokenStream stream_CEIL=new RewriteRuleTokenStream(adaptor,"token CEIL");
        RewriteRuleTokenStream stream_DATATYPE=new RewriteRuleTokenStream(adaptor,"token DATATYPE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_SHA384=new RewriteRuleTokenStream(adaptor,"token SHA384");
        RewriteRuleTokenStream stream_HOURS=new RewriteRuleTokenStream(adaptor,"token HOURS");
        RewriteRuleTokenStream stream_LANG=new RewriteRuleTokenStream(adaptor,"token LANG");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_var=new RewriteRuleSubtreeStream(adaptor,"rule var");
        RewriteRuleSubtreeStream stream_substringExpression=new RewriteRuleSubtreeStream(adaptor,"rule substringExpression");
        RewriteRuleSubtreeStream stream_nil=new RewriteRuleSubtreeStream(adaptor,"rule nil");
        try {
            // IbmSparqlExt.g:827:2: ( STR OPEN_BRACE e1= expression CLOSE_BRACE -> ^( STR $e1) | LANG OPEN_BRACE e2= expression CLOSE_BRACE -> ^( LANG $e2) | LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE -> ^( LANGMATCHES $e3 $e4) | DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE -> ^( DATATYPE $e5) | BOUND OPEN_BRACE v= var CLOSE_BRACE -> ^( BOUND $v) | IRI OPEN_BRACE e51= expression CLOSE_BRACE -> ^( IRI $e51) | URI OPEN_BRACE e6= expression CLOSE_BRACE -> ^( URI $e6) | BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil ) -> ^( BNODE ( $e7)? ) | RAND nil -> ^( RAND NIL ) | ABS OPEN_BRACE e8= expression CLOSE_BRACE -> ^( ABS $e8) | CEIL OPEN_BRACE e9= expression CLOSE_BRACE -> ^( CEIL $e9) | FLOOR OPEN_BRACE e10= expression CLOSE_BRACE -> ^( FLOOR $e10) | ROUND OPEN_BRACE e11= expression CLOSE_BRACE -> ^( ROUND $e11) | CONCAT e12= expressionList -> ^( CONCAT $e12) | s= substringExpression -> $s | STRLEN OPEN_BRACE e13= expression CLOSE_BRACE -> ^( STRLEN $e13) | strReplaceExpression | UCASE OPEN_BRACE e14= expression CLOSE_BRACE -> ^( UCASE $e14) | LCASE OPEN_BRACE e15= expression CLOSE_BRACE -> ^( LCASE $e15) | ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE -> ^( ENCODE_FOR_URI $e16) | CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE -> ^( CONTAINS $e17 $e18) | STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE -> ^( STRSTARTS $e19 $e20) | STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRENDS $e21 $e22) | STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRBEFORE $e21 $e22) | STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE -> ^( STRAFTER $e21 $e22) | YEAR OPEN_BRACE e23= expression CLOSE_BRACE -> ^( YEAR $e23) | MONTH OPEN_BRACE e24= expression CLOSE_BRACE -> ^( MONTH $e24) | DAY OPEN_BRACE e25= expression CLOSE_BRACE -> ^( DAY $e25) | HOURS OPEN_BRACE e26= expression CLOSE_BRACE -> ^( HOURS $e26) | MINUTES OPEN_BRACE e27= expression CLOSE_BRACE -> ^( MINUTES $e27) | SECONDS OPEN_BRACE e28= expression CLOSE_BRACE -> ^( SECONDS $e28) | TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE -> ^( TIMEZONE $e29) | TZ OPEN_BRACE e30= expression CLOSE_BRACE -> ^( TZ $e30) | NOW nil -> NOW | UUID nil -> UUID | STRUUID nil -> STRUUID | MD5 OPEN_BRACE e31= expression CLOSE_BRACE -> ^( MD5 $e31) | SHA1 OPEN_BRACE e32= expression CLOSE_BRACE -> ^( SHA1 $e32) | SHA224 OPEN_BRACE e33= expression CLOSE_BRACE -> ^( SHA224 $e33) | SHA256 OPEN_BRACE e34= expression CLOSE_BRACE -> ^( SHA256 $e34) | SHA384 OPEN_BRACE e35= expression CLOSE_BRACE -> ^( SHA384 $e35) | SHA512 OPEN_BRACE e36= expression CLOSE_BRACE -> ^( SHA512 $e36) | COALESCE e37= expressionList -> ^( COALESCE $e37) | IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE -> ^( IF $e38 $e39 $e40) | STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE -> ^( STRLANG $e41 $e42) | STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE -> ^( STRDT $e43 $e44) | SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE -> ^( SAMETERM $e45 $e46) | ISIRI OPEN_BRACE e47= expression CLOSE_BRACE -> ^( ISIRI $e47) | ISURI OPEN_BRACE e48= expression CLOSE_BRACE -> ^( ISURI $e48) | ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE -> ^( ISBLANK $e52) | ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE -> ^( ISLITERAL $e49) | ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE -> ^( ISNUMERIC $e50) | regexExpression | existsFunc | notExistsFunc )
            int alt145=55;
            switch ( input.LA(1) ) {
            case STR:
                {
                alt145=1;
                }
                break;
            case LANG:
                {
                alt145=2;
                }
                break;
            case LANGMATCHES:
                {
                alt145=3;
                }
                break;
            case DATATYPE:
                {
                alt145=4;
                }
                break;
            case BOUND:
                {
                alt145=5;
                }
                break;
            case IRI:
                {
                alt145=6;
                }
                break;
            case URI:
                {
                alt145=7;
                }
                break;
            case BNODE:
                {
                alt145=8;
                }
                break;
            case RAND:
                {
                alt145=9;
                }
                break;
            case ABS:
                {
                alt145=10;
                }
                break;
            case CEIL:
                {
                alt145=11;
                }
                break;
            case FLOOR:
                {
                alt145=12;
                }
                break;
            case ROUND:
                {
                alt145=13;
                }
                break;
            case CONCAT:
                {
                alt145=14;
                }
                break;
            case SUBSTR:
                {
                alt145=15;
                }
                break;
            case STRLEN:
                {
                alt145=16;
                }
                break;
            case REPLACE:
                {
                alt145=17;
                }
                break;
            case UCASE:
                {
                alt145=18;
                }
                break;
            case LCASE:
                {
                alt145=19;
                }
                break;
            case ENCODE_FOR_URI:
                {
                alt145=20;
                }
                break;
            case CONTAINS:
                {
                alt145=21;
                }
                break;
            case STRSTARTS:
                {
                alt145=22;
                }
                break;
            case STRENDS:
                {
                alt145=23;
                }
                break;
            case STRBEFORE:
                {
                alt145=24;
                }
                break;
            case STRAFTER:
                {
                alt145=25;
                }
                break;
            case YEAR:
                {
                alt145=26;
                }
                break;
            case MONTH:
                {
                alt145=27;
                }
                break;
            case DAY:
                {
                alt145=28;
                }
                break;
            case HOURS:
                {
                alt145=29;
                }
                break;
            case MINUTES:
                {
                alt145=30;
                }
                break;
            case SECONDS:
                {
                alt145=31;
                }
                break;
            case TIMEZONE:
                {
                alt145=32;
                }
                break;
            case TZ:
                {
                alt145=33;
                }
                break;
            case NOW:
                {
                alt145=34;
                }
                break;
            case UUID:
                {
                alt145=35;
                }
                break;
            case STRUUID:
                {
                alt145=36;
                }
                break;
            case MD5:
                {
                alt145=37;
                }
                break;
            case SHA1:
                {
                alt145=38;
                }
                break;
            case SHA224:
                {
                alt145=39;
                }
                break;
            case SHA256:
                {
                alt145=40;
                }
                break;
            case SHA384:
                {
                alt145=41;
                }
                break;
            case SHA512:
                {
                alt145=42;
                }
                break;
            case COALESCE:
                {
                alt145=43;
                }
                break;
            case IF:
                {
                alt145=44;
                }
                break;
            case STRLANG:
                {
                alt145=45;
                }
                break;
            case STRDT:
                {
                alt145=46;
                }
                break;
            case SAMETERM:
                {
                alt145=47;
                }
                break;
            case ISIRI:
                {
                alt145=48;
                }
                break;
            case ISURI:
                {
                alt145=49;
                }
                break;
            case ISBLANK:
                {
                alt145=50;
                }
                break;
            case ISLITERAL:
                {
                alt145=51;
                }
                break;
            case ISNUMERIC:
                {
                alt145=52;
                }
                break;
            case REGEX:
                {
                alt145=53;
                }
                break;
            case EXISTS:
                {
                alt145=54;
                }
                break;
            case NOT:
                {
                alt145=55;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }

            switch (alt145) {
                case 1 :
                    // IbmSparqlExt.g:827:4: STR OPEN_BRACE e1= expression CLOSE_BRACE
                    {
                    STR342=(Token)match(input,STR,FOLLOW_STR_in_builtInCall6450); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STR.add(STR342);

                    OPEN_BRACE343=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE343);

                    pushFollow(FOLLOW_expression_in_builtInCall6456);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
                    CLOSE_BRACE344=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE344);



                    // AST REWRITE
                    // elements: STR, e1
                    // token labels: 
                    // rule labels: retval, e1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 827:60: -> ^( STR $e1)
                    {
                        // IbmSparqlExt.g:827:64: ^( STR $e1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STR.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:828:4: LANG OPEN_BRACE e2= expression CLOSE_BRACE
                    {
                    LANG345=(Token)match(input,LANG,FOLLOW_LANG_in_builtInCall6490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LANG.add(LANG345);

                    OPEN_BRACE346=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE346);

                    pushFollow(FOLLOW_expression_in_builtInCall6496);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    CLOSE_BRACE347=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE347);



                    // AST REWRITE
                    // elements: LANG, e2
                    // token labels: 
                    // rule labels: retval, e2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 828:60: -> ^( LANG $e2)
                    {
                        // IbmSparqlExt.g:828:64: ^( LANG $e2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_LANG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:829:4: LANGMATCHES OPEN_BRACE e3= expression COMMA e4= expression CLOSE_BRACE
                    {
                    LANGMATCHES348=(Token)match(input,LANGMATCHES,FOLLOW_LANGMATCHES_in_builtInCall6529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LANGMATCHES.add(LANGMATCHES348);

                    OPEN_BRACE349=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE349);

                    pushFollow(FOLLOW_expression_in_builtInCall6535);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());
                    COMMA350=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall6537); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA350);

                    pushFollow(FOLLOW_expression_in_builtInCall6541);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());
                    CLOSE_BRACE351=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6543); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE351);



                    // AST REWRITE
                    // elements: LANGMATCHES, e4, e3
                    // token labels: 
                    // rule labels: e3, e4, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
                    RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 829:78: -> ^( LANGMATCHES $e3 $e4)
                    {
                        // IbmSparqlExt.g:829:82: ^( LANGMATCHES $e3 $e4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_LANGMATCHES.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e3.nextTree());
                        adaptor.addChild(root_1, stream_e4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:830:4: DATATYPE OPEN_BRACE e5= expression CLOSE_BRACE
                    {
                    DATATYPE352=(Token)match(input,DATATYPE,FOLLOW_DATATYPE_in_builtInCall6568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DATATYPE.add(DATATYPE352);

                    OPEN_BRACE353=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6570); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE353);

                    pushFollow(FOLLOW_expression_in_builtInCall6574);
                    e5=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e5.getTree());
                    CLOSE_BRACE354=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE354);



                    // AST REWRITE
                    // elements: DATATYPE, e5
                    // token labels: 
                    // rule labels: retval, e5
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e5=new RewriteRuleSubtreeStream(adaptor,"rule e5",e5!=null?e5.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 830:60: -> ^( DATATYPE $e5)
                    {
                        // IbmSparqlExt.g:830:64: ^( DATATYPE $e5)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_DATATYPE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e5.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // IbmSparqlExt.g:831:4: BOUND OPEN_BRACE v= var CLOSE_BRACE
                    {
                    BOUND355=(Token)match(input,BOUND,FOLLOW_BOUND_in_builtInCall6603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOUND.add(BOUND355);

                    OPEN_BRACE356=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE356);

                    pushFollow(FOLLOW_var_in_builtInCall6609);
                    v=var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_var.add(v.getTree());
                    CLOSE_BRACE357=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE357);



                    // AST REWRITE
                    // elements: v, BOUND
                    // token labels: 
                    // rule labels: v, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"rule v",v!=null?v.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 831:60: -> ^( BOUND $v)
                    {
                        // IbmSparqlExt.g:831:64: ^( BOUND $v)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_BOUND.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_v.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // IbmSparqlExt.g:832:4: IRI OPEN_BRACE e51= expression CLOSE_BRACE
                    {
                    IRI358=(Token)match(input,IRI,FOLLOW_IRI_in_builtInCall6649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRI.add(IRI358);

                    OPEN_BRACE359=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE359);

                    pushFollow(FOLLOW_expression_in_builtInCall6655);
                    e51=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e51.getTree());
                    CLOSE_BRACE360=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE360);



                    // AST REWRITE
                    // elements: IRI, e51
                    // token labels: 
                    // rule labels: retval, e51
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e51=new RewriteRuleSubtreeStream(adaptor,"rule e51",e51!=null?e51.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 832:60: -> ^( IRI $e51)
                    {
                        // IbmSparqlExt.g:832:64: ^( IRI $e51)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_IRI.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e51.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // IbmSparqlExt.g:833:4: URI OPEN_BRACE e6= expression CLOSE_BRACE
                    {
                    URI361=(Token)match(input,URI,FOLLOW_URI_in_builtInCall6688); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_URI.add(URI361);

                    OPEN_BRACE362=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE362);

                    pushFollow(FOLLOW_expression_in_builtInCall6694);
                    e6=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e6.getTree());
                    CLOSE_BRACE363=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE363);



                    // AST REWRITE
                    // elements: e6, URI
                    // token labels: 
                    // rule labels: retval, e6
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e6=new RewriteRuleSubtreeStream(adaptor,"rule e6",e6!=null?e6.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 833:60: -> ^( URI $e6)
                    {
                        // IbmSparqlExt.g:833:64: ^( URI $e6)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_URI.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e6.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // IbmSparqlExt.g:834:4: BNODE ( OPEN_BRACE e7= expression CLOSE_BRACE | nil )
                    {
                    BNODE364=(Token)match(input,BNODE,FOLLOW_BNODE_in_builtInCall6728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BNODE.add(BNODE364);

                    // IbmSparqlExt.g:834:10: ( OPEN_BRACE e7= expression CLOSE_BRACE | nil )
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==OPEN_BRACE) ) {
                        int LA144_1 = input.LA(2);

                        if ( (LA144_1==CLOSE_BRACE) ) {
                            alt144=2;
                        }
                        else if ( (LA144_1==IRI_REF||LA144_1==PNAME_NS||LA144_1==OPEN_BRACE||LA144_1==STRING_LITERAL2||LA144_1==INTEGER||(LA144_1>=VAR1 && LA144_1<=VAR2)||(LA144_1>=NOT && LA144_1<=GROUP_CONCAT)||(LA144_1>=DECIMAL && LA144_1<=PNAME_LN)||(LA144_1>=262 && LA144_1<=263)||LA144_1==268) ) {
                            alt144=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 144, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 144, 0, input);

                        throw nvae;
                    }
                    switch (alt144) {
                        case 1 :
                            // IbmSparqlExt.g:834:12: OPEN_BRACE e7= expression CLOSE_BRACE
                            {
                            OPEN_BRACE365=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6732); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE365);

                            pushFollow(FOLLOW_expression_in_builtInCall6736);
                            e7=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(e7.getTree());
                            CLOSE_BRACE366=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6738); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE366);


                            }
                            break;
                        case 2 :
                            // IbmSparqlExt.g:834:51: nil
                            {
                            pushFollow(FOLLOW_nil_in_builtInCall6742);
                            nil367=nil();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nil.add(nil367.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: e7, BNODE
                    // token labels: 
                    // rule labels: retval, e7
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e7=new RewriteRuleSubtreeStream(adaptor,"rule e7",e7!=null?e7.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 834:60: -> ^( BNODE ( $e7)? )
                    {
                        // IbmSparqlExt.g:834:64: ^( BNODE ( $e7)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_BNODE.nextNode(), root_1);

                        // IbmSparqlExt.g:834:73: ( $e7)?
                        if ( stream_e7.hasNext() ) {
                            adaptor.addChild(root_1, stream_e7.nextTree());

                        }
                        stream_e7.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // IbmSparqlExt.g:835:4: RAND nil
                    {
                    RAND368=(Token)match(input,RAND,FOLLOW_RAND_in_builtInCall6765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RAND.add(RAND368);

                    pushFollow(FOLLOW_nil_in_builtInCall6767);
                    nil369=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil369.getTree());


                    // AST REWRITE
                    // elements: RAND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 835:60: -> ^( RAND NIL )
                    {
                        // IbmSparqlExt.g:835:64: ^( RAND NIL )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_RAND.nextNode(), root_1);

                        adaptor.addChild(root_1, (XTree)adaptor.create(NIL, "NIL"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // IbmSparqlExt.g:836:4: ABS OPEN_BRACE e8= expression CLOSE_BRACE
                    {
                    ABS370=(Token)match(input,ABS,FOLLOW_ABS_in_builtInCall6830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ABS.add(ABS370);

                    OPEN_BRACE371=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE371);

                    pushFollow(FOLLOW_expression_in_builtInCall6836);
                    e8=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e8.getTree());
                    CLOSE_BRACE372=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE372);



                    // AST REWRITE
                    // elements: e8, ABS
                    // token labels: 
                    // rule labels: retval, e8
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e8=new RewriteRuleSubtreeStream(adaptor,"rule e8",e8!=null?e8.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 836:60: -> ^( ABS $e8)
                    {
                        // IbmSparqlExt.g:836:64: ^( ABS $e8)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ABS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e8.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // IbmSparqlExt.g:837:4: CEIL OPEN_BRACE e9= expression CLOSE_BRACE
                    {
                    CEIL373=(Token)match(input,CEIL,FOLLOW_CEIL_in_builtInCall6870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CEIL.add(CEIL373);

                    OPEN_BRACE374=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE374);

                    pushFollow(FOLLOW_expression_in_builtInCall6876);
                    e9=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e9.getTree());
                    CLOSE_BRACE375=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE375);



                    // AST REWRITE
                    // elements: e9, CEIL
                    // token labels: 
                    // rule labels: retval, e9
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e9=new RewriteRuleSubtreeStream(adaptor,"rule e9",e9!=null?e9.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 837:60: -> ^( CEIL $e9)
                    {
                        // IbmSparqlExt.g:837:64: ^( CEIL $e9)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_CEIL.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e9.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // IbmSparqlExt.g:838:4: FLOOR OPEN_BRACE e10= expression CLOSE_BRACE
                    {
                    FLOOR376=(Token)match(input,FLOOR,FOLLOW_FLOOR_in_builtInCall6909); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FLOOR.add(FLOOR376);

                    OPEN_BRACE377=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6911); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE377);

                    pushFollow(FOLLOW_expression_in_builtInCall6915);
                    e10=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e10.getTree());
                    CLOSE_BRACE378=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE378);



                    // AST REWRITE
                    // elements: e10, FLOOR
                    // token labels: 
                    // rule labels: retval, e10
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e10=new RewriteRuleSubtreeStream(adaptor,"rule e10",e10!=null?e10.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 838:60: -> ^( FLOOR $e10)
                    {
                        // IbmSparqlExt.g:838:64: ^( FLOOR $e10)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_FLOOR.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e10.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // IbmSparqlExt.g:839:4: ROUND OPEN_BRACE e11= expression CLOSE_BRACE
                    {
                    ROUND379=(Token)match(input,ROUND,FOLLOW_ROUND_in_builtInCall6946); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROUND.add(ROUND379);

                    OPEN_BRACE380=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall6948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE380);

                    pushFollow(FOLLOW_expression_in_builtInCall6952);
                    e11=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e11.getTree());
                    CLOSE_BRACE381=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall6954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE381);



                    // AST REWRITE
                    // elements: e11, ROUND
                    // token labels: 
                    // rule labels: retval, e11
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e11=new RewriteRuleSubtreeStream(adaptor,"rule e11",e11!=null?e11.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 839:60: -> ^( ROUND $e11)
                    {
                        // IbmSparqlExt.g:839:64: ^( ROUND $e11)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ROUND.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e11.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // IbmSparqlExt.g:840:4: CONCAT e12= expressionList
                    {
                    CONCAT382=(Token)match(input,CONCAT,FOLLOW_CONCAT_in_builtInCall6983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONCAT.add(CONCAT382);

                    pushFollow(FOLLOW_expressionList_in_builtInCall6987);
                    e12=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(e12.getTree());


                    // AST REWRITE
                    // elements: CONCAT, e12
                    // token labels: 
                    // rule labels: retval, e12
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e12=new RewriteRuleSubtreeStream(adaptor,"rule e12",e12!=null?e12.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 840:60: -> ^( CONCAT $e12)
                    {
                        // IbmSparqlExt.g:840:64: ^( CONCAT $e12)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_CONCAT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e12.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // IbmSparqlExt.g:841:4: s= substringExpression
                    {
                    pushFollow(FOLLOW_substringExpression_in_builtInCall7036);
                    s=substringExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substringExpression.add(s.getTree());


                    // AST REWRITE
                    // elements: s
                    // token labels: 
                    // rule labels: retval, s
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 841:60: -> $s
                    {
                        adaptor.addChild(root_0, stream_s.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // IbmSparqlExt.g:842:4: STRLEN OPEN_BRACE e13= expression CLOSE_BRACE
                    {
                    STRLEN383=(Token)match(input,STRLEN,FOLLOW_STRLEN_in_builtInCall7081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRLEN.add(STRLEN383);

                    OPEN_BRACE384=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7083); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE384);

                    pushFollow(FOLLOW_expression_in_builtInCall7087);
                    e13=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e13.getTree());
                    CLOSE_BRACE385=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE385);



                    // AST REWRITE
                    // elements: STRLEN, e13
                    // token labels: 
                    // rule labels: retval, e13
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e13=new RewriteRuleSubtreeStream(adaptor,"rule e13",e13!=null?e13.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 842:60: -> ^( STRLEN $e13)
                    {
                        // IbmSparqlExt.g:842:64: ^( STRLEN $e13)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRLEN.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e13.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 17 :
                    // IbmSparqlExt.g:843:7: strReplaceExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_strReplaceExpression_in_builtInCall7120);
                    strReplaceExpression386=strReplaceExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, strReplaceExpression386.getTree());

                    }
                    break;
                case 18 :
                    // IbmSparqlExt.g:844:4: UCASE OPEN_BRACE e14= expression CLOSE_BRACE
                    {
                    UCASE387=(Token)match(input,UCASE,FOLLOW_UCASE_in_builtInCall7125); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UCASE.add(UCASE387);

                    OPEN_BRACE388=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE388);

                    pushFollow(FOLLOW_expression_in_builtInCall7131);
                    e14=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e14.getTree());
                    CLOSE_BRACE389=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE389);



                    // AST REWRITE
                    // elements: UCASE, e14
                    // token labels: 
                    // rule labels: retval, e14
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e14=new RewriteRuleSubtreeStream(adaptor,"rule e14",e14!=null?e14.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 844:60: -> ^( UCASE $e14)
                    {
                        // IbmSparqlExt.g:844:64: ^( UCASE $e14)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_UCASE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e14.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 19 :
                    // IbmSparqlExt.g:845:4: LCASE OPEN_BRACE e15= expression CLOSE_BRACE
                    {
                    LCASE390=(Token)match(input,LCASE,FOLLOW_LCASE_in_builtInCall7162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LCASE.add(LCASE390);

                    OPEN_BRACE391=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7164); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE391);

                    pushFollow(FOLLOW_expression_in_builtInCall7168);
                    e15=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e15.getTree());
                    CLOSE_BRACE392=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE392);



                    // AST REWRITE
                    // elements: e15, LCASE
                    // token labels: 
                    // rule labels: retval, e15
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e15=new RewriteRuleSubtreeStream(adaptor,"rule e15",e15!=null?e15.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 845:60: -> ^( LCASE $e15)
                    {
                        // IbmSparqlExt.g:845:64: ^( LCASE $e15)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_LCASE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e15.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 20 :
                    // IbmSparqlExt.g:846:4: ENCODE_FOR_URI OPEN_BRACE e16= expression CLOSE_BRACE
                    {
                    ENCODE_FOR_URI393=(Token)match(input,ENCODE_FOR_URI,FOLLOW_ENCODE_FOR_URI_in_builtInCall7199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ENCODE_FOR_URI.add(ENCODE_FOR_URI393);

                    OPEN_BRACE394=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE394);

                    pushFollow(FOLLOW_expression_in_builtInCall7205);
                    e16=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e16.getTree());
                    CLOSE_BRACE395=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7207); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE395);



                    // AST REWRITE
                    // elements: e16, ENCODE_FOR_URI
                    // token labels: 
                    // rule labels: retval, e16
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e16=new RewriteRuleSubtreeStream(adaptor,"rule e16",e16!=null?e16.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 846:60: -> ^( ENCODE_FOR_URI $e16)
                    {
                        // IbmSparqlExt.g:846:64: ^( ENCODE_FOR_URI $e16)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ENCODE_FOR_URI.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e16.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 21 :
                    // IbmSparqlExt.g:847:4: CONTAINS OPEN_BRACE e17= expression COMMA e18= expression CLOSE_BRACE
                    {
                    CONTAINS396=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_builtInCall7227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTAINS.add(CONTAINS396);

                    OPEN_BRACE397=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE397);

                    pushFollow(FOLLOW_expression_in_builtInCall7233);
                    e17=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e17.getTree());
                    COMMA398=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA398);

                    pushFollow(FOLLOW_expression_in_builtInCall7239);
                    e18=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e18.getTree());
                    CLOSE_BRACE399=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE399);



                    // AST REWRITE
                    // elements: e17, e18, CONTAINS
                    // token labels: 
                    // rule labels: retval, e18, e17
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e18=new RewriteRuleSubtreeStream(adaptor,"rule e18",e18!=null?e18.tree:null);
                    RewriteRuleSubtreeStream stream_e17=new RewriteRuleSubtreeStream(adaptor,"rule e17",e17!=null?e17.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 847:78: -> ^( CONTAINS $e17 $e18)
                    {
                        // IbmSparqlExt.g:847:82: ^( CONTAINS $e17 $e18)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_CONTAINS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e17.nextTree());
                        adaptor.addChild(root_1, stream_e18.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 22 :
                    // IbmSparqlExt.g:848:4: STRSTARTS OPEN_BRACE e19= expression COMMA e20= expression CLOSE_BRACE
                    {
                    STRSTARTS400=(Token)match(input,STRSTARTS,FOLLOW_STRSTARTS_in_builtInCall7267); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRSTARTS.add(STRSTARTS400);

                    OPEN_BRACE401=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7269); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE401);

                    pushFollow(FOLLOW_expression_in_builtInCall7273);
                    e19=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e19.getTree());
                    COMMA402=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA402);

                    pushFollow(FOLLOW_expression_in_builtInCall7279);
                    e20=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e20.getTree());
                    CLOSE_BRACE403=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE403);



                    // AST REWRITE
                    // elements: e20, e19, STRSTARTS
                    // token labels: 
                    // rule labels: retval, e19, e20
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e19=new RewriteRuleSubtreeStream(adaptor,"rule e19",e19!=null?e19.tree:null);
                    RewriteRuleSubtreeStream stream_e20=new RewriteRuleSubtreeStream(adaptor,"rule e20",e20!=null?e20.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 848:78: -> ^( STRSTARTS $e19 $e20)
                    {
                        // IbmSparqlExt.g:848:82: ^( STRSTARTS $e19 $e20)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRSTARTS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e19.nextTree());
                        adaptor.addChild(root_1, stream_e20.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 23 :
                    // IbmSparqlExt.g:849:4: STRENDS OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRENDS404=(Token)match(input,STRENDS,FOLLOW_STRENDS_in_builtInCall7306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRENDS.add(STRENDS404);

                    OPEN_BRACE405=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE405);

                    pushFollow(FOLLOW_expression_in_builtInCall7312);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());
                    COMMA406=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA406);

                    pushFollow(FOLLOW_expression_in_builtInCall7318);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());
                    CLOSE_BRACE407=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE407);



                    // AST REWRITE
                    // elements: STRENDS, e21, e22
                    // token labels: 
                    // rule labels: retval, e22, e21
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 849:78: -> ^( STRENDS $e21 $e22)
                    {
                        // IbmSparqlExt.g:849:82: ^( STRENDS $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRENDS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());
                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 24 :
                    // IbmSparqlExt.g:850:4: STRBEFORE OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRBEFORE408=(Token)match(input,STRBEFORE,FOLLOW_STRBEFORE_in_builtInCall7347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRBEFORE.add(STRBEFORE408);

                    OPEN_BRACE409=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE409);

                    pushFollow(FOLLOW_expression_in_builtInCall7353);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());
                    COMMA410=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA410);

                    pushFollow(FOLLOW_expression_in_builtInCall7359);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());
                    CLOSE_BRACE411=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE411);



                    // AST REWRITE
                    // elements: e21, e22, STRBEFORE
                    // token labels: 
                    // rule labels: retval, e22, e21
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 850:80: -> ^( STRBEFORE $e21 $e22)
                    {
                        // IbmSparqlExt.g:850:84: ^( STRBEFORE $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRBEFORE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());
                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 25 :
                    // IbmSparqlExt.g:851:4: STRAFTER OPEN_BRACE e21= expression COMMA e22= expression CLOSE_BRACE
                    {
                    STRAFTER412=(Token)match(input,STRAFTER,FOLLOW_STRAFTER_in_builtInCall7388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRAFTER.add(STRAFTER412);

                    OPEN_BRACE413=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE413);

                    pushFollow(FOLLOW_expression_in_builtInCall7394);
                    e21=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e21.getTree());
                    COMMA414=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall7396); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA414);

                    pushFollow(FOLLOW_expression_in_builtInCall7400);
                    e22=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e22.getTree());
                    CLOSE_BRACE415=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7402); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE415);



                    // AST REWRITE
                    // elements: e22, e21, STRAFTER
                    // token labels: 
                    // rule labels: retval, e22, e21
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e22=new RewriteRuleSubtreeStream(adaptor,"rule e22",e22!=null?e22.tree:null);
                    RewriteRuleSubtreeStream stream_e21=new RewriteRuleSubtreeStream(adaptor,"rule e21",e21!=null?e21.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 851:79: -> ^( STRAFTER $e21 $e22)
                    {
                        // IbmSparqlExt.g:851:83: ^( STRAFTER $e21 $e22)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRAFTER.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e21.nextTree());
                        adaptor.addChild(root_1, stream_e22.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 26 :
                    // IbmSparqlExt.g:852:4: YEAR OPEN_BRACE e23= expression CLOSE_BRACE
                    {
                    YEAR416=(Token)match(input,YEAR,FOLLOW_YEAR_in_builtInCall7429); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_YEAR.add(YEAR416);

                    OPEN_BRACE417=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7431); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE417);

                    pushFollow(FOLLOW_expression_in_builtInCall7435);
                    e23=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e23.getTree());
                    CLOSE_BRACE418=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7437); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE418);



                    // AST REWRITE
                    // elements: YEAR, e23
                    // token labels: 
                    // rule labels: retval, e23
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e23=new RewriteRuleSubtreeStream(adaptor,"rule e23",e23!=null?e23.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 852:60: -> ^( YEAR $e23)
                    {
                        // IbmSparqlExt.g:852:64: ^( YEAR $e23)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_YEAR.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e23.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 27 :
                    // IbmSparqlExt.g:853:4: MONTH OPEN_BRACE e24= expression CLOSE_BRACE
                    {
                    MONTH419=(Token)match(input,MONTH,FOLLOW_MONTH_in_builtInCall7467); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MONTH.add(MONTH419);

                    OPEN_BRACE420=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE420);

                    pushFollow(FOLLOW_expression_in_builtInCall7473);
                    e24=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e24.getTree());
                    CLOSE_BRACE421=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE421);



                    // AST REWRITE
                    // elements: e24, MONTH
                    // token labels: 
                    // rule labels: retval, e24
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e24=new RewriteRuleSubtreeStream(adaptor,"rule e24",e24!=null?e24.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 853:60: -> ^( MONTH $e24)
                    {
                        // IbmSparqlExt.g:853:64: ^( MONTH $e24)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_MONTH.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e24.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 28 :
                    // IbmSparqlExt.g:854:4: DAY OPEN_BRACE e25= expression CLOSE_BRACE
                    {
                    DAY422=(Token)match(input,DAY,FOLLOW_DAY_in_builtInCall7504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DAY.add(DAY422);

                    OPEN_BRACE423=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE423);

                    pushFollow(FOLLOW_expression_in_builtInCall7510);
                    e25=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e25.getTree());
                    CLOSE_BRACE424=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE424);



                    // AST REWRITE
                    // elements: e25, DAY
                    // token labels: 
                    // rule labels: retval, e25
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e25=new RewriteRuleSubtreeStream(adaptor,"rule e25",e25!=null?e25.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 854:60: -> ^( DAY $e25)
                    {
                        // IbmSparqlExt.g:854:64: ^( DAY $e25)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_DAY.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e25.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 29 :
                    // IbmSparqlExt.g:855:4: HOURS OPEN_BRACE e26= expression CLOSE_BRACE
                    {
                    HOURS425=(Token)match(input,HOURS,FOLLOW_HOURS_in_builtInCall7543); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HOURS.add(HOURS425);

                    OPEN_BRACE426=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7545); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE426);

                    pushFollow(FOLLOW_expression_in_builtInCall7549);
                    e26=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e26.getTree());
                    CLOSE_BRACE427=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE427);



                    // AST REWRITE
                    // elements: e26, HOURS
                    // token labels: 
                    // rule labels: retval, e26
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e26=new RewriteRuleSubtreeStream(adaptor,"rule e26",e26!=null?e26.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 855:60: -> ^( HOURS $e26)
                    {
                        // IbmSparqlExt.g:855:64: ^( HOURS $e26)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_HOURS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e26.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 30 :
                    // IbmSparqlExt.g:856:4: MINUTES OPEN_BRACE e27= expression CLOSE_BRACE
                    {
                    MINUTES428=(Token)match(input,MINUTES,FOLLOW_MINUTES_in_builtInCall7580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUTES.add(MINUTES428);

                    OPEN_BRACE429=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7582); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE429);

                    pushFollow(FOLLOW_expression_in_builtInCall7586);
                    e27=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e27.getTree());
                    CLOSE_BRACE430=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE430);



                    // AST REWRITE
                    // elements: e27, MINUTES
                    // token labels: 
                    // rule labels: retval, e27
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e27=new RewriteRuleSubtreeStream(adaptor,"rule e27",e27!=null?e27.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 856:60: -> ^( MINUTES $e27)
                    {
                        // IbmSparqlExt.g:856:64: ^( MINUTES $e27)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_MINUTES.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e27.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 31 :
                    // IbmSparqlExt.g:857:4: SECONDS OPEN_BRACE e28= expression CLOSE_BRACE
                    {
                    SECONDS431=(Token)match(input,SECONDS,FOLLOW_SECONDS_in_builtInCall7615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SECONDS.add(SECONDS431);

                    OPEN_BRACE432=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7617); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE432);

                    pushFollow(FOLLOW_expression_in_builtInCall7621);
                    e28=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e28.getTree());
                    CLOSE_BRACE433=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7623); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE433);



                    // AST REWRITE
                    // elements: e28, SECONDS
                    // token labels: 
                    // rule labels: retval, e28
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e28=new RewriteRuleSubtreeStream(adaptor,"rule e28",e28!=null?e28.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 857:60: -> ^( SECONDS $e28)
                    {
                        // IbmSparqlExt.g:857:64: ^( SECONDS $e28)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SECONDS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e28.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 32 :
                    // IbmSparqlExt.g:858:4: TIMEZONE OPEN_BRACE e29= expression CLOSE_BRACE
                    {
                    TIMEZONE434=(Token)match(input,TIMEZONE,FOLLOW_TIMEZONE_in_builtInCall7650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEZONE.add(TIMEZONE434);

                    OPEN_BRACE435=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE435);

                    pushFollow(FOLLOW_expression_in_builtInCall7656);
                    e29=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e29.getTree());
                    CLOSE_BRACE436=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE436);



                    // AST REWRITE
                    // elements: e29, TIMEZONE
                    // token labels: 
                    // rule labels: e29, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e29=new RewriteRuleSubtreeStream(adaptor,"rule e29",e29!=null?e29.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 858:60: -> ^( TIMEZONE $e29)
                    {
                        // IbmSparqlExt.g:858:64: ^( TIMEZONE $e29)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_TIMEZONE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e29.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 33 :
                    // IbmSparqlExt.g:859:4: TZ OPEN_BRACE e30= expression CLOSE_BRACE
                    {
                    TZ437=(Token)match(input,TZ,FOLLOW_TZ_in_builtInCall7684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TZ.add(TZ437);

                    OPEN_BRACE438=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE438);

                    pushFollow(FOLLOW_expression_in_builtInCall7690);
                    e30=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e30.getTree());
                    CLOSE_BRACE439=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE439);



                    // AST REWRITE
                    // elements: e30, TZ
                    // token labels: 
                    // rule labels: e30, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e30=new RewriteRuleSubtreeStream(adaptor,"rule e30",e30!=null?e30.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 859:60: -> ^( TZ $e30)
                    {
                        // IbmSparqlExt.g:859:64: ^( TZ $e30)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_TZ.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e30.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 34 :
                    // IbmSparqlExt.g:860:4: NOW nil
                    {
                    NOW440=(Token)match(input,NOW,FOLLOW_NOW_in_builtInCall7724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOW.add(NOW440);

                    pushFollow(FOLLOW_nil_in_builtInCall7726);
                    nil441=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil441.getTree());


                    // AST REWRITE
                    // elements: NOW
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 860:12: -> NOW
                    {
                        adaptor.addChild(root_0, stream_NOW.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 35 :
                    // IbmSparqlExt.g:861:4: UUID nil
                    {
                    UUID442=(Token)match(input,UUID,FOLLOW_UUID_in_builtInCall7735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UUID.add(UUID442);

                    pushFollow(FOLLOW_nil_in_builtInCall7737);
                    nil443=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil443.getTree());


                    // AST REWRITE
                    // elements: UUID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 861:13: -> UUID
                    {
                        adaptor.addChild(root_0, stream_UUID.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 36 :
                    // IbmSparqlExt.g:862:4: STRUUID nil
                    {
                    STRUUID444=(Token)match(input,STRUUID,FOLLOW_STRUUID_in_builtInCall7746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRUUID.add(STRUUID444);

                    pushFollow(FOLLOW_nil_in_builtInCall7748);
                    nil445=nil();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nil.add(nil445.getTree());


                    // AST REWRITE
                    // elements: STRUUID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 862:16: -> STRUUID
                    {
                        adaptor.addChild(root_0, stream_STRUUID.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 37 :
                    // IbmSparqlExt.g:863:4: MD5 OPEN_BRACE e31= expression CLOSE_BRACE
                    {
                    MD5446=(Token)match(input,MD5,FOLLOW_MD5_in_builtInCall7757); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MD5.add(MD5446);

                    OPEN_BRACE447=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE447);

                    pushFollow(FOLLOW_expression_in_builtInCall7763);
                    e31=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e31.getTree());
                    CLOSE_BRACE448=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE448);



                    // AST REWRITE
                    // elements: MD5, e31
                    // token labels: 
                    // rule labels: e31, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e31=new RewriteRuleSubtreeStream(adaptor,"rule e31",e31!=null?e31.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 863:60: -> ^( MD5 $e31)
                    {
                        // IbmSparqlExt.g:863:64: ^( MD5 $e31)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_MD5.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e31.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 38 :
                    // IbmSparqlExt.g:864:4: SHA1 OPEN_BRACE e32= expression CLOSE_BRACE
                    {
                    SHA1449=(Token)match(input,SHA1,FOLLOW_SHA1_in_builtInCall7796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA1.add(SHA1449);

                    OPEN_BRACE450=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE450);

                    pushFollow(FOLLOW_expression_in_builtInCall7802);
                    e32=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e32.getTree());
                    CLOSE_BRACE451=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7804); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE451);



                    // AST REWRITE
                    // elements: e32, SHA1
                    // token labels: 
                    // rule labels: retval, e32
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e32=new RewriteRuleSubtreeStream(adaptor,"rule e32",e32!=null?e32.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 864:60: -> ^( SHA1 $e32)
                    {
                        // IbmSparqlExt.g:864:64: ^( SHA1 $e32)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SHA1.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e32.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 39 :
                    // IbmSparqlExt.g:865:4: SHA224 OPEN_BRACE e33= expression CLOSE_BRACE
                    {
                    SHA224452=(Token)match(input,SHA224,FOLLOW_SHA224_in_builtInCall7834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA224.add(SHA224452);

                    OPEN_BRACE453=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE453);

                    pushFollow(FOLLOW_expression_in_builtInCall7840);
                    e33=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e33.getTree());
                    CLOSE_BRACE454=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE454);



                    // AST REWRITE
                    // elements: e33, SHA224
                    // token labels: 
                    // rule labels: retval, e33
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e33=new RewriteRuleSubtreeStream(adaptor,"rule e33",e33!=null?e33.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 865:60: -> ^( SHA224 $e33)
                    {
                        // IbmSparqlExt.g:865:64: ^( SHA224 $e33)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SHA224.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e33.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 40 :
                    // IbmSparqlExt.g:866:4: SHA256 OPEN_BRACE e34= expression CLOSE_BRACE
                    {
                    SHA256455=(Token)match(input,SHA256,FOLLOW_SHA256_in_builtInCall7870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA256.add(SHA256455);

                    OPEN_BRACE456=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE456);

                    pushFollow(FOLLOW_expression_in_builtInCall7876);
                    e34=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e34.getTree());
                    CLOSE_BRACE457=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE457);



                    // AST REWRITE
                    // elements: e34, SHA256
                    // token labels: 
                    // rule labels: retval, e34
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e34=new RewriteRuleSubtreeStream(adaptor,"rule e34",e34!=null?e34.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 866:60: -> ^( SHA256 $e34)
                    {
                        // IbmSparqlExt.g:866:64: ^( SHA256 $e34)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SHA256.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e34.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 41 :
                    // IbmSparqlExt.g:867:4: SHA384 OPEN_BRACE e35= expression CLOSE_BRACE
                    {
                    SHA384458=(Token)match(input,SHA384,FOLLOW_SHA384_in_builtInCall7906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA384.add(SHA384458);

                    OPEN_BRACE459=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE459);

                    pushFollow(FOLLOW_expression_in_builtInCall7912);
                    e35=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e35.getTree());
                    CLOSE_BRACE460=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE460);



                    // AST REWRITE
                    // elements: e35, SHA384
                    // token labels: 
                    // rule labels: retval, e35
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e35=new RewriteRuleSubtreeStream(adaptor,"rule e35",e35!=null?e35.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 867:60: -> ^( SHA384 $e35)
                    {
                        // IbmSparqlExt.g:867:64: ^( SHA384 $e35)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SHA384.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e35.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 42 :
                    // IbmSparqlExt.g:868:4: SHA512 OPEN_BRACE e36= expression CLOSE_BRACE
                    {
                    SHA512461=(Token)match(input,SHA512,FOLLOW_SHA512_in_builtInCall7942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SHA512.add(SHA512461);

                    OPEN_BRACE462=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall7944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE462);

                    pushFollow(FOLLOW_expression_in_builtInCall7948);
                    e36=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e36.getTree());
                    CLOSE_BRACE463=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall7950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE463);



                    // AST REWRITE
                    // elements: e36, SHA512
                    // token labels: 
                    // rule labels: retval, e36
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e36=new RewriteRuleSubtreeStream(adaptor,"rule e36",e36!=null?e36.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 868:60: -> ^( SHA512 $e36)
                    {
                        // IbmSparqlExt.g:868:64: ^( SHA512 $e36)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SHA512.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e36.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 43 :
                    // IbmSparqlExt.g:869:4: COALESCE e37= expressionList
                    {
                    COALESCE464=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtInCall7978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COALESCE.add(COALESCE464);

                    pushFollow(FOLLOW_expressionList_in_builtInCall7982);
                    e37=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionList.add(e37.getTree());


                    // AST REWRITE
                    // elements: COALESCE, e37
                    // token labels: 
                    // rule labels: retval, e37
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e37=new RewriteRuleSubtreeStream(adaptor,"rule e37",e37!=null?e37.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 869:60: -> ^( COALESCE $e37)
                    {
                        // IbmSparqlExt.g:869:64: ^( COALESCE $e37)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_COALESCE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e37.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 44 :
                    // IbmSparqlExt.g:870:4: IF OPEN_BRACE e38= expression COMMA e39= expression COMMA e40= expression CLOSE_BRACE
                    {
                    IF465=(Token)match(input,IF,FOLLOW_IF_in_builtInCall8027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(IF465);

                    OPEN_BRACE466=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE466);

                    pushFollow(FOLLOW_expression_in_builtInCall8033);
                    e38=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e38.getTree());
                    COMMA467=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall8035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA467);

                    pushFollow(FOLLOW_expression_in_builtInCall8039);
                    e39=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e39.getTree());
                    COMMA468=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall8041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA468);

                    pushFollow(FOLLOW_expression_in_builtInCall8045);
                    e40=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e40.getTree());
                    CLOSE_BRACE469=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE469);



                    // AST REWRITE
                    // elements: e38, e39, e40, IF
                    // token labels: 
                    // rule labels: e40, retval, e38, e39
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_e40=new RewriteRuleSubtreeStream(adaptor,"rule e40",e40!=null?e40.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e38=new RewriteRuleSubtreeStream(adaptor,"rule e38",e38!=null?e38.tree:null);
                    RewriteRuleSubtreeStream stream_e39=new RewriteRuleSubtreeStream(adaptor,"rule e39",e39!=null?e39.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 870:90: -> ^( IF $e38 $e39 $e40)
                    {
                        // IbmSparqlExt.g:870:94: ^( IF $e38 $e39 $e40)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e38.nextTree());
                        adaptor.addChild(root_1, stream_e39.nextTree());
                        adaptor.addChild(root_1, stream_e40.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 45 :
                    // IbmSparqlExt.g:871:4: STRLANG OPEN_BRACE e41= expression COMMA e42= expression CLOSE_BRACE
                    {
                    STRLANG470=(Token)match(input,STRLANG,FOLLOW_STRLANG_in_builtInCall8073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRLANG.add(STRLANG470);

                    OPEN_BRACE471=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE471);

                    pushFollow(FOLLOW_expression_in_builtInCall8079);
                    e41=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e41.getTree());
                    COMMA472=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall8081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA472);

                    pushFollow(FOLLOW_expression_in_builtInCall8085);
                    e42=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e42.getTree());
                    CLOSE_BRACE473=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE473);



                    // AST REWRITE
                    // elements: e42, e41, STRLANG
                    // token labels: 
                    // rule labels: retval, e41, e42
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e41=new RewriteRuleSubtreeStream(adaptor,"rule e41",e41!=null?e41.tree:null);
                    RewriteRuleSubtreeStream stream_e42=new RewriteRuleSubtreeStream(adaptor,"rule e42",e42!=null?e42.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 871:90: -> ^( STRLANG $e41 $e42)
                    {
                        // IbmSparqlExt.g:871:94: ^( STRLANG $e41 $e42)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRLANG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e41.nextTree());
                        adaptor.addChild(root_1, stream_e42.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 46 :
                    // IbmSparqlExt.g:872:4: STRDT OPEN_BRACE e43= expression COMMA e44= expression CLOSE_BRACE
                    {
                    STRDT474=(Token)match(input,STRDT,FOLLOW_STRDT_in_builtInCall8126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRDT.add(STRDT474);

                    OPEN_BRACE475=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE475);

                    pushFollow(FOLLOW_expression_in_builtInCall8132);
                    e43=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e43.getTree());
                    COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall8134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA476);

                    pushFollow(FOLLOW_expression_in_builtInCall8138);
                    e44=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e44.getTree());
                    CLOSE_BRACE477=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE477);



                    // AST REWRITE
                    // elements: e43, STRDT, e44
                    // token labels: 
                    // rule labels: retval, e43, e44
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e43=new RewriteRuleSubtreeStream(adaptor,"rule e43",e43!=null?e43.tree:null);
                    RewriteRuleSubtreeStream stream_e44=new RewriteRuleSubtreeStream(adaptor,"rule e44",e44!=null?e44.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 872:90: -> ^( STRDT $e43 $e44)
                    {
                        // IbmSparqlExt.g:872:94: ^( STRDT $e43 $e44)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_STRDT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e43.nextTree());
                        adaptor.addChild(root_1, stream_e44.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 47 :
                    // IbmSparqlExt.g:873:4: SAMETERM OPEN_BRACE e45= expression COMMA e46= expression CLOSE_BRACE
                    {
                    SAMETERM478=(Token)match(input,SAMETERM,FOLLOW_SAMETERM_in_builtInCall8181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SAMETERM.add(SAMETERM478);

                    OPEN_BRACE479=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE479);

                    pushFollow(FOLLOW_expression_in_builtInCall8187);
                    e45=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e45.getTree());
                    COMMA480=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtInCall8189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA480);

                    pushFollow(FOLLOW_expression_in_builtInCall8193);
                    e46=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e46.getTree());
                    CLOSE_BRACE481=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE481);



                    // AST REWRITE
                    // elements: e46, e45, SAMETERM
                    // token labels: 
                    // rule labels: retval, e45, e46
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e45=new RewriteRuleSubtreeStream(adaptor,"rule e45",e45!=null?e45.tree:null);
                    RewriteRuleSubtreeStream stream_e46=new RewriteRuleSubtreeStream(adaptor,"rule e46",e46!=null?e46.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 873:90: -> ^( SAMETERM $e45 $e46)
                    {
                        // IbmSparqlExt.g:873:94: ^( SAMETERM $e45 $e46)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SAMETERM.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e45.nextTree());
                        adaptor.addChild(root_1, stream_e46.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 48 :
                    // IbmSparqlExt.g:874:4: ISIRI OPEN_BRACE e47= expression CLOSE_BRACE
                    {
                    ISIRI482=(Token)match(input,ISIRI,FOLLOW_ISIRI_in_builtInCall8233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISIRI.add(ISIRI482);

                    OPEN_BRACE483=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE483);

                    pushFollow(FOLLOW_expression_in_builtInCall8239);
                    e47=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e47.getTree());
                    CLOSE_BRACE484=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE484);



                    // AST REWRITE
                    // elements: e47, ISIRI
                    // token labels: 
                    // rule labels: retval, e47
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e47=new RewriteRuleSubtreeStream(adaptor,"rule e47",e47!=null?e47.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 874:60: -> ^( ISIRI $e47)
                    {
                        // IbmSparqlExt.g:874:64: ^( ISIRI $e47)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ISIRI.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e47.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 49 :
                    // IbmSparqlExt.g:875:4: ISURI OPEN_BRACE e48= expression CLOSE_BRACE
                    {
                    ISURI485=(Token)match(input,ISURI,FOLLOW_ISURI_in_builtInCall8270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISURI.add(ISURI485);

                    OPEN_BRACE486=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8272); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE486);

                    pushFollow(FOLLOW_expression_in_builtInCall8276);
                    e48=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e48.getTree());
                    CLOSE_BRACE487=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE487);



                    // AST REWRITE
                    // elements: e48, ISURI
                    // token labels: 
                    // rule labels: retval, e48
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e48=new RewriteRuleSubtreeStream(adaptor,"rule e48",e48!=null?e48.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 875:60: -> ^( ISURI $e48)
                    {
                        // IbmSparqlExt.g:875:64: ^( ISURI $e48)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ISURI.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e48.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 50 :
                    // IbmSparqlExt.g:876:4: ISBLANK OPEN_BRACE e52= expression CLOSE_BRACE
                    {
                    ISBLANK488=(Token)match(input,ISBLANK,FOLLOW_ISBLANK_in_builtInCall8307); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISBLANK.add(ISBLANK488);

                    OPEN_BRACE489=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8309); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE489);

                    pushFollow(FOLLOW_expression_in_builtInCall8313);
                    e52=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e52.getTree());
                    CLOSE_BRACE490=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE490);



                    // AST REWRITE
                    // elements: e52, ISBLANK
                    // token labels: 
                    // rule labels: retval, e52
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e52=new RewriteRuleSubtreeStream(adaptor,"rule e52",e52!=null?e52.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 876:60: -> ^( ISBLANK $e52)
                    {
                        // IbmSparqlExt.g:876:64: ^( ISBLANK $e52)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ISBLANK.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e52.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 51 :
                    // IbmSparqlExt.g:877:4: ISLITERAL OPEN_BRACE e49= expression CLOSE_BRACE
                    {
                    ISLITERAL491=(Token)match(input,ISLITERAL,FOLLOW_ISLITERAL_in_builtInCall8342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISLITERAL.add(ISLITERAL491);

                    OPEN_BRACE492=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE492);

                    pushFollow(FOLLOW_expression_in_builtInCall8348);
                    e49=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e49.getTree());
                    CLOSE_BRACE493=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8350); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE493);



                    // AST REWRITE
                    // elements: e49, ISLITERAL
                    // token labels: 
                    // rule labels: retval, e49
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e49=new RewriteRuleSubtreeStream(adaptor,"rule e49",e49!=null?e49.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 877:60: -> ^( ISLITERAL $e49)
                    {
                        // IbmSparqlExt.g:877:64: ^( ISLITERAL $e49)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ISLITERAL.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e49.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 52 :
                    // IbmSparqlExt.g:878:4: ISNUMERIC OPEN_BRACE e50= expression CLOSE_BRACE
                    {
                    ISNUMERIC494=(Token)match(input,ISNUMERIC,FOLLOW_ISNUMERIC_in_builtInCall8375); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISNUMERIC.add(ISNUMERIC494);

                    OPEN_BRACE495=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_builtInCall8377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE495);

                    pushFollow(FOLLOW_expression_in_builtInCall8381);
                    e50=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e50.getTree());
                    CLOSE_BRACE496=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_builtInCall8383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE496);



                    // AST REWRITE
                    // elements: ISNUMERIC, e50
                    // token labels: 
                    // rule labels: retval, e50
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e50=new RewriteRuleSubtreeStream(adaptor,"rule e50",e50!=null?e50.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 878:60: -> ^( ISNUMERIC $e50)
                    {
                        // IbmSparqlExt.g:878:64: ^( ISNUMERIC $e50)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_ISNUMERIC.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_e50.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 53 :
                    // IbmSparqlExt.g:879:4: regexExpression
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_regexExpression_in_builtInCall8408);
                    regexExpression497=regexExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regexExpression497.getTree());

                    }
                    break;
                case 54 :
                    // IbmSparqlExt.g:880:4: existsFunc
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_existsFunc_in_builtInCall8413);
                    existsFunc498=existsFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsFunc498.getTree());

                    }
                    break;
                case 55 :
                    // IbmSparqlExt.g:881:4: notExistsFunc
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_notExistsFunc_in_builtInCall8418);
                    notExistsFunc499=notExistsFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, notExistsFunc499.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtInCall"

    public static class regexExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regexExpression"
    // IbmSparqlExt.g:884:1: regexExpression : REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( REGEX $e1 $e2 ( $e3)? ) ;
    public final IbmSparqlExtParser.regexExpression_return regexExpression() throws RecognitionException {
        IbmSparqlExtParser.regexExpression_return retval = new IbmSparqlExtParser.regexExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token REGEX500=null;
        Token OPEN_BRACE501=null;
        Token COMMA502=null;
        Token COMMA503=null;
        Token CLOSE_BRACE504=null;
        IbmSparqlExtParser.expression_return e1 = null;

        IbmSparqlExtParser.expression_return e2 = null;

        IbmSparqlExtParser.expression_return e3 = null;


        XTree REGEX500_tree=null;
        XTree OPEN_BRACE501_tree=null;
        XTree COMMA502_tree=null;
        XTree COMMA503_tree=null;
        XTree CLOSE_BRACE504_tree=null;
        RewriteRuleTokenStream stream_REGEX=new RewriteRuleTokenStream(adaptor,"token REGEX");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // IbmSparqlExt.g:885:2: ( REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( REGEX $e1 $e2 ( $e3)? ) )
            // IbmSparqlExt.g:885:4: REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE
            {
            REGEX500=(Token)match(input,REGEX,FOLLOW_REGEX_in_regexExpression8435); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGEX.add(REGEX500);

            OPEN_BRACE501=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_regexExpression8437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE501);

            pushFollow(FOLLOW_expression_in_regexExpression8441);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
            COMMA502=(Token)match(input,COMMA,FOLLOW_COMMA_in_regexExpression8443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA502);

            pushFollow(FOLLOW_expression_in_regexExpression8447);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
            // IbmSparqlExt.g:885:55: ( COMMA e3= expression )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==COMMA) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // IbmSparqlExt.g:885:57: COMMA e3= expression
                    {
                    COMMA503=(Token)match(input,COMMA,FOLLOW_COMMA_in_regexExpression8451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA503);

                    pushFollow(FOLLOW_expression_in_regexExpression8455);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    }
                    break;

            }

            CLOSE_BRACE504=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_regexExpression8460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE504);



            // AST REWRITE
            // elements: e3, e1, REGEX, e2
            // token labels: 
            // rule labels: e3, retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 887:3: -> ^( REGEX $e1 $e2 ( $e3)? )
            {
                // IbmSparqlExt.g:887:7: ^( REGEX $e1 $e2 ( $e3)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_REGEX.nextNode(), root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());
                adaptor.addChild(root_1, stream_e2.nextTree());
                // IbmSparqlExt.g:887:27: ( $e3)?
                if ( stream_e3.hasNext() ) {
                    adaptor.addChild(root_1, stream_e3.nextTree());

                }
                stream_e3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "regexExpression"

    public static class substringExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substringExpression"
    // IbmSparqlExt.g:890:1: substringExpression : SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( SUBSTR $e1 $e2 ( $e3)? ) ;
    public final IbmSparqlExtParser.substringExpression_return substringExpression() throws RecognitionException {
        IbmSparqlExtParser.substringExpression_return retval = new IbmSparqlExtParser.substringExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token SUBSTR505=null;
        Token OPEN_BRACE506=null;
        Token COMMA507=null;
        Token COMMA508=null;
        Token CLOSE_BRACE509=null;
        IbmSparqlExtParser.expression_return e1 = null;

        IbmSparqlExtParser.expression_return e2 = null;

        IbmSparqlExtParser.expression_return e3 = null;


        XTree SUBSTR505_tree=null;
        XTree OPEN_BRACE506_tree=null;
        XTree COMMA507_tree=null;
        XTree COMMA508_tree=null;
        XTree CLOSE_BRACE509_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_SUBSTR=new RewriteRuleTokenStream(adaptor,"token SUBSTR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // IbmSparqlExt.g:891:2: ( SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE -> ^( SUBSTR $e1 $e2 ( $e3)? ) )
            // IbmSparqlExt.g:891:6: SUBSTR OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE
            {
            SUBSTR505=(Token)match(input,SUBSTR,FOLLOW_SUBSTR_in_substringExpression8503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SUBSTR.add(SUBSTR505);

            OPEN_BRACE506=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_substringExpression8505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE506);

            pushFollow(FOLLOW_expression_in_substringExpression8509);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
            COMMA507=(Token)match(input,COMMA,FOLLOW_COMMA_in_substringExpression8511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA507);

            pushFollow(FOLLOW_expression_in_substringExpression8515);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
            // IbmSparqlExt.g:891:58: ( COMMA e3= expression )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==COMMA) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // IbmSparqlExt.g:891:60: COMMA e3= expression
                    {
                    COMMA508=(Token)match(input,COMMA,FOLLOW_COMMA_in_substringExpression8519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA508);

                    pushFollow(FOLLOW_expression_in_substringExpression8523);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());

                    }
                    break;

            }

            CLOSE_BRACE509=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_substringExpression8528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE509);



            // AST REWRITE
            // elements: e3, SUBSTR, e2, e1
            // token labels: 
            // rule labels: e3, retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 893:3: -> ^( SUBSTR $e1 $e2 ( $e3)? )
            {
                // IbmSparqlExt.g:893:7: ^( SUBSTR $e1 $e2 ( $e3)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_SUBSTR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());
                adaptor.addChild(root_1, stream_e2.nextTree());
                // IbmSparqlExt.g:893:28: ( $e3)?
                if ( stream_e3.hasNext() ) {
                    adaptor.addChild(root_1, stream_e3.nextTree());

                }
                stream_e3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "substringExpression"

    public static class strReplaceExpression_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "strReplaceExpression"
    // IbmSparqlExt.g:896:1: strReplaceExpression : REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE -> ^( REPLACE $e1 $e2 $e3 ( $e4)? ) ;
    public final IbmSparqlExtParser.strReplaceExpression_return strReplaceExpression() throws RecognitionException {
        IbmSparqlExtParser.strReplaceExpression_return retval = new IbmSparqlExtParser.strReplaceExpression_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token REPLACE510=null;
        Token OPEN_BRACE511=null;
        Token COMMA512=null;
        Token COMMA513=null;
        Token COMMA514=null;
        Token CLOSE_BRACE515=null;
        IbmSparqlExtParser.expression_return e1 = null;

        IbmSparqlExtParser.expression_return e2 = null;

        IbmSparqlExtParser.expression_return e3 = null;

        IbmSparqlExtParser.expression_return e4 = null;


        XTree REPLACE510_tree=null;
        XTree OPEN_BRACE511_tree=null;
        XTree COMMA512_tree=null;
        XTree COMMA513_tree=null;
        XTree COMMA514_tree=null;
        XTree CLOSE_BRACE515_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_REPLACE=new RewriteRuleTokenStream(adaptor,"token REPLACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // IbmSparqlExt.g:897:5: ( REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE -> ^( REPLACE $e1 $e2 $e3 ( $e4)? ) )
            // IbmSparqlExt.g:897:9: REPLACE OPEN_BRACE e1= expression COMMA e2= expression COMMA e3= expression ( COMMA e4= expression )? CLOSE_BRACE
            {
            REPLACE510=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_strReplaceExpression8570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REPLACE.add(REPLACE510);

            OPEN_BRACE511=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_strReplaceExpression8572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE511);

            pushFollow(FOLLOW_expression_in_strReplaceExpression8576);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());
            COMMA512=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA512);

            pushFollow(FOLLOW_expression_in_strReplaceExpression8582);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
            COMMA513=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8584); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA513);

            pushFollow(FOLLOW_expression_in_strReplaceExpression8588);
            e3=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e3.getTree());
            // IbmSparqlExt.g:897:82: ( COMMA e4= expression )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==COMMA) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // IbmSparqlExt.g:897:83: COMMA e4= expression
                    {
                    COMMA514=(Token)match(input,COMMA,FOLLOW_COMMA_in_strReplaceExpression8591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA514);

                    pushFollow(FOLLOW_expression_in_strReplaceExpression8595);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());

                    }
                    break;

            }

            CLOSE_BRACE515=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_strReplaceExpression8599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE515);



            // AST REWRITE
            // elements: e3, e1, e2, e4, REPLACE
            // token labels: 
            // rule labels: e3, e4, retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
            RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 898:9: -> ^( REPLACE $e1 $e2 $e3 ( $e4)? )
            {
                // IbmSparqlExt.g:898:12: ^( REPLACE $e1 $e2 $e3 ( $e4)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_REPLACE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_e1.nextTree());
                adaptor.addChild(root_1, stream_e2.nextTree());
                adaptor.addChild(root_1, stream_e3.nextTree());
                // IbmSparqlExt.g:898:36: ( $e4)?
                if ( stream_e4.hasNext() ) {
                    adaptor.addChild(root_1, stream_e4.nextTree());

                }
                stream_e4.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "strReplaceExpression"

    public static class existsFunc_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsFunc"
    // IbmSparqlExt.g:901:1: existsFunc : EXISTS g= groupGraphPattern -> ^( EXISTS $g) ;
    public final IbmSparqlExtParser.existsFunc_return existsFunc() throws RecognitionException {
        IbmSparqlExtParser.existsFunc_return retval = new IbmSparqlExtParser.existsFunc_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token EXISTS516=null;
        IbmSparqlExtParser.groupGraphPattern_return g = null;


        XTree EXISTS516_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparqlExt.g:902:2: ( EXISTS g= groupGraphPattern -> ^( EXISTS $g) )
            // IbmSparqlExt.g:902:6: EXISTS g= groupGraphPattern
            {
            EXISTS516=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsFunc8648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS516);

            pushFollow(FOLLOW_groupGraphPattern_in_existsFunc8652);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());


            // AST REWRITE
            // elements: EXISTS, g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 904:3: -> ^( EXISTS $g)
            {
                // IbmSparqlExt.g:904:7: ^( EXISTS $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot(stream_EXISTS.nextNode(), root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsFunc"

    public static class notExistsFunc_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "notExistsFunc"
    // IbmSparqlExt.g:907:1: notExistsFunc : NOT EXISTS g= groupGraphPattern -> ^( NOT_EXISTS $g) ;
    public final IbmSparqlExtParser.notExistsFunc_return notExistsFunc() throws RecognitionException {
        IbmSparqlExtParser.notExistsFunc_return retval = new IbmSparqlExtParser.notExistsFunc_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token NOT517=null;
        Token EXISTS518=null;
        IbmSparqlExtParser.groupGraphPattern_return g = null;


        XTree NOT517_tree=null;
        XTree EXISTS518_tree=null;
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_groupGraphPattern=new RewriteRuleSubtreeStream(adaptor,"rule groupGraphPattern");
        try {
            // IbmSparqlExt.g:908:2: ( NOT EXISTS g= groupGraphPattern -> ^( NOT_EXISTS $g) )
            // IbmSparqlExt.g:908:6: NOT EXISTS g= groupGraphPattern
            {
            NOT517=(Token)match(input,NOT,FOLLOW_NOT_in_notExistsFunc8686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT.add(NOT517);

            EXISTS518=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_notExistsFunc8688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS518);

            pushFollow(FOLLOW_groupGraphPattern_in_notExistsFunc8692);
            g=groupGraphPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_groupGraphPattern.add(g.getTree());


            // AST REWRITE
            // elements: g
            // token labels: 
            // rule labels: g, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 910:3: -> ^( NOT_EXISTS $g)
            {
                // IbmSparqlExt.g:910:7: ^( NOT_EXISTS $g)
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(NOT_EXISTS, "NOT_EXISTS"), root_1);

                adaptor.addChild(root_1, stream_g.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "notExistsFunc"

    public static class aggregate_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aggregate"
    // IbmSparqlExt.g:913:1: aggregate : ( COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' | e1= expression ) CLOSE_BRACE -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? ) | SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE -> ^( SUM ( $d2)? $e2) | MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE -> ^( MIN ( $d3)? $e3) | MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE -> ^( MAX ( $d4)? $e4) | AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE -> ^( AVG ( $d5)? $e5) | SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE -> ^( SAMPLE ( $d6)? $e6) | GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? ) );
    public final IbmSparqlExtParser.aggregate_return aggregate() throws RecognitionException {
        IbmSparqlExtParser.aggregate_return retval = new IbmSparqlExtParser.aggregate_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token d1=null;
        Token d2=null;
        Token d3=null;
        Token d4=null;
        Token d5=null;
        Token d6=null;
        Token d7=null;
        Token COUNT519=null;
        Token OPEN_BRACE520=null;
        Token char_literal521=null;
        Token CLOSE_BRACE522=null;
        Token SUM523=null;
        Token OPEN_BRACE524=null;
        Token CLOSE_BRACE525=null;
        Token MIN526=null;
        Token OPEN_BRACE527=null;
        Token CLOSE_BRACE528=null;
        Token MAX529=null;
        Token OPEN_BRACE530=null;
        Token CLOSE_BRACE531=null;
        Token AVG532=null;
        Token OPEN_BRACE533=null;
        Token CLOSE_BRACE534=null;
        Token SAMPLE535=null;
        Token OPEN_BRACE536=null;
        Token CLOSE_BRACE537=null;
        Token GROUP_CONCAT538=null;
        Token OPEN_BRACE539=null;
        Token SEMICOLON540=null;
        Token SEPARATOR541=null;
        Token char_literal542=null;
        Token CLOSE_BRACE543=null;
        IbmSparqlExtParser.expression_return e1 = null;

        IbmSparqlExtParser.expression_return e2 = null;

        IbmSparqlExtParser.expression_return e3 = null;

        IbmSparqlExtParser.expression_return e4 = null;

        IbmSparqlExtParser.expression_return e5 = null;

        IbmSparqlExtParser.expression_return e6 = null;

        IbmSparqlExtParser.expression_return e7 = null;

        IbmSparqlExtParser.string_return s = null;


        XTree d1_tree=null;
        XTree d2_tree=null;
        XTree d3_tree=null;
        XTree d4_tree=null;
        XTree d5_tree=null;
        XTree d6_tree=null;
        XTree d7_tree=null;
        XTree COUNT519_tree=null;
        XTree OPEN_BRACE520_tree=null;
        XTree char_literal521_tree=null;
        XTree CLOSE_BRACE522_tree=null;
        XTree SUM523_tree=null;
        XTree OPEN_BRACE524_tree=null;
        XTree CLOSE_BRACE525_tree=null;
        XTree MIN526_tree=null;
        XTree OPEN_BRACE527_tree=null;
        XTree CLOSE_BRACE528_tree=null;
        XTree MAX529_tree=null;
        XTree OPEN_BRACE530_tree=null;
        XTree CLOSE_BRACE531_tree=null;
        XTree AVG532_tree=null;
        XTree OPEN_BRACE533_tree=null;
        XTree CLOSE_BRACE534_tree=null;
        XTree SAMPLE535_tree=null;
        XTree OPEN_BRACE536_tree=null;
        XTree CLOSE_BRACE537_tree=null;
        XTree GROUP_CONCAT538_tree=null;
        XTree OPEN_BRACE539_tree=null;
        XTree SEMICOLON540_tree=null;
        XTree SEPARATOR541_tree=null;
        XTree char_literal542_tree=null;
        XTree CLOSE_BRACE543_tree=null;
        RewriteRuleTokenStream stream_SAMPLE=new RewriteRuleTokenStream(adaptor,"token SAMPLE");
        RewriteRuleTokenStream stream_AVG=new RewriteRuleTokenStream(adaptor,"token AVG");
        RewriteRuleTokenStream stream_GROUP_CONCAT=new RewriteRuleTokenStream(adaptor,"token GROUP_CONCAT");
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_COUNT=new RewriteRuleTokenStream(adaptor,"token COUNT");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_SUM=new RewriteRuleTokenStream(adaptor,"token SUM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_256=new RewriteRuleTokenStream(adaptor,"token 256");
        RewriteRuleTokenStream stream_264=new RewriteRuleTokenStream(adaptor,"token 264");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
        try {
            // IbmSparqlExt.g:914:2: ( COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' | e1= expression ) CLOSE_BRACE -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? ) | SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE -> ^( SUM ( $d2)? $e2) | MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE -> ^( MIN ( $d3)? $e3) | MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE -> ^( MAX ( $d4)? $e4) | AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE -> ^( AVG ( $d5)? $e5) | SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE -> ^( SAMPLE ( $d6)? $e6) | GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? ) )
            int alt158=7;
            switch ( input.LA(1) ) {
            case COUNT:
                {
                alt158=1;
                }
                break;
            case SUM:
                {
                alt158=2;
                }
                break;
            case MIN:
                {
                alt158=3;
                }
                break;
            case MAX:
                {
                alt158=4;
                }
                break;
            case AVG:
                {
                alt158=5;
                }
                break;
            case SAMPLE:
                {
                alt158=6;
                }
                break;
            case GROUP_CONCAT:
                {
                alt158=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // IbmSparqlExt.g:914:4: COUNT OPEN_BRACE (d1= DISTINCT )? ( '*' | e1= expression ) CLOSE_BRACE
                    {
                    COUNT519=(Token)match(input,COUNT,FOLLOW_COUNT_in_aggregate8724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COUNT.add(COUNT519);

                    OPEN_BRACE520=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE520);

                    // IbmSparqlExt.g:914:23: (d1= DISTINCT )?
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==DISTINCT) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            // IbmSparqlExt.g:914:23: d1= DISTINCT
                            {
                            d1=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8730); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d1);


                            }
                            break;

                    }

                    // IbmSparqlExt.g:914:34: ( '*' | e1= expression )
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==256) ) {
                        alt150=1;
                    }
                    else if ( (LA150_0==IRI_REF||LA150_0==PNAME_NS||LA150_0==OPEN_BRACE||LA150_0==STRING_LITERAL2||LA150_0==INTEGER||(LA150_0>=VAR1 && LA150_0<=VAR2)||(LA150_0>=NOT && LA150_0<=GROUP_CONCAT)||(LA150_0>=DECIMAL && LA150_0<=PNAME_LN)||(LA150_0>=262 && LA150_0<=263)||LA150_0==268) ) {
                        alt150=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 150, 0, input);

                        throw nvae;
                    }
                    switch (alt150) {
                        case 1 :
                            // IbmSparqlExt.g:914:36: '*'
                            {
                            char_literal521=(Token)match(input,256,FOLLOW_256_in_aggregate8735); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_256.add(char_literal521);


                            }
                            break;
                        case 2 :
                            // IbmSparqlExt.g:914:42: e1= expression
                            {
                            pushFollow(FOLLOW_expression_in_aggregate8741);
                            e1=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

                            }
                            break;

                    }

                    CLOSE_BRACE522=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE522);



                    // AST REWRITE
                    // elements: COUNT, 256, d1, e1
                    // token labels: d1
                    // rule labels: retval, e1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d1=new RewriteRuleTokenStream(adaptor,"token d1",d1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 914:74: -> ^( COUNT ( $d1)? ( '*' )? ( $e1)? )
                    {
                        // IbmSparqlExt.g:914:78: ^( COUNT ( $d1)? ( '*' )? ( $e1)? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_COUNT.nextNode(), root_1);

                        // IbmSparqlExt.g:914:88: ( $d1)?
                        if ( stream_d1.hasNext() ) {
                            adaptor.addChild(root_1, stream_d1.nextNode());

                        }
                        stream_d1.reset();
                        // IbmSparqlExt.g:914:94: ( '*' )?
                        if ( stream_256.hasNext() ) {
                            adaptor.addChild(root_1, stream_256.nextNode());

                        }
                        stream_256.reset();
                        // IbmSparqlExt.g:914:100: ( $e1)?
                        if ( stream_e1.hasNext() ) {
                            adaptor.addChild(root_1, stream_e1.nextTree());

                        }
                        stream_e1.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:915:4: SUM OPEN_BRACE (d2= DISTINCT )? e2= expression CLOSE_BRACE
                    {
                    SUM523=(Token)match(input,SUM,FOLLOW_SUM_in_aggregate8777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUM.add(SUM523);

                    OPEN_BRACE524=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8779); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE524);

                    // IbmSparqlExt.g:915:21: (d2= DISTINCT )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==DISTINCT) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // IbmSparqlExt.g:915:21: d2= DISTINCT
                            {
                            d2=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8783); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d2);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8788);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());
                    CLOSE_BRACE525=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE525);



                    // AST REWRITE
                    // elements: d2, SUM, e2
                    // token labels: d2
                    // rule labels: retval, e2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d2=new RewriteRuleTokenStream(adaptor,"token d2",d2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 915:61: -> ^( SUM ( $d2)? $e2)
                    {
                        // IbmSparqlExt.g:915:65: ^( SUM ( $d2)? $e2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SUM.nextNode(), root_1);

                        // IbmSparqlExt.g:915:72: ( $d2)?
                        if ( stream_d2.hasNext() ) {
                            adaptor.addChild(root_1, stream_d2.nextNode());

                        }
                        stream_d2.reset();
                        adaptor.addChild(root_1, stream_e2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:916:4: MIN OPEN_BRACE (d3= DISTINCT )? e3= expression CLOSE_BRACE
                    {
                    MIN526=(Token)match(input,MIN,FOLLOW_MIN_in_aggregate8814); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN526);

                    OPEN_BRACE527=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE527);

                    // IbmSparqlExt.g:916:21: (d3= DISTINCT )?
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==DISTINCT) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            // IbmSparqlExt.g:916:21: d3= DISTINCT
                            {
                            d3=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8820); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d3);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8825);
                    e3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e3.getTree());
                    CLOSE_BRACE528=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE528);



                    // AST REWRITE
                    // elements: e3, d3, MIN
                    // token labels: d3
                    // rule labels: e3, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d3=new RewriteRuleTokenStream(adaptor,"token d3",d3);
                    RewriteRuleSubtreeStream stream_e3=new RewriteRuleSubtreeStream(adaptor,"rule e3",e3!=null?e3.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 916:61: -> ^( MIN ( $d3)? $e3)
                    {
                        // IbmSparqlExt.g:916:65: ^( MIN ( $d3)? $e3)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_MIN.nextNode(), root_1);

                        // IbmSparqlExt.g:916:72: ( $d3)?
                        if ( stream_d3.hasNext() ) {
                            adaptor.addChild(root_1, stream_d3.nextNode());

                        }
                        stream_d3.reset();
                        adaptor.addChild(root_1, stream_e3.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:917:4: MAX OPEN_BRACE (d4= DISTINCT )? e4= expression CLOSE_BRACE
                    {
                    MAX529=(Token)match(input,MAX,FOLLOW_MAX_in_aggregate8851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(MAX529);

                    OPEN_BRACE530=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE530);

                    // IbmSparqlExt.g:917:21: (d4= DISTINCT )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==DISTINCT) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // IbmSparqlExt.g:917:21: d4= DISTINCT
                            {
                            d4=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8857); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d4);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8862);
                    e4=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e4.getTree());
                    CLOSE_BRACE531=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE531);



                    // AST REWRITE
                    // elements: e4, d4, MAX
                    // token labels: d4
                    // rule labels: e4, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d4=new RewriteRuleTokenStream(adaptor,"token d4",d4);
                    RewriteRuleSubtreeStream stream_e4=new RewriteRuleSubtreeStream(adaptor,"rule e4",e4!=null?e4.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 917:61: -> ^( MAX ( $d4)? $e4)
                    {
                        // IbmSparqlExt.g:917:65: ^( MAX ( $d4)? $e4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_MAX.nextNode(), root_1);

                        // IbmSparqlExt.g:917:72: ( $d4)?
                        if ( stream_d4.hasNext() ) {
                            adaptor.addChild(root_1, stream_d4.nextNode());

                        }
                        stream_d4.reset();
                        adaptor.addChild(root_1, stream_e4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // IbmSparqlExt.g:918:4: AVG OPEN_BRACE (d5= DISTINCT )? e5= expression CLOSE_BRACE
                    {
                    AVG532=(Token)match(input,AVG,FOLLOW_AVG_in_aggregate8888); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AVG.add(AVG532);

                    OPEN_BRACE533=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE533);

                    // IbmSparqlExt.g:918:21: (d5= DISTINCT )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==DISTINCT) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // IbmSparqlExt.g:918:21: d5= DISTINCT
                            {
                            d5=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8894); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d5);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8899);
                    e5=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e5.getTree());
                    CLOSE_BRACE534=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8901); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE534);



                    // AST REWRITE
                    // elements: d5, AVG, e5
                    // token labels: d5
                    // rule labels: retval, e5
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d5=new RewriteRuleTokenStream(adaptor,"token d5",d5);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e5=new RewriteRuleSubtreeStream(adaptor,"rule e5",e5!=null?e5.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 918:61: -> ^( AVG ( $d5)? $e5)
                    {
                        // IbmSparqlExt.g:918:65: ^( AVG ( $d5)? $e5)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_AVG.nextNode(), root_1);

                        // IbmSparqlExt.g:918:72: ( $d5)?
                        if ( stream_d5.hasNext() ) {
                            adaptor.addChild(root_1, stream_d5.nextNode());

                        }
                        stream_d5.reset();
                        adaptor.addChild(root_1, stream_e5.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // IbmSparqlExt.g:919:4: SAMPLE OPEN_BRACE (d6= DISTINCT )? e6= expression CLOSE_BRACE
                    {
                    SAMPLE535=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_aggregate8925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SAMPLE.add(SAMPLE535);

                    OPEN_BRACE536=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE536);

                    // IbmSparqlExt.g:919:24: (d6= DISTINCT )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==DISTINCT) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // IbmSparqlExt.g:919:24: d6= DISTINCT
                            {
                            d6=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8931); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d6);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8936);
                    e6=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e6.getTree());
                    CLOSE_BRACE537=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE537);



                    // AST REWRITE
                    // elements: d6, e6, SAMPLE
                    // token labels: d6
                    // rule labels: retval, e6
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d6=new RewriteRuleTokenStream(adaptor,"token d6",d6);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e6=new RewriteRuleSubtreeStream(adaptor,"rule e6",e6!=null?e6.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 919:61: -> ^( SAMPLE ( $d6)? $e6)
                    {
                        // IbmSparqlExt.g:919:65: ^( SAMPLE ( $d6)? $e6)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_SAMPLE.nextNode(), root_1);

                        // IbmSparqlExt.g:919:75: ( $d6)?
                        if ( stream_d6.hasNext() ) {
                            adaptor.addChild(root_1, stream_d6.nextNode());

                        }
                        stream_d6.reset();
                        adaptor.addChild(root_1, stream_e6.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // IbmSparqlExt.g:920:4: GROUP_CONCAT OPEN_BRACE (d7= DISTINCT )? e7= expression ( SEMICOLON SEPARATOR '=' s= string )? CLOSE_BRACE
                    {
                    GROUP_CONCAT538=(Token)match(input,GROUP_CONCAT,FOLLOW_GROUP_CONCAT_in_aggregate8959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP_CONCAT.add(GROUP_CONCAT538);

                    OPEN_BRACE539=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_aggregate8961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE539);

                    // IbmSparqlExt.g:920:30: (d7= DISTINCT )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==DISTINCT) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // IbmSparqlExt.g:920:30: d7= DISTINCT
                            {
                            d7=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_aggregate8965); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DISTINCT.add(d7);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_aggregate8970);
                    e7=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e7.getTree());
                    // IbmSparqlExt.g:920:55: ( SEMICOLON SEPARATOR '=' s= string )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==SEMICOLON) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // IbmSparqlExt.g:920:57: SEMICOLON SEPARATOR '=' s= string
                            {
                            SEMICOLON540=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_aggregate8974); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON540);

                            SEPARATOR541=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_aggregate8976); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR541);

                            char_literal542=(Token)match(input,264,FOLLOW_264_in_aggregate8978); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_264.add(char_literal542);

                            pushFollow(FOLLOW_string_in_aggregate8982);
                            s=string();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_string.add(s.getTree());

                            }
                            break;

                    }

                    CLOSE_BRACE543=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_aggregate8987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE543);



                    // AST REWRITE
                    // elements: d7, GROUP_CONCAT, SEPARATOR, s, e7
                    // token labels: d7
                    // rule labels: retval, s, e7
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_d7=new RewriteRuleTokenStream(adaptor,"token d7",d7);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
                    RewriteRuleSubtreeStream stream_e7=new RewriteRuleSubtreeStream(adaptor,"rule e7",e7!=null?e7.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 921:3: -> ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? )
                    {
                        // IbmSparqlExt.g:921:7: ^( GROUP_CONCAT ( $d7)? $e7 ( ^( SEPARATOR $s) )? )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_GROUP_CONCAT.nextNode(), root_1);

                        // IbmSparqlExt.g:921:23: ( $d7)?
                        if ( stream_d7.hasNext() ) {
                            adaptor.addChild(root_1, stream_d7.nextNode());

                        }
                        stream_d7.reset();
                        adaptor.addChild(root_1, stream_e7.nextTree());
                        // IbmSparqlExt.g:921:33: ( ^( SEPARATOR $s) )?
                        if ( stream_SEPARATOR.hasNext()||stream_s.hasNext() ) {
                            // IbmSparqlExt.g:921:33: ^( SEPARATOR $s)
                            {
                            XTree root_2 = (XTree)adaptor.nil();
                            root_2 = (XTree)adaptor.becomeRoot(stream_SEPARATOR.nextNode(), root_2);

                            adaptor.addChild(root_2, stream_s.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_SEPARATOR.reset();
                        stream_s.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "aggregate"

    public static class iRIrefOrFunction_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iRIrefOrFunction"
    // IbmSparqlExt.g:924:1: iRIrefOrFunction : i= iRIref (a= argList )? -> {f==false}? $i -> ^( FUNCTION $i ( $a)? ) ;
    public final IbmSparqlExtParser.iRIrefOrFunction_return iRIrefOrFunction() throws RecognitionException {
        IbmSparqlExtParser.iRIrefOrFunction_return retval = new IbmSparqlExtParser.iRIrefOrFunction_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.iRIref_return i = null;

        IbmSparqlExtParser.argList_return a = null;


        RewriteRuleSubtreeStream stream_iRIref=new RewriteRuleSubtreeStream(adaptor,"rule iRIref");
        RewriteRuleSubtreeStream stream_argList=new RewriteRuleSubtreeStream(adaptor,"rule argList");
         
        		boolean f=false;
        	
        try {
            // IbmSparqlExt.g:928:2: (i= iRIref (a= argList )? -> {f==false}? $i -> ^( FUNCTION $i ( $a)? ) )
            // IbmSparqlExt.g:928:6: i= iRIref (a= argList )?
            {
            pushFollow(FOLLOW_iRIref_in_iRIrefOrFunction9040);
            i=iRIref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iRIref.add(i.getTree());
            // IbmSparqlExt.g:928:15: (a= argList )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==OPEN_BRACE) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // IbmSparqlExt.g:928:16: a= argList
                    {
                    pushFollow(FOLLOW_argList_in_iRIrefOrFunction9045);
                    a=argList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_argList.add(a.getTree());
                    if ( state.backtracking==0 ) {
                      f=true;
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, i, a
            // token labels: 
            // rule labels: retval, a, i
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"rule i",i!=null?i.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 930:3: -> {f==false}? $i
            if (f==false) {
                adaptor.addChild(root_0, stream_i.nextTree());

            }
            else // 931:3: -> ^( FUNCTION $i ( $a)? )
            {
                // IbmSparqlExt.g:931:7: ^( FUNCTION $i ( $a)? )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_i.nextTree());
                // IbmSparqlExt.g:931:24: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextTree());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "iRIrefOrFunction"

    public static class rDFLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rDFLiteral"
    // IbmSparqlExt.g:934:1: rDFLiteral : string ( LANGTAG | ( '^^' iRIref ) )? ;
    public final IbmSparqlExtParser.rDFLiteral_return rDFLiteral() throws RecognitionException {
        IbmSparqlExtParser.rDFLiteral_return retval = new IbmSparqlExtParser.rDFLiteral_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token LANGTAG545=null;
        Token string_literal546=null;
        IbmSparqlExtParser.string_return string544 = null;

        IbmSparqlExtParser.iRIref_return iRIref547 = null;


        XTree LANGTAG545_tree=null;
        XTree string_literal546_tree=null;

        try {
            // IbmSparqlExt.g:935:2: ( string ( LANGTAG | ( '^^' iRIref ) )? )
            // IbmSparqlExt.g:935:6: string ( LANGTAG | ( '^^' iRIref ) )?
            {
            root_0 = (XTree)adaptor.nil();

            pushFollow(FOLLOW_string_in_rDFLiteral9100);
            string544=string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string544.getTree());
            // IbmSparqlExt.g:935:13: ( LANGTAG | ( '^^' iRIref ) )?
            int alt160=3;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==LANGTAG) ) {
                alt160=1;
            }
            else if ( (LA160_0==269) ) {
                alt160=2;
            }
            switch (alt160) {
                case 1 :
                    // IbmSparqlExt.g:935:15: LANGTAG
                    {
                    LANGTAG545=(Token)match(input,LANGTAG,FOLLOW_LANGTAG_in_rDFLiteral9104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LANGTAG545_tree = (XTree)adaptor.create(LANGTAG545);
                    adaptor.addChild(root_0, LANGTAG545_tree);
                    }

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:935:25: ( '^^' iRIref )
                    {
                    // IbmSparqlExt.g:935:25: ( '^^' iRIref )
                    // IbmSparqlExt.g:935:27: '^^' iRIref
                    {
                    string_literal546=(Token)match(input,269,FOLLOW_269_in_rDFLiteral9110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal546_tree = (XTree)adaptor.create(string_literal546);
                    adaptor.addChild(root_0, string_literal546_tree);
                    }
                    pushFollow(FOLLOW_iRIref_in_rDFLiteral9112);
                    iRIref547=iRIref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, iRIref547.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "rDFLiteral"

    public static class numericLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteral"
    // IbmSparqlExt.g:938:1: numericLiteral : ( numericLiteralUnsigned | numericLiteralPositive | numericLiteralNegative );
    public final IbmSparqlExtParser.numericLiteral_return numericLiteral() throws RecognitionException {
        IbmSparqlExtParser.numericLiteral_return retval = new IbmSparqlExtParser.numericLiteral_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        IbmSparqlExtParser.numericLiteralUnsigned_return numericLiteralUnsigned548 = null;

        IbmSparqlExtParser.numericLiteralPositive_return numericLiteralPositive549 = null;

        IbmSparqlExtParser.numericLiteralNegative_return numericLiteralNegative550 = null;



        try {
            // IbmSparqlExt.g:939:2: ( numericLiteralUnsigned | numericLiteralPositive | numericLiteralNegative )
            int alt161=3;
            switch ( input.LA(1) ) {
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
                {
                alt161=1;
                }
                break;
            case INTEGER_POSITIVE:
            case DECIMAL_POSITIVE:
            case DOUBLE_POSITIVE:
                {
                alt161=2;
                }
                break;
            case INTEGER_NEGATIVE:
            case DECIMAL_NEGATIVE:
            case DOUBLE_NEGATIVE:
                {
                alt161=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }

            switch (alt161) {
                case 1 :
                    // IbmSparqlExt.g:939:6: numericLiteralUnsigned
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteralUnsigned_in_numericLiteral9134);
                    numericLiteralUnsigned548=numericLiteralUnsigned();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralUnsigned548.getTree());

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:940:5: numericLiteralPositive
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteralPositive_in_numericLiteral9142);
                    numericLiteralPositive549=numericLiteralPositive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralPositive549.getTree());

                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:941:5: numericLiteralNegative
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteralNegative_in_numericLiteral9150);
                    numericLiteralNegative550=numericLiteralNegative();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericLiteralNegative550.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericLiteral"

    public static class numericLiteralUnsigned_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteralUnsigned"
    // IbmSparqlExt.g:944:1: numericLiteralUnsigned : ( INTEGER -> ^( BIG_INTEGER INTEGER ) | DECIMAL -> ^( BIG_DECIMAL DECIMAL ) | DOUBLE -> ^( DOUBLE DOUBLE ) );
    public final IbmSparqlExtParser.numericLiteralUnsigned_return numericLiteralUnsigned() throws RecognitionException {
        IbmSparqlExtParser.numericLiteralUnsigned_return retval = new IbmSparqlExtParser.numericLiteralUnsigned_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INTEGER551=null;
        Token DECIMAL552=null;
        Token DOUBLE553=null;

        XTree INTEGER551_tree=null;
        XTree DECIMAL552_tree=null;
        XTree DOUBLE553_tree=null;
        RewriteRuleTokenStream stream_INTEGER=new RewriteRuleTokenStream(adaptor,"token INTEGER");
        RewriteRuleTokenStream stream_DOUBLE=new RewriteRuleTokenStream(adaptor,"token DOUBLE");
        RewriteRuleTokenStream stream_DECIMAL=new RewriteRuleTokenStream(adaptor,"token DECIMAL");

        try {
            // IbmSparqlExt.g:945:2: ( INTEGER -> ^( BIG_INTEGER INTEGER ) | DECIMAL -> ^( BIG_DECIMAL DECIMAL ) | DOUBLE -> ^( DOUBLE DOUBLE ) )
            int alt162=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                alt162=1;
                }
                break;
            case DECIMAL:
                {
                alt162=2;
                }
                break;
            case DOUBLE:
                {
                alt162=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // IbmSparqlExt.g:945:6: INTEGER
                    {
                    INTEGER551=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_numericLiteralUnsigned9168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER.add(INTEGER551);



                    // AST REWRITE
                    // elements: INTEGER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 945:18: -> ^( BIG_INTEGER INTEGER )
                    {
                        // IbmSparqlExt.g:945:21: ^( BIG_INTEGER INTEGER )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER"), root_1);

                        adaptor.addChild(root_1, stream_INTEGER.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:946:5: DECIMAL
                    {
                    DECIMAL552=(Token)match(input,DECIMAL,FOLLOW_DECIMAL_in_numericLiteralUnsigned9189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL.add(DECIMAL552);



                    // AST REWRITE
                    // elements: DECIMAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 946:17: -> ^( BIG_DECIMAL DECIMAL )
                    {
                        // IbmSparqlExt.g:946:20: ^( BIG_DECIMAL DECIMAL )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL"), root_1);

                        adaptor.addChild(root_1, stream_DECIMAL.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:947:5: DOUBLE
                    {
                    DOUBLE553=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_numericLiteralUnsigned9209); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE.add(DOUBLE553);



                    // AST REWRITE
                    // elements: DOUBLE, DOUBLE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 947:16: -> ^( DOUBLE DOUBLE )
                    {
                        // IbmSparqlExt.g:947:19: ^( DOUBLE DOUBLE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot(stream_DOUBLE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_DOUBLE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericLiteralUnsigned"

    public static class numericLiteralPositive_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteralPositive"
    // IbmSparqlExt.g:950:1: numericLiteralPositive : ( INTEGER_POSITIVE -> ^( BIG_INTEGER INTEGER_POSITIVE ) | DECIMAL_POSITIVE -> ^( BIG_DECIMAL DECIMAL_POSITIVE ) | DOUBLE_POSITIVE -> ^( DOUBLE DOUBLE_POSITIVE ) );
    public final IbmSparqlExtParser.numericLiteralPositive_return numericLiteralPositive() throws RecognitionException {
        IbmSparqlExtParser.numericLiteralPositive_return retval = new IbmSparqlExtParser.numericLiteralPositive_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INTEGER_POSITIVE554=null;
        Token DECIMAL_POSITIVE555=null;
        Token DOUBLE_POSITIVE556=null;

        XTree INTEGER_POSITIVE554_tree=null;
        XTree DECIMAL_POSITIVE555_tree=null;
        XTree DOUBLE_POSITIVE556_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_POSITIVE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_POSITIVE");
        RewriteRuleTokenStream stream_DECIMAL_POSITIVE=new RewriteRuleTokenStream(adaptor,"token DECIMAL_POSITIVE");
        RewriteRuleTokenStream stream_INTEGER_POSITIVE=new RewriteRuleTokenStream(adaptor,"token INTEGER_POSITIVE");

        try {
            // IbmSparqlExt.g:951:2: ( INTEGER_POSITIVE -> ^( BIG_INTEGER INTEGER_POSITIVE ) | DECIMAL_POSITIVE -> ^( BIG_DECIMAL DECIMAL_POSITIVE ) | DOUBLE_POSITIVE -> ^( DOUBLE DOUBLE_POSITIVE ) )
            int alt163=3;
            switch ( input.LA(1) ) {
            case INTEGER_POSITIVE:
                {
                alt163=1;
                }
                break;
            case DECIMAL_POSITIVE:
                {
                alt163=2;
                }
                break;
            case DOUBLE_POSITIVE:
                {
                alt163=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // IbmSparqlExt.g:951:6: INTEGER_POSITIVE
                    {
                    INTEGER_POSITIVE554=(Token)match(input,INTEGER_POSITIVE,FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive9243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER_POSITIVE.add(INTEGER_POSITIVE554);



                    // AST REWRITE
                    // elements: INTEGER_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 951:25: -> ^( BIG_INTEGER INTEGER_POSITIVE )
                    {
                        // IbmSparqlExt.g:951:28: ^( BIG_INTEGER INTEGER_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER"), root_1);

                        adaptor.addChild(root_1, stream_INTEGER_POSITIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:952:5: DECIMAL_POSITIVE
                    {
                    DECIMAL_POSITIVE555=(Token)match(input,DECIMAL_POSITIVE,FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive9262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL_POSITIVE.add(DECIMAL_POSITIVE555);



                    // AST REWRITE
                    // elements: DECIMAL_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 952:24: -> ^( BIG_DECIMAL DECIMAL_POSITIVE )
                    {
                        // IbmSparqlExt.g:952:27: ^( BIG_DECIMAL DECIMAL_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL"), root_1);

                        adaptor.addChild(root_1, stream_DECIMAL_POSITIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:953:5: DOUBLE_POSITIVE
                    {
                    DOUBLE_POSITIVE556=(Token)match(input,DOUBLE_POSITIVE,FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive9280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_POSITIVE.add(DOUBLE_POSITIVE556);



                    // AST REWRITE
                    // elements: DOUBLE_POSITIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 953:23: -> ^( DOUBLE DOUBLE_POSITIVE )
                    {
                        // IbmSparqlExt.g:953:26: ^( DOUBLE DOUBLE_POSITIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(DOUBLE, "DOUBLE"), root_1);

                        adaptor.addChild(root_1, stream_DOUBLE_POSITIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericLiteralPositive"

    public static class numericLiteralNegative_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericLiteralNegative"
    // IbmSparqlExt.g:956:1: numericLiteralNegative : ( INTEGER_NEGATIVE -> ^( BIG_INTEGER INTEGER_NEGATIVE ) | DECIMAL_NEGATIVE -> ^( BIG_DECIMAL DECIMAL_NEGATIVE ) | DOUBLE_NEGATIVE -> ^( DOUBLE DOUBLE_NEGATIVE ) );
    public final IbmSparqlExtParser.numericLiteralNegative_return numericLiteralNegative() throws RecognitionException {
        IbmSparqlExtParser.numericLiteralNegative_return retval = new IbmSparqlExtParser.numericLiteralNegative_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token INTEGER_NEGATIVE557=null;
        Token DECIMAL_NEGATIVE558=null;
        Token DOUBLE_NEGATIVE559=null;

        XTree INTEGER_NEGATIVE557_tree=null;
        XTree DECIMAL_NEGATIVE558_tree=null;
        XTree DOUBLE_NEGATIVE559_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token DOUBLE_NEGATIVE");
        RewriteRuleTokenStream stream_DECIMAL_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token DECIMAL_NEGATIVE");
        RewriteRuleTokenStream stream_INTEGER_NEGATIVE=new RewriteRuleTokenStream(adaptor,"token INTEGER_NEGATIVE");

        try {
            // IbmSparqlExt.g:957:2: ( INTEGER_NEGATIVE -> ^( BIG_INTEGER INTEGER_NEGATIVE ) | DECIMAL_NEGATIVE -> ^( BIG_DECIMAL DECIMAL_NEGATIVE ) | DOUBLE_NEGATIVE -> ^( DOUBLE DOUBLE_NEGATIVE ) )
            int alt164=3;
            switch ( input.LA(1) ) {
            case INTEGER_NEGATIVE:
                {
                alt164=1;
                }
                break;
            case DECIMAL_NEGATIVE:
                {
                alt164=2;
                }
                break;
            case DOUBLE_NEGATIVE:
                {
                alt164=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;
            }

            switch (alt164) {
                case 1 :
                    // IbmSparqlExt.g:957:6: INTEGER_NEGATIVE
                    {
                    INTEGER_NEGATIVE557=(Token)match(input,INTEGER_NEGATIVE,FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative9310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTEGER_NEGATIVE.add(INTEGER_NEGATIVE557);



                    // AST REWRITE
                    // elements: INTEGER_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 957:25: -> ^( BIG_INTEGER INTEGER_NEGATIVE )
                    {
                        // IbmSparqlExt.g:957:28: ^( BIG_INTEGER INTEGER_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_INTEGER, "BIG_INTEGER"), root_1);

                        adaptor.addChild(root_1, stream_INTEGER_NEGATIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:958:5: DECIMAL_NEGATIVE
                    {
                    DECIMAL_NEGATIVE558=(Token)match(input,DECIMAL_NEGATIVE,FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative9329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECIMAL_NEGATIVE.add(DECIMAL_NEGATIVE558);



                    // AST REWRITE
                    // elements: DECIMAL_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 958:24: -> ^( BIG_DECIMAL DECIMAL_NEGATIVE )
                    {
                        // IbmSparqlExt.g:958:27: ^( BIG_DECIMAL DECIMAL_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BIG_DECIMAL, "BIG_DECIMAL"), root_1);

                        adaptor.addChild(root_1, stream_DECIMAL_NEGATIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:959:5: DOUBLE_NEGATIVE
                    {
                    DOUBLE_NEGATIVE559=(Token)match(input,DOUBLE_NEGATIVE,FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative9347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_NEGATIVE.add(DOUBLE_NEGATIVE559);



                    // AST REWRITE
                    // elements: DOUBLE_NEGATIVE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 959:23: -> ^( DOUBLE DOUBLE_NEGATIVE )
                    {
                        // IbmSparqlExt.g:959:26: ^( DOUBLE DOUBLE_NEGATIVE )
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(DOUBLE, "DOUBLE"), root_1);

                        adaptor.addChild(root_1, stream_DOUBLE_NEGATIVE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericLiteralNegative"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // IbmSparqlExt.g:962:1: booleanLiteral : (t= TRUE -> ^( BOOLEAN $t) | f= FALSE -> ^( BOOLEAN $f) );
    public final IbmSparqlExtParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        IbmSparqlExtParser.booleanLiteral_return retval = new IbmSparqlExtParser.booleanLiteral_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token t=null;
        Token f=null;

        XTree t_tree=null;
        XTree f_tree=null;
        RewriteRuleTokenStream stream_FALSE=new RewriteRuleTokenStream(adaptor,"token FALSE");
        RewriteRuleTokenStream stream_TRUE=new RewriteRuleTokenStream(adaptor,"token TRUE");

        try {
            // IbmSparqlExt.g:963:2: (t= TRUE -> ^( BOOLEAN $t) | f= FALSE -> ^( BOOLEAN $f) )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==TRUE) ) {
                alt165=1;
            }
            else if ( (LA165_0==FALSE) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // IbmSparqlExt.g:963:6: t= TRUE
                    {
                    t=(Token)match(input,TRUE,FOLLOW_TRUE_in_booleanLiteral9379); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRUE.add(t);



                    // AST REWRITE
                    // elements: t
                    // token labels: t
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 963:15: -> ^( BOOLEAN $t)
                    {
                        // IbmSparqlExt.g:963:19: ^( BOOLEAN $t)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BOOLEAN, "BOOLEAN"), root_1);

                        adaptor.addChild(root_1, stream_t.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:964:6: f= FALSE
                    {
                    f=(Token)match(input,FALSE,FOLLOW_FALSE_in_booleanLiteral9402); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FALSE.add(f);



                    // AST REWRITE
                    // elements: f
                    // token labels: f
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 964:15: -> ^( BOOLEAN $f)
                    {
                        // IbmSparqlExt.g:964:19: ^( BOOLEAN $f)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(BOOLEAN, "BOOLEAN"), root_1);

                        adaptor.addChild(root_1, stream_f.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class string_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string"
    // IbmSparqlExt.g:967:1: string : (s1= STRING_LITERAL1 -> ^( STRING $s1) | s2= STRING_LITERAL2 -> ^( STRING $s2) | s3= STRING_LITERAL_LONG1 -> ^( STRING $s3) | s4= STRING_LITERAL_LONG2 -> ^( STRING $s4) );
    public final IbmSparqlExtParser.string_return string() throws RecognitionException {
        IbmSparqlExtParser.string_return retval = new IbmSparqlExtParser.string_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token s1=null;
        Token s2=null;
        Token s3=null;
        Token s4=null;

        XTree s1_tree=null;
        XTree s2_tree=null;
        XTree s3_tree=null;
        XTree s4_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL_LONG2=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL_LONG2");
        RewriteRuleTokenStream stream_STRING_LITERAL_LONG1=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL_LONG1");
        RewriteRuleTokenStream stream_STRING_LITERAL2=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL2");
        RewriteRuleTokenStream stream_STRING_LITERAL1=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL1");

        try {
            // IbmSparqlExt.g:968:2: (s1= STRING_LITERAL1 -> ^( STRING $s1) | s2= STRING_LITERAL2 -> ^( STRING $s2) | s3= STRING_LITERAL_LONG1 -> ^( STRING $s3) | s4= STRING_LITERAL_LONG2 -> ^( STRING $s4) )
            int alt166=4;
            switch ( input.LA(1) ) {
            case STRING_LITERAL1:
                {
                alt166=1;
                }
                break;
            case STRING_LITERAL2:
                {
                alt166=2;
                }
                break;
            case STRING_LITERAL_LONG1:
                {
                alt166=3;
                }
                break;
            case STRING_LITERAL_LONG2:
                {
                alt166=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }

            switch (alt166) {
                case 1 :
                    // IbmSparqlExt.g:968:6: s1= STRING_LITERAL1
                    {
                    s1=(Token)match(input,STRING_LITERAL1,FOLLOW_STRING_LITERAL1_in_string9434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL1.add(s1);



                    // AST REWRITE
                    // elements: s1
                    // token labels: s1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s1=new RewriteRuleTokenStream(adaptor,"token s1",s1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 968:33: -> ^( STRING $s1)
                    {
                        // IbmSparqlExt.g:968:37: ^( STRING $s1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_s1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:969:5: s2= STRING_LITERAL2
                    {
                    s2=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_string9462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL2.add(s2);



                    // AST REWRITE
                    // elements: s2
                    // token labels: s2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 969:32: -> ^( STRING $s2)
                    {
                        // IbmSparqlExt.g:969:36: ^( STRING $s2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_s2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // IbmSparqlExt.g:970:5: s3= STRING_LITERAL_LONG1
                    {
                    s3=(Token)match(input,STRING_LITERAL_LONG1,FOLLOW_STRING_LITERAL_LONG1_in_string9490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL_LONG1.add(s3);



                    // AST REWRITE
                    // elements: s3
                    // token labels: s3
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s3=new RewriteRuleTokenStream(adaptor,"token s3",s3);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 970:32: -> ^( STRING $s3)
                    {
                        // IbmSparqlExt.g:970:36: ^( STRING $s3)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_s3.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // IbmSparqlExt.g:971:4: s4= STRING_LITERAL_LONG2
                    {
                    s4=(Token)match(input,STRING_LITERAL_LONG2,FOLLOW_STRING_LITERAL_LONG2_in_string9512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL_LONG2.add(s4);



                    // AST REWRITE
                    // elements: s4
                    // token labels: s4
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s4=new RewriteRuleTokenStream(adaptor,"token s4",s4);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 971:31: -> ^( STRING $s4)
                    {
                        // IbmSparqlExt.g:971:35: ^( STRING $s4)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_s4.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "string"

    public static class iRIref_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iRIref"
    // IbmSparqlExt.g:974:1: iRIref : (i= IRI_REF -> ^( IRI $i) | prefixedName );
    public final IbmSparqlExtParser.iRIref_return iRIref() throws RecognitionException {
        IbmSparqlExtParser.iRIref_return retval = new IbmSparqlExtParser.iRIref_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token i=null;
        IbmSparqlExtParser.prefixedName_return prefixedName560 = null;


        XTree i_tree=null;
        RewriteRuleTokenStream stream_IRI_REF=new RewriteRuleTokenStream(adaptor,"token IRI_REF");

        try {
            // IbmSparqlExt.g:975:2: (i= IRI_REF -> ^( IRI $i) | prefixedName )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==IRI_REF) ) {
                alt167=1;
            }
            else if ( (LA167_0==PNAME_NS||LA167_0==PNAME_LN) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // IbmSparqlExt.g:975:6: i= IRI_REF
                    {
                    i=(Token)match(input,IRI_REF,FOLLOW_IRI_REF_in_iRIref9547); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRI_REF.add(i);



                    // AST REWRITE
                    // elements: i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 975:26: -> ^( IRI $i)
                    {
                        // IbmSparqlExt.g:975:30: ^( IRI $i)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(IRI, "IRI"), root_1);

                        adaptor.addChild(root_1, stream_i.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:976:6: prefixedName
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_prefixedName_in_iRIref9574);
                    prefixedName560=prefixedName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prefixedName560.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "iRIref"

    public static class prefixedName_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prefixedName"
    // IbmSparqlExt.g:979:1: prefixedName : (n1= PNAME_LN -> ^( PREFIXED_NAME $n1) | n2= PNAME_NS -> ^( PREFIXED_NS $n2) );
    public final IbmSparqlExtParser.prefixedName_return prefixedName() throws RecognitionException {
        IbmSparqlExtParser.prefixedName_return retval = new IbmSparqlExtParser.prefixedName_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token n1=null;
        Token n2=null;

        XTree n1_tree=null;
        XTree n2_tree=null;
        RewriteRuleTokenStream stream_PNAME_NS=new RewriteRuleTokenStream(adaptor,"token PNAME_NS");
        RewriteRuleTokenStream stream_PNAME_LN=new RewriteRuleTokenStream(adaptor,"token PNAME_LN");

        try {
            // IbmSparqlExt.g:980:2: (n1= PNAME_LN -> ^( PREFIXED_NAME $n1) | n2= PNAME_NS -> ^( PREFIXED_NS $n2) )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==PNAME_LN) ) {
                alt168=1;
            }
            else if ( (LA168_0==PNAME_NS) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // IbmSparqlExt.g:980:6: n1= PNAME_LN
                    {
                    n1=(Token)match(input,PNAME_LN,FOLLOW_PNAME_LN_in_prefixedName9593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PNAME_LN.add(n1);



                    // AST REWRITE
                    // elements: n1
                    // token labels: n1
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n1=new RewriteRuleTokenStream(adaptor,"token n1",n1);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 980:26: -> ^( PREFIXED_NAME $n1)
                    {
                        // IbmSparqlExt.g:980:30: ^( PREFIXED_NAME $n1)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREFIXED_NAME, "PREFIXED_NAME"), root_1);

                        adaptor.addChild(root_1, stream_n1.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:981:6: n2= PNAME_NS
                    {
                    n2=(Token)match(input,PNAME_NS,FOLLOW_PNAME_NS_in_prefixedName9620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PNAME_NS.add(n2);



                    // AST REWRITE
                    // elements: n2
                    // token labels: n2
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_n2=new RewriteRuleTokenStream(adaptor,"token n2",n2);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XTree)adaptor.nil();
                    // 981:26: -> ^( PREFIXED_NS $n2)
                    {
                        // IbmSparqlExt.g:981:30: ^( PREFIXED_NS $n2)
                        {
                        XTree root_1 = (XTree)adaptor.nil();
                        root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(PREFIXED_NS, "PREFIXED_NS"), root_1);

                        adaptor.addChild(root_1, stream_n2.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "prefixedName"

    public static class blankNode_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blankNode"
    // IbmSparqlExt.g:984:1: blankNode : ( BLANK_NODE_LABEL | annon );
    public final IbmSparqlExtParser.blankNode_return blankNode() throws RecognitionException {
        IbmSparqlExtParser.blankNode_return retval = new IbmSparqlExtParser.blankNode_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token BLANK_NODE_LABEL561=null;
        IbmSparqlExtParser.annon_return annon562 = null;


        XTree BLANK_NODE_LABEL561_tree=null;

        try {
            // IbmSparqlExt.g:985:2: ( BLANK_NODE_LABEL | annon )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==BLANK_NODE_LABEL) ) {
                alt169=1;
            }
            else if ( (LA169_0==OPEN_SQ_BRACKET) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // IbmSparqlExt.g:985:6: BLANK_NODE_LABEL
                    {
                    root_0 = (XTree)adaptor.nil();

                    BLANK_NODE_LABEL561=(Token)match(input,BLANK_NODE_LABEL,FOLLOW_BLANK_NODE_LABEL_in_blankNode9655); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BLANK_NODE_LABEL561_tree = (XTree)adaptor.create(BLANK_NODE_LABEL561);
                    adaptor.addChild(root_0, BLANK_NODE_LABEL561_tree);
                    }

                    }
                    break;
                case 2 :
                    // IbmSparqlExt.g:985:25: annon
                    {
                    root_0 = (XTree)adaptor.nil();

                    pushFollow(FOLLOW_annon_in_blankNode9659);
                    annon562=annon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annon562.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "blankNode"

    public static class annon_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annon"
    // IbmSparqlExt.g:988:1: annon : OPEN_SQ_BRACKET CLOSE_SQ_BRACKET -> ^( ANNON OPEN_SQ_BRACKET ) ;
    public final IbmSparqlExtParser.annon_return annon() throws RecognitionException {
        IbmSparqlExtParser.annon_return retval = new IbmSparqlExtParser.annon_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_SQ_BRACKET563=null;
        Token CLOSE_SQ_BRACKET564=null;

        XTree OPEN_SQ_BRACKET563_tree=null;
        XTree CLOSE_SQ_BRACKET564_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQ_BRACKET");
        RewriteRuleTokenStream stream_OPEN_SQ_BRACKET=new RewriteRuleTokenStream(adaptor,"token OPEN_SQ_BRACKET");

        try {
            // IbmSparqlExt.g:989:5: ( OPEN_SQ_BRACKET CLOSE_SQ_BRACKET -> ^( ANNON OPEN_SQ_BRACKET ) )
            // IbmSparqlExt.g:989:9: OPEN_SQ_BRACKET CLOSE_SQ_BRACKET
            {
            OPEN_SQ_BRACKET563=(Token)match(input,OPEN_SQ_BRACKET,FOLLOW_OPEN_SQ_BRACKET_in_annon9678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQ_BRACKET.add(OPEN_SQ_BRACKET563);

            CLOSE_SQ_BRACKET564=(Token)match(input,CLOSE_SQ_BRACKET,FOLLOW_CLOSE_SQ_BRACKET_in_annon9680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQ_BRACKET.add(CLOSE_SQ_BRACKET564);



            // AST REWRITE
            // elements: OPEN_SQ_BRACKET
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 989:42: -> ^( ANNON OPEN_SQ_BRACKET )
            {
                // IbmSparqlExt.g:989:45: ^( ANNON OPEN_SQ_BRACKET )
                {
                XTree root_1 = (XTree)adaptor.nil();
                root_1 = (XTree)adaptor.becomeRoot((XTree)adaptor.create(ANNON, "ANNON"), root_1);

                adaptor.addChild(root_1, stream_OPEN_SQ_BRACKET.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "annon"

    public static class nil_return extends ParserRuleReturnScope {
        XTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nil"
    // IbmSparqlExt.g:992:1: nil : OPEN_BRACE CLOSE_BRACE -> NIL ;
    public final IbmSparqlExtParser.nil_return nil() throws RecognitionException {
        IbmSparqlExtParser.nil_return retval = new IbmSparqlExtParser.nil_return();
        retval.start = input.LT(1);

        XTree root_0 = null;

        Token OPEN_BRACE565=null;
        Token CLOSE_BRACE566=null;

        XTree OPEN_BRACE565_tree=null;
        XTree CLOSE_BRACE566_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");

        try {
            // IbmSparqlExt.g:992:5: ( OPEN_BRACE CLOSE_BRACE -> NIL )
            // IbmSparqlExt.g:992:9: OPEN_BRACE CLOSE_BRACE
            {
            OPEN_BRACE565=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_nil9700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE565);

            CLOSE_BRACE566=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_nil9703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE566);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XTree)adaptor.nil();
            // 992:33: -> NIL
            {
                adaptor.addChild(root_0, (XTree)adaptor.create(NIL, "NIL"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch(RecognitionException re) {
        		throw new SPARQLsyntaxError(re);
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "nil"

    // Delegated rules


    protected DFA46 dfa46 = new DFA46(this);
    static final String DFA46_eotS =
        "\16\uffff";
    static final String DFA46_eofS =
        "\16\uffff";
    static final String DFA46_minS =
        "\1\143\7\uffff\2\112\4\uffff";
    static final String DFA46_maxS =
        "\1\160\7\uffff\2\156\4\uffff";
    static final String DFA46_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\13\1\10\1\11\1\12";
    static final String DFA46_specialS =
        "\16\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\1\2\uffff\1\2\1\3\1\7\1\4\1\uffff\1\5\1\6\1\10\1\uffff\1"+
            "\11\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\43\uffff\1\13",
            "\1\12\7\uffff\1\15\33\uffff\1\14",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "319:1: update1 : ( load | clear | drop | add | move | copy | create | insertData | deleteData | deleteWhere | modify );";
        }
    }
 

    public static final BitSet FOLLOW_query_in_queryUnit406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologue_in_query442 = new BitSet(new long[]{0x0000002000000000L,0x00000000001A2000L});
    public static final BitSet FOLLOW_selectQuery_in_query450 = new BitSet(new long[]{0x0000000000000002L,0x0040000100000000L});
    public static final BitSet FOLLOW_constructQuery_in_query456 = new BitSet(new long[]{0x0000000000000002L,0x0040000100000000L});
    public static final BitSet FOLLOW_describeQuery_in_query462 = new BitSet(new long[]{0x0000000000000002L,0x0040000100000000L});
    public static final BitSet FOLLOW_askQuery_in_query468 = new BitSet(new long[]{0x0000000000000002L,0x0040000100000000L});
    public static final BitSet FOLLOW_bindingsClause_in_query476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_in_updateUnit535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseDecl_in_prologue573 = new BitSet(new long[]{0x0000000000000002L,0x000000000000000CL});
    public static final BitSet FOLLOW_prefixDecl_in_prologue579 = new BitSet(new long[]{0x0000000000000002L,0x000000000000000CL});
    public static final BitSet FOLLOW_BASE_in_baseDecl621 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_iRIref_in_baseDecl625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREFIX_in_prefixDecl658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_PNAME_NS_in_prefixDecl662 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_iRIref_in_prefixDecl666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDecl_in_selectQuery708 = new BitSet(new long[]{0x0000002000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_selectClause_in_selectQuery713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_datasetClause_in_selectQuery717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_whereClause_in_selectQuery722 = new BitSet(new long[]{0x0000000000000000L,0x00000000A6800000L});
    public static final BitSet FOLLOW_solutionModifier_in_selectQuery726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDecl779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VARNAME_in_functionDecl783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_functionDecl785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_functionDecl789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000000003L});
    public static final BitSet FOLLOW_ARROW_in_functionDecl792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_functionDecl796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000003L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_functionDecl799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_FUNCLANG_in_functionDecl801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VARNAME_in_functionDecl805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_functionBody_in_functionDecl809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_functionBody861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_functionBody865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_functionBody867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_functionBody887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_groupGraphPattern_in_functionBody891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_functionBody893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_subSelect927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_whereClause_in_subSelect931 = new BitSet(new long[]{0x0000000000000000L,0x00400001A6800000L});
    public static final BitSet FOLLOW_solutionModifier_in_subSelect935 = new BitSet(new long[]{0x0000000000000002L,0x0040000100000000L});
    public static final BitSet FOLLOW_inlineData_in_subSelect940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_selectClause983 = new BitSet(new long[]{0x0000000000000000L,0x000000000000C040L,0xFFFFFFFFFFFFFFC3L,0x000000000000000FL,0x0000000000000001L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0xFFFFFFFFFFFFFFC3L,0x000000000000000FL,0x0000000000000001L});
    public static final BitSet FOLLOW_REDUCED_in_selectClause995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0xFFFFFFFFFFFFFFC3L,0x000000000000000FL,0x0000000000000001L});
    public static final BitSet FOLLOW_var_in_selectClause1006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L,0xFFFFFFFFFFFFFFC3L,0x000000000000000FL});
    public static final BitSet FOLLOW_expAsVar_in_selectClause1012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L,0xFFFFFFFFFFFFFFC3L,0x000000000000000FL});
    public static final BitSet FOLLOW_fexp_in_selectClause1018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L,0xFFFFFFFFFFFFFFC3L,0x000000000000000FL});
    public static final BitSet FOLLOW_256_in_selectClause1025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_expAsVar1079 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_expAsVar1083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_AS_in_expAsVar1085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_expAsVar1089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_expAsVar1091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_in_fexp1125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_fexp1131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRUCT_in_constructQuery1173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_constructTemplate_in_constructQuery1193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_datasetClause_in_constructQuery1197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_whereClause_in_constructQuery1202 = new BitSet(new long[]{0x0000000000000000L,0x00000000A6800000L});
    public static final BitSet FOLLOW_solutionModifier_in_constructQuery1206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datasetClause_in_constructQuery1251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240000L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_constructQuery1254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_constructQuery1256 = new BitSet(new long[]{0x0400000000000000L,0x4000000040001850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_triplesTemplate_in_constructQuery1260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_constructQuery1263 = new BitSet(new long[]{0x0000000000000000L,0x00000000A6800000L});
    public static final BitSet FOLLOW_solutionModifier_in_constructQuery1267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCRIBE_in_describeQuery1329 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000003L,0x0000000000080000L,0x0000000000000001L});
    public static final BitSet FOLLOW_varOrIRIref_in_describeQuery1335 = new BitSet(new long[]{0x0400000000000000L,0x00000000A6A40410L,0x0000000000000003L,0x0000000000080000L});
    public static final BitSet FOLLOW_256_in_describeQuery1342 = new BitSet(new long[]{0x0000000000000000L,0x00000000A6A40400L});
    public static final BitSet FOLLOW_datasetClause_in_describeQuery1348 = new BitSet(new long[]{0x0000000000000000L,0x00000000A6A40400L});
    public static final BitSet FOLLOW_whereClause_in_describeQuery1353 = new BitSet(new long[]{0x0000000000000000L,0x00000000A6800000L});
    public static final BitSet FOLLOW_solutionModifier_in_describeQuery1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASK_in_askQuery1412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_datasetClause_in_askQuery1416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_whereClause_in_askQuery1421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_datasetClause1458 = new BitSet(new long[]{0x0400000000000000L,0x0000000000400010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_defaultGraphClause_in_datasetClause1464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namedGraphClause_in_datasetClause1470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sourceSelector_in_defaultGraphClause1514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_namedGraphClause1531 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_sourceSelector_in_namedGraphClause1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_sourceSelector1558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_whereClause1575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_groupGraphPattern_in_whereClause1578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupClause_in_solutionModifier1612 = new BitSet(new long[]{0x0000000000000002L,0x00000000A6000000L});
    public static final BitSet FOLLOW_havingClause_in_solutionModifier1617 = new BitSet(new long[]{0x0000000000000002L,0x00000000A4000000L});
    public static final BitSet FOLLOW_orderClause_in_solutionModifier1622 = new BitSet(new long[]{0x0000000000000002L,0x00000000A0000000L});
    public static final BitSet FOLLOW_limitOffsetClauses_in_solutionModifier1627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_groupClause1669 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_BY_in_groupClause1671 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0xFFFFFFFFFFFFFFC3L,0x000000000008000FL});
    public static final BitSet FOLLOW_groupCondition_in_groupClause1675 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000050L,0xFFFFFFFFFFFFFFC3L,0x000000000008000FL});
    public static final BitSet FOLLOW_builtInCall_in_groupCondition1710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_groupCondition1718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_groupCondition1726 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_groupCondition1730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010100L});
    public static final BitSet FOLLOW_AS_in_groupCondition1734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_groupCondition1738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_groupCondition1743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_groupCondition1770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HAVING_in_havingClause1787 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0xFFFFFFFFFFFFFFC3L,0x000000000008000FL});
    public static final BitSet FOLLOW_havingCondition_in_havingClause1791 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000050L,0xFFFFFFFFFFFFFFC3L,0x000000000008000FL});
    public static final BitSet FOLLOW_constraint_in_havingCondition1828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_orderClause1845 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_BY_in_orderClause1847 = new BitSet(new long[]{0x0400000000000000L,0x0000000018000050L,0xFFFFFFFFFFFFFFC3L,0x000000000008000FL});
    public static final BitSet FOLLOW_orderCondition_in_orderClause1851 = new BitSet(new long[]{0x0400000000000002L,0x0000000018000050L,0xFFFFFFFFFFFFFFC3L,0x000000000008000FL});
    public static final BitSet FOLLOW_ASC_in_orderCondition1887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DESC_in_orderCondition1892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_brackettedExpression_in_orderCondition1897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constraint_in_orderCondition1904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_orderCondition1913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limitClause_in_limitOffsetClauses1930 = new BitSet(new long[]{0x0000000000000002L,0x00000000A0000000L});
    public static final BitSet FOLLOW_offsetClause_in_limitOffsetClauses1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_offsetClause_in_limitOffsetClauses1937 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_limitClause_in_limitOffsetClauses1939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limitClause1957 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_INTEGER_in_limitClause1961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OFFSET_in_offsetClause1993 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_INTEGER_in_offsetClause1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINDINGS_in_bindingsClause2028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_bindingsClause2032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000003L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_bindingsClause2035 = new BitSet(new long[]{0x0400000000000000L,0x4000000040001850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bindingsClause2039 = new BitSet(new long[]{0x0400000000000000L,0x0000000240000810L,0x0000000000000000L,0x00000000000FFFC0L});
    public static final BitSet FOLLOW_bindingValue_in_bindingsClause2043 = new BitSet(new long[]{0x0400000000000000L,0x0000000240000910L,0x0000000000000000L,0x00000000000FFFC0L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bindingsClause2046 = new BitSet(new long[]{0x0400000000000000L,0x4000000040001850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_nil_in_bindingsClause2050 = new BitSet(new long[]{0x0400000000000000L,0x4000000040001850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_bindingsClause2055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineData_in_bindingsClause2095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_bindingValue2114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_bindingValue2118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_bindingValue2122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_bindingValue2126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDEF_in_bindingValue2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologue_in_update2149 = new BitSet(new long[]{0x0000000000000002L,0x0001BBC800000000L});
    public static final BitSet FOLLOW_update1_in_update2153 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_update2157 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_update_in_update2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_in_update12182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clear_in_update12186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_in_update12190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_in_update12194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_move_in_update12198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_copy_in_update12202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_in_update12206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertData_in_update12210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteData_in_update12214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteWhere_in_update12218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modify_in_update12222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load2239 = new BitSet(new long[]{0x0400000000000000L,0x0000001000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SILENT_in_load2241 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_iRIref_in_load2244 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_INTO_in_load2248 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_graphRef_in_load2250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLEAR_in_clear2270 = new BitSet(new long[]{0x0000000000000000L,0x001C001000400000L});
    public static final BitSet FOLLOW_SILENT_in_clear2272 = new BitSet(new long[]{0x0000000000000000L,0x001C001000400000L});
    public static final BitSet FOLLOW_graphRefAll_in_clear2275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_drop2292 = new BitSet(new long[]{0x0000000000000000L,0x001C001000400000L});
    public static final BitSet FOLLOW_SILENT_in_drop2294 = new BitSet(new long[]{0x0000000000000000L,0x001C001000400000L});
    public static final BitSet FOLLOW_graphRefAll_in_drop2297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_create2314 = new BitSet(new long[]{0x0000000000000000L,0x0008001000000000L});
    public static final BitSet FOLLOW_SILENT_in_create2316 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_graphRef_in_create2319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_in_add2336 = new BitSet(new long[]{0x0400000000000000L,0x000C001000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SILENT_in_add2338 = new BitSet(new long[]{0x0400000000000000L,0x000C001000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_graphOrDefault_in_add2341 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_TO_in_add2343 = new BitSet(new long[]{0x0400000000000000L,0x000C001000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_graphOrDefault_in_add2345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOVE_in_move2362 = new BitSet(new long[]{0x0400000000000000L,0x000C001000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SILENT_in_move2364 = new BitSet(new long[]{0x0400000000000000L,0x000C001000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_graphOrDefault_in_move2367 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_TO_in_move2369 = new BitSet(new long[]{0x0400000000000000L,0x000C001000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_graphOrDefault_in_move2371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_copy2388 = new BitSet(new long[]{0x0400000000000000L,0x000C001000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SILENT_in_copy2390 = new BitSet(new long[]{0x0400000000000000L,0x000C001000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_graphOrDefault_in_copy2393 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_TO_in_copy2395 = new BitSet(new long[]{0x0400000000000000L,0x000C001000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_graphOrDefault_in_copy2397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertData2414 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DATA_in_insertData2416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_quadData_in_insertData2418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteData2434 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DATA_in_deleteData2436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_quadData_in_deleteData2438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteWhere2455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_deleteWhere2457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_quadPattern_in_deleteWhere2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_modify2478 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_iRIref_in_modify2480 = new BitSet(new long[]{0x0000000000000000L,0x0001BBC800000000L});
    public static final BitSet FOLLOW_deleteClause_in_modify2487 = new BitSet(new long[]{0x0000000000000000L,0x0003BBC800040000L});
    public static final BitSet FOLLOW_insertClause_in_modify2489 = new BitSet(new long[]{0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_insertClause_in_modify2494 = new BitSet(new long[]{0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_usingClause_in_modify2498 = new BitSet(new long[]{0x0000000000000000L,0x0002000000040000L});
    public static final BitSet FOLLOW_WHERE_TOKEN_in_modify2501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_groupGraphPattern_in_modify2503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_deleteClause2519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_quadPattern_in_deleteClause2521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertClause2538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_quadPattern_in_insertClause2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_usingClause2557 = new BitSet(new long[]{0x0400000000000000L,0x0000000000400010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_iRIref_in_usingClause2561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_usingClause2565 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_iRIref_in_usingClause2567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_graphOrDefault2586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphOrDefault2590 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_iRIref_in_graphOrDefault2593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphRef2610 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_iRIref_in_graphRef2612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphRef_in_graphRefAll2626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_graphRefAll2630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMED_in_graphRefAll2634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_graphRefAll2638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadPattern2652 = new BitSet(new long[]{0x0400000000000000L,0x4008000040001850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_quads_in_quadPattern2654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadPattern2656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadData2670 = new BitSet(new long[]{0x0400000000000000L,0x4008000040001850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_quads_in_quadData2672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadData2674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesTemplate_in_quads2688 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_quadsNotTriples_in_quads2693 = new BitSet(new long[]{0x0400000000000002L,0x4028000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_DOT_in_quads2695 = new BitSet(new long[]{0x0400000000000002L,0x4008000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_triplesTemplate_in_quads2698 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_GRAPH_in_quadsNotTriples2716 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000003L,0x0000000000080000L});
    public static final BitSet FOLLOW_varOrIRIref_in_quadsNotTriples2718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_quadsNotTriples2720 = new BitSet(new long[]{0x0400000000000000L,0x4000000040001850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_triplesTemplate_in_quadsNotTriples2722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_quadsNotTriples2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubject_in_triplesTemplate2739 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_DOT_in_triplesTemplate2743 = new BitSet(new long[]{0x0400000000000002L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_triplesTemplate_in_triplesTemplate2745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern2763 = new BitSet(new long[]{0x0400002000000000L,0x5BC8000140243C50L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_subSelect_in_groupGraphPattern2769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_groupGraphPatternSub_in_groupGraphPattern2775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesBlock_in_groupGraphPatternSub2813 = new BitSet(new long[]{0x0000000000000002L,0x1BC8000100240400L});
    public static final BitSet FOLLOW_groupGraphPatternSubInt_in_groupGraphPatternSub2816 = new BitSet(new long[]{0x0000000000000002L,0x1BC8000100240400L});
    public static final BitSet FOLLOW_graphPatternNotTriples_in_groupGraphPatternSubInt2846 = new BitSet(new long[]{0x0400000000000002L,0x4020000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_DOT_in_groupGraphPatternSubInt2848 = new BitSet(new long[]{0x0400000000000002L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_triplesBlock_in_groupGraphPatternSubInt2851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubjectPath_in_triplesBlock2882 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_DOT_in_triplesBlock2886 = new BitSet(new long[]{0x0400000000000002L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_triplesBlock_in_triplesBlock2890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples2921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optionalGraphPattern_in_graphPatternNotTriples2935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minusGraphPattern_in_graphPatternNotTriples2948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphGraphPattern_in_graphPatternNotTriples2962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_serviceGraphPattern_in_graphPatternNotTriples2976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_in_graphPatternNotTriples2990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind_in_graphPatternNotTriples3004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineData_in_graphPatternNotTriples3017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUES_in_inlineData3037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000000003L});
    public static final BitSet FOLLOW_dataBlock_in_inlineData3039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineDataOneVar_in_dataBlock3067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inlineDataFull_in_dataBlock3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_inlineDataOneVar3093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_inlineDataOneVar3095 = new BitSet(new long[]{0x0400000000000000L,0x0000000240001810L,0x0000000000000000L,0x00000000000FFFC0L});
    public static final BitSet FOLLOW_dataBlockValue_in_inlineDataOneVar3099 = new BitSet(new long[]{0x0400000000000000L,0x0000000240001810L,0x0000000000000000L,0x00000000000FFFC0L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataOneVar3102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_inlineDataFull3135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_inlineDataFull3139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000003L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_inlineDataFull3142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_inlineDataFull3144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_inlineDataFull3148 = new BitSet(new long[]{0x0400000000000000L,0x0000000240000910L,0x0000000000000000L,0x00000000000FFFC0L});
    public static final BitSet FOLLOW_dataBlockValue_in_inlineDataFull3152 = new BitSet(new long[]{0x0400000000000000L,0x0000000240000910L,0x0000000000000000L,0x00000000000FFFC0L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_inlineDataFull3155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_inlineDataFull3160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_dataBlockValue3194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_dataBlockValue3198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_dataBlockValue3202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_dataBlockValue3206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNDEF_in_dataBlockValue3210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTIONAL_in_optionalGraphPattern3223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_groupGraphPattern_in_optionalGraphPattern3227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GRAPH_in_graphGraphPattern3257 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000003L,0x0000000000080000L});
    public static final BitSet FOLLOW_varOrIRIref_in_graphGraphPattern3261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_groupGraphPattern_in_graphGraphPattern3265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SERVICE_in_serviceGraphPattern3307 = new BitSet(new long[]{0x0400000000000000L,0x0000001000000010L,0x0000000000000003L,0x0000000000080000L});
    public static final BitSet FOLLOW_SILENT_in_serviceGraphPattern3311 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000003L,0x0000000000080000L});
    public static final BitSet FOLLOW_varOrIRIref_in_serviceGraphPattern3316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_groupGraphPattern_in_serviceGraphPattern3320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind1_in_bind3359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind2_in_bind3364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIND_in_bind13380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bind13382 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_bind13386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_AS_in_bind13388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_bind13392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bind13394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BIND_in_bind23430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bind23432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_funcCall_in_bind23436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_AS_in_bind23438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_bind23440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_bind23444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000003L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bind23447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_bind23449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARNAME_in_funcCall3488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_funcCall3490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_funcCall3494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000003L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_funcCall3497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3533 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_UNION_in_groupOrUnionGraphPattern3539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern3543 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_MINUS_in_minusGraphPattern3590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_groupGraphPattern_in_minusGraphPattern3594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_filter3620 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0xFFFFFFFFFFFFFFC3L,0x000000000008000FL});
    public static final BitSet FOLLOW_constraint_in_filter3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackettedExpression_in_constraint3655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_constraint3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_constraint3663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_functionCall3679 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_argList_in_functionCall3683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_argList3716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_argList3731 = new BitSet(new long[]{0x0400000000000000L,0x0000000040004850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_DISTINCT_in_argList3735 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_argList3740 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000100L});
    public static final BitSet FOLLOW_COMMA_in_argList3744 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_argList3748 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_argList3753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_expressionList3791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_expressionList3806 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_expressionList3810 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000100L});
    public static final BitSet FOLLOW_COMMA_in_expressionList3814 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_expressionList3818 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_expressionList3823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate3860 = new BitSet(new long[]{0x0400000000000000L,0x4000000040001850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_constructTriples_in_constructTemplate3863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate3866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesSameSubject_in_constructTriples3881 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_DOT_in_constructTriples3885 = new BitSet(new long[]{0x0400000000000002L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_constructTriples_in_constructTriples3888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_triplesSameSubject3908 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000003L,0x0000000000080000L,0x0000000000000002L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_triplesSameSubject3912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_triplesSameSubject3932 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000003L,0x0000000000080000L,0x0000000000000002L});
    public static final BitSet FOLLOW_propertyList_in_triplesSameSubject3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_propertyListNotEmpty3985 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmpty3987 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_propertyListNotEmpty3994 = new BitSet(new long[]{0x0400000000000002L,0x0000000400000010L,0x0000000000000003L,0x0000000000080000L,0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_propertyListNotEmpty3999 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmpty4001 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_propertyList4033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_in_objectList4053 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_objectList4056 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_object_in_objectList4058 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_objectPath_in_objectListPath4167 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_objectListPath4170 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_objectPath_in_objectListPath4172 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_graphNode_in_object4277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphNodePath_in_objectPath4291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrIRIref_in_verb4308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_257_in_verb4317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_triplesSameSubjectPath4335 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0x0000000000000003L,0x0000000000080000L,0x0000000000000092L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_triplesSameSubjectPath4339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNodePath_in_triplesSameSubjectPath4359 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0x0000000000000003L,0x0000000000080000L,0x0000000000000092L});
    public static final BitSet FOLLOW_propertyListPath_in_triplesSameSubjectPath4363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbPath_in_propertyListNotEmptyPath4413 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_objectListPath_in_propertyListNotEmptyPath4417 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_verbSimple_in_propertyListNotEmptyPath4436 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_objectListPath_in_propertyListNotEmptyPath4440 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_propertyListNotEmptyPath4456 = new BitSet(new long[]{0x0400000000000002L,0x0000000400000050L,0x0000000000000003L,0x0000000000080000L,0x0000000000000092L});
    public static final BitSet FOLLOW_verbPath_in_propertyListNotEmptyPath4464 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmptyPath4468 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_verbSimple_in_propertyListNotEmptyPath4496 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_objectList_in_propertyListNotEmptyPath4500 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_propertyListPath4582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_verbPath4606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_verbSimple4620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathAlternative_in_path4634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathSequence_in_pathAlternative4650 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_258_in_pathAlternative4665 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0x0000000000000000L,0x0000000000080000L,0x0000000000000092L});
    public static final BitSet FOLLOW_pathSequence_in_pathAlternative4669 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_pathEltOrInverse_in_pathSequence4720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_259_in_pathSequence4734 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0x0000000000000000L,0x0000000000080000L,0x0000000000000092L});
    public static final BitSet FOLLOW_pathEltOrInverse_in_pathSequence4738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_pathPrimary_in_pathElt4785 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000061L});
    public static final BitSet FOLLOW_pathMod_in_pathElt4799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathElt_in_pathEltOrInverse4841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_260_in_pathEltOrInverse4846 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0x0000000000000000L,0x0000000000080000L,0x0000000000000082L});
    public static final BitSet FOLLOW_pathElt_in_pathEltOrInverse4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pathMod0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_pathPrimary4894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_257_in_pathPrimary4898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_263_in_pathPrimary4902 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0x0000000000000000L,0x0000000000080000L,0x0000000000000012L});
    public static final BitSet FOLLOW_pathNegatedPropertySet_in_pathPrimary4904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_pathPrimary4908 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0x0000000000000000L,0x0000000000080000L,0x0000000000000092L});
    public static final BitSet FOLLOW_path_in_pathPrimary4911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_pathPrimary4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_pathNegatedPropertySet4932 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000110L,0x0000000000000000L,0x0000000000080000L,0x0000000000000012L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_258_in_pathNegatedPropertySet4940 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L,0x0000000000000012L});
    public static final BitSet FOLLOW_pathOneInPropertySet_in_pathNegatedPropertySet4942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_pathNegatedPropertySet4950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_pathOneInPropertySet4964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_257_in_pathOneInPropertySet4968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_260_in_pathOneInPropertySet4973 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_iRIref_in_pathOneInPropertySet4975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_260_in_pathOneInPropertySet4990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_257_in_pathOneInPropertySet4992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_integer5015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collection_in_triplesNode5033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNodePropertyList_in_triplesNode5042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collectionPath_in_triplesNodePath5082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNodePropertyListPath_in_triplesNodePath5094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyList5131 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000003L,0x0000000000080000L,0x0000000000000002L});
    public static final BitSet FOLLOW_propertyListNotEmpty_in_blankNodePropertyList5135 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyList5138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_blankNodePropertyListPath5167 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000050L,0x0000000000000003L,0x0000000000080000L,0x0000000000000092L});
    public static final BitSet FOLLOW_propertyListNotEmptyPath_in_blankNodePropertyListPath5171 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_blankNodePropertyListPath5174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collection5203 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_graphNode_in_collection5207 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000950L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collection5210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_collectionPath5242 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_graphNodePath_in_collectionPath5246 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000950L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_collectionPath5249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_graphNode5281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNode_in_graphNode5285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varOrTerm_in_graphNodePath5299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_triplesNodePath_in_graphNodePath5303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_varOrTerm5318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_graphTerm_in_varOrTerm5322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_varOrIRIref5336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_varOrIRIref5340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR1_in_var5356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR2_in_var5379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_graphTerm5406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_graphTerm5410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_graphTerm5414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_graphTerm5418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blankNode_in_graphTerm5422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_graphTerm5426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_expression5440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_conditionalOrExpression5466 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_valueLogical_in_conditionalAndExpression5530 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_conditionalAndExpression5534 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_valueLogical_in_conditionalAndExpression5538 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_relationalExpression_in_valueLogical5589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5605 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0000000000000070L,0x0000000000000000L,0x0000000000000F00L});
    public static final BitSet FOLLOW_264_in_relationalExpression5609 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_265_in_relationalExpression5632 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_relationalExpression5657 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_266_in_relationalExpression5683 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTE_in_relationalExpression5709 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_267_in_relationalExpression5734 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_numericExpression_in_relationalExpression5740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_relationalExpression5759 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_expressionList_in_relationalExpression5765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_relationalExpression5789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_IN_in_relationalExpression5792 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_expressionList_in_relationalExpression5798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_numericExpression5864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5884 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000000L,0x0000000000003FC0L,0x0000000000001040L});
    public static final BitSet FOLLOW_262_in_additiveExpression5903 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5907 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000000L,0x0000000000003FC0L,0x0000000000001040L});
    public static final BitSet FOLLOW_268_in_additiveExpression5932 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5936 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000000L,0x0000000000003FC0L,0x0000000000001040L});
    public static final BitSet FOLLOW_numericLiteralPositive_in_additiveExpression5963 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000000L,0x0000000000003FC0L,0x0000000000001049L});
    public static final BitSet FOLLOW_256_in_additiveExpression5983 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_259_in_additiveExpression5985 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5990 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000000L,0x0000000000003FC0L,0x0000000000001040L});
    public static final BitSet FOLLOW_numericLiteralNegative_in_additiveExpression6093 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000000L,0x0000000000003FC0L,0x0000000000001049L});
    public static final BitSet FOLLOW_256_in_additiveExpression6113 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_259_in_additiveExpression6115 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6120 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000000L,0x0000000000003FC0L,0x0000000000001040L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_256_in_multiplicativeExpression6242 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6245 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_259_in_multiplicativeExpression6257 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_263_in_unaryExpression6286 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_262_in_unaryExpression6295 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_268_in_unaryExpression6304 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_unaryExpression6313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackettedExpression_in_primaryExpression6330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtInCall_in_primaryExpression6337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIrefOrFunction_in_primaryExpression6344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rDFLiteral_in_primaryExpression6351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_primaryExpression6358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_primaryExpression6365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_in_primaryExpression6372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_in_primaryExpression6379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_brackettedExpression6409 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_brackettedExpression6413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_brackettedExpression6415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_in_builtInCall6450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6452 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANG_in_builtInCall6490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6492 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGMATCHES_in_builtInCall6529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6531 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6535 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall6537 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATATYPE_in_builtInCall6568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6570 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOUND_in_builtInCall6603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_var_in_builtInCall6609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IRI_in_builtInCall6649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6651 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_builtInCall6688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6690 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BNODE_in_builtInCall6728 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6732 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nil_in_builtInCall6742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAND_in_builtInCall6765 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_nil_in_builtInCall6767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABS_in_builtInCall6830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6832 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CEIL_in_builtInCall6870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6872 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOOR_in_builtInCall6909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6911 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROUND_in_builtInCall6946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall6948 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall6952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall6954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONCAT_in_builtInCall6983 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_expressionList_in_builtInCall6987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substringExpression_in_builtInCall7036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRLEN_in_builtInCall7081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7083 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_strReplaceExpression_in_builtInCall7120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UCASE_in_builtInCall7125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7127 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCASE_in_builtInCall7162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7164 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENCODE_FOR_URI_in_builtInCall7199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7201 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTAINS_in_builtInCall7227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7229 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7233 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7235 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRSTARTS_in_builtInCall7267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7269 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7273 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7275 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRENDS_in_builtInCall7306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7308 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7312 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7314 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRBEFORE_in_builtInCall7347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7349 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7353 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7355 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRAFTER_in_builtInCall7388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7390 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7394 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall7396 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YEAR_in_builtInCall7429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7431 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MONTH_in_builtInCall7467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7469 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DAY_in_builtInCall7504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7506 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HOURS_in_builtInCall7543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7545 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUTES_in_builtInCall7580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7582 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECONDS_in_builtInCall7615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7617 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEZONE_in_builtInCall7650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7652 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TZ_in_builtInCall7684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7686 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOW_in_builtInCall7724 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_nil_in_builtInCall7726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UUID_in_builtInCall7735 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_nil_in_builtInCall7737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUUID_in_builtInCall7746 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_nil_in_builtInCall7748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MD5_in_builtInCall7757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7759 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA1_in_builtInCall7796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7798 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA224_in_builtInCall7834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7836 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA256_in_builtInCall7870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7872 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA384_in_builtInCall7906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7908 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHA512_in_builtInCall7942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall7944 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall7948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall7950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtInCall7978 = new BitSet(new long[]{0x0400000000000000L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_expressionList_in_builtInCall7982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_builtInCall8027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8029 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8033 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall8035 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8039 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall8041 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRLANG_in_builtInCall8073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8075 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8079 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall8081 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRDT_in_builtInCall8126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8128 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8132 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall8134 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMETERM_in_builtInCall8181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8183 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8187 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtInCall8189 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISIRI_in_builtInCall8233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8235 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISURI_in_builtInCall8270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8272 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISBLANK_in_builtInCall8307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8309 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISLITERAL_in_builtInCall8342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8344 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISNUMERIC_in_builtInCall8375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_builtInCall8377 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_builtInCall8381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_builtInCall8383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regexExpression_in_builtInCall8408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsFunc_in_builtInCall8413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_notExistsFunc_in_builtInCall8418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEX_in_regexExpression8435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_regexExpression8437 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_regexExpression8441 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_regexExpression8443 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_regexExpression8447 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000100L});
    public static final BitSet FOLLOW_COMMA_in_regexExpression8451 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_regexExpression8455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_regexExpression8460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBSTR_in_substringExpression8503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_substringExpression8505 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_substringExpression8509 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_substringExpression8511 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_substringExpression8515 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000100L});
    public static final BitSet FOLLOW_COMMA_in_substringExpression8519 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_substringExpression8523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_substringExpression8528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_strReplaceExpression8570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_strReplaceExpression8572 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8576 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8578 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8582 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8584 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8588 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000100L});
    public static final BitSet FOLLOW_COMMA_in_strReplaceExpression8591 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_strReplaceExpression8595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_strReplaceExpression8599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsFunc8648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_groupGraphPattern_in_existsFunc8652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_notExistsFunc8686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EXISTS_in_notExistsFunc8688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000240400L});
    public static final BitSet FOLLOW_groupGraphPattern_in_notExistsFunc8692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_aggregate8724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8726 = new BitSet(new long[]{0x0400000000000000L,0x0000000040004850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C1L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8730 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C1L});
    public static final BitSet FOLLOW_256_in_aggregate8735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_expression_in_aggregate8741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_aggregate8777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8779 = new BitSet(new long[]{0x0400000000000000L,0x0000000040004850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8783 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_aggregate8788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_aggregate8814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8816 = new BitSet(new long[]{0x0400000000000000L,0x0000000040004850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8820 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_aggregate8825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_aggregate8851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8853 = new BitSet(new long[]{0x0400000000000000L,0x0000000040004850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8857 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_aggregate8862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_aggregate8888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8890 = new BitSet(new long[]{0x0400000000000000L,0x0000000040004850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8894 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_aggregate8899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_aggregate8925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8927 = new BitSet(new long[]{0x0400000000000000L,0x0000000040004850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8931 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_aggregate8936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_CONCAT_in_aggregate8959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_aggregate8961 = new BitSet(new long[]{0x0400000000000000L,0x0000000040004850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_DISTINCT_in_aggregate8965 = new BitSet(new long[]{0x0400000000000000L,0x0000000040000850L,0xFFFFFFFFFFFFFFC3L,0x00000000000FFFCFL,0x00000000000010C0L});
    public static final BitSet FOLLOW_expression_in_aggregate8970 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_aggregate8974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_SEPARATOR_in_aggregate8976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_264_in_aggregate8978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000070000L});
    public static final BitSet FOLLOW_string_in_aggregate8982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_aggregate8987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iRIref_in_iRIrefOrFunction9040 = new BitSet(new long[]{0x0400000000000002L,0x4000000040000850L,0x0000000000000003L,0x00000000001FFFC0L});
    public static final BitSet FOLLOW_argList_in_iRIrefOrFunction9045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_rDFLiteral9100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L,0x0000000000002000L});
    public static final BitSet FOLLOW_LANGTAG_in_rDFLiteral9104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_269_in_rDFLiteral9110 = new BitSet(new long[]{0x0400000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_iRIref_in_rDFLiteral9112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralUnsigned_in_numericLiteral9134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralPositive_in_numericLiteral9142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteralNegative_in_numericLiteral9150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_numericLiteralUnsigned9168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_in_numericLiteralUnsigned9189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_numericLiteralUnsigned9209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive9243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive9262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive9280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative9310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative9329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative9347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_booleanLiteral9379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_booleanLiteral9402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL1_in_string9434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_string9462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_LONG1_in_string9490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_LONG2_in_string9512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IRI_REF_in_iRIref9547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefixedName_in_iRIref9574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PNAME_LN_in_prefixedName9593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PNAME_NS_in_prefixedName9620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_NODE_LABEL_in_blankNode9655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annon_in_blankNode9659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQ_BRACKET_in_annon9678 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_CLOSE_SQ_BRACKET_in_annon9680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_nil9700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_nil9703 = new BitSet(new long[]{0x0000000000000002L});

}
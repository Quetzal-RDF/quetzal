
prefix fn: <http://localhost:8083/>
prefix x: <http://www.drugbank.ca>
prefix xs: <http://www.w3.org/2001/XMLSchema>
prefix up: <http://uniprot.org/uniprot>

function fn:getDrugBankNames GET ( -> ?x ) 
service fn:getDrugBankNames [ ] -> "//x:row" :: "./x:drug" "xs:string"

function fn:getDrugTransporters GET ( ?x -> ?y ) 
service fn:getDrugTransporters [ "drugName" -> ?x ] -> "//x:row" :: "./x:drug" "xs:string" "./x:id" "xs:string" 

function x:getProteinGeneFunctions GET (?protein -> ?geneFunction ?type) 
service CONCAT("http://www.uniprot.org/uniprot/", CONCAT(?protein, ".xml")) [ ] -> "/up:uniprot/up:entry/up:dbReference" :: "./@id" "xs:string" "./@type" "xs:string"

function fn:getDrugSMILES GET ( ?x -> ?y ) 
service fn:getSMILES [ "drugName" -> ?x ] -> "//x:row" :: "./x:drug" "xs:string" "./x:smiles" "xs:string" 

select ?d1 ?metric where 
{  
 { select distinct ?d1 ?metric where {

    BIND( fn:getDrugBankNames() AS ( ?d1 ) )

    BIND( fn:getDrugSMILES( ?d1 ) AS ( ?d1 ?metric ) )
  
  } }

  union 
  
  { select distinct ?d1 ?metric { 
  
  { select distinct ?d1 ?transporter where {

    BIND( fn:getDrugBankNames() AS ( ?d1 ) )

    BIND( fn:getDrugTransporters( ?d1 ) AS ( ?d1 ?transporter ) )
 
  } }

  { select distinct ?transporter ?metric where {

    { select distinct ?transporter where 
      {
        BIND( fn:getDrugBankNames() AS ( ?drug ) )

        BIND( fn:getDrugTransporters( ?drug ) AS ( ?drug ?transporter ) ) 
      }
    }

    BIND( x:getProteinGeneFunctions(?transporter) AS (?metric ?type) )
    
    FILTER (?type = "GO")
  }}
 }}
}

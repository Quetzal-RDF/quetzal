dummy(store_name) ::= << select '' from (select storename from <store_name> limit 1) dummy where 0=1 >>


describe(target, entry_constraint, sql_id, columns,s_target)  ::= << 
 QD<sql_id> AS (SELECT ENTRY AS DESCRIBED_RESOURCE, LT.nstruct.prop AS PROPERTY, LT.nstruct.val AS OBJECT, LT.nstruct.typ AS PTYP
 FROM <target; separator=",">  lateral view explode(array( <columns:{c | named_struct('prop',prop<c>,'val',val<c>,'typ',typ<c>)} ; separator="," > )) LT AS nstruct 
 WHERE LT.nstruct.prop IS NOT NULL
 	   <if(entry_constraint)> AND <entry_constraint; separator=" AND "> <endif>),
QR<sql_id> AS ( SELECT DESCRIBED_RESOURCE, PROPERTY, COALESCE(ELEM, OBJECT) AS OBJECT, COALESCE(TYP,PTYP) AS TYP
FROM QD<sql_id> LEFT OUTER JOIN <s_target> target_temp_table ON QD<sql_id>.OBJECT = target_temp_table.list_id AND QD<sql_id>.OBJECT LIKE 'lid:%' ORDER BY QD<sql_id>.DESCRIBED_RESOURCE)	   
>>

top_select(outerProject, project,target,sql_id,distinct,const_filter, endModifiers, store_name)  ::= << 
<if(outerProject)> SELECT <outerProject; separator=" , "> FROM ( <endif>
<if(sql_id)> QS<sql_id> AS (<endif>SELECT <if(distinct)> DISTINCT <endif> <project; separator=","> FROM<if(target)> <target> <else> <store_name> <endif> <if(const_filter)> WHERE  <const_filter; separator=" AND "> <endif> 
<if(endModifiers)> <endModifiers> <endif>
<if(sql_id)>)<endif>
<if(outerProject)>)<endif>
>>

triple_all_predicates_both(project,target, entry_constraint, graph_constraint,predicate_constraint, sep, val_constraint,pfilter_constraint, sfilter_constraint, sql_id, columns, project_type,s_project, s_target, is_rph, hasMultipleTargets)  ::= << 
<if(hasMultipleTargets)>
 Q<sql_id>Prime AS (SELECT *
 FROM <target; separator=","> 
 WHERE <if(entry_constraint)><entry_constraint; separator=" AND "> <endif>
 	   <if(graph_constraint)> <if(entry_constraint)> AND  <endif>  <graph_constraint; separator=" AND "> <endif>
 	   <if(pfilter_constraint)> <if(entry_constraint)> AND  <elseif(graph_constraint)> AND <endif>  <pfilter_constraint; separator=" AND "> <endif>),
 
 Q<sql_id> AS (SELECT <project; separator=",">
 FROM  Q<sql_id>Prime lateral view explode(array( <columns:{c | named_struct('prop',prop<c>,'val',val<c><if(project_type)>,'typ',typ<c><endif>)} ; separator="," > )) LT AS nstruct
 WHERE LT.nstruct.prop IS NOT NULL
  <if(predicate_constraint)> AND (<predicate_constraint; separator=sep>)<endif>
 	  ),
 
<else>
 Q<sql_id> AS (SELECT <project; separator=",">
 FROM <target; separator=","> lateral view explode(array( <columns:{c | named_struct('prop',prop<c>,'val',val<c><if(project_type)>,'typ',typ<c><endif>)} ; separator="," > )) LT AS nstruct
 WHERE LT.nstruct.prop IS NOT NULL
 	   <if(entry_constraint)> AND <entry_constraint; separator=" AND "> <endif>
 	   <if(predicate_constraint)> AND (<predicate_constraint; separator=sep>)<endif>
 	   <if(graph_constraint)> AND <graph_constraint; separator=" AND "> <endif>
 	   <if(pfilter_constraint)> AND <pfilter_constraint; separator=" AND "> <endif>),
<endif>

QS<sql_id> AS ( SELECT <s_project; separator=",">
FROM Q<sql_id> LEFT OUTER JOIN <s_target> target_temp_table ON Q<sql_id>.ltval = target_temp_table.list_id AND Q<sql_id>.ltval LIKE 'lid:%'
	   <if(sfilter_constraint)> WHERE <sfilter_constraint; separator=" AND "> <endif>
	   <if(val_constraint)> <if(sfilter_constraint)> AND <else> WHERE <endif> <val_constraint; separator=" AND "> <endif> )	   
>>

ask(target)  ::= << 
 SELECT * FROM <target> LIMIT 1
>>

values(values_project, project, values, sql_id, target, join_constraint, store_name)  ::= << 
<if(target)>
QS<sql_id> AS ( select * from (select <values_project:{ v |  struct_col.col<i> AS <v>} ; separator=","> from (select storename from <store_name> limit 1) dummy lateral view explode(array(<values:{struct(<it; separator=",">)};separator=",">)) LATTEMP AS struct_col) AS TEMP  
, <target> <if(join_constraint)>WHERE <join_constraint; separator=" AND "><endif> 
<else>
QS<sql_id> AS ( select <values_project:{ v |  struct_col.col<i> AS <v>} ; separator=","> from (select storename from <store_name> limit 1) dummy lateral view explode(array(<values:{struct(<it; separator=",">)};separator=",">)) LATTEMP AS struct_col
<endif>
)
>>

minus(left_project,left_target,right_project,right_target,sql_id)  ::= << 
QS<sql_id> AS ( SELECT <left_project; separator=","> FROM <left_target> EXCEPT
SELECT <right_project; separator=","> FROM <right_target>)
>>

